
zbuff_common.c,212
unsigned ZBUFF_isError(size_t errorCode) { return ERR_isError(errorCode); }ZBUFF_isError23,730
const char* ZBUFF_getErrorName(size_t errorCode) { return ERR_getErrorName(errorCode); }ZBUFF_getErrorName26,911

zstd_compress_internal.h,20028
#define ZSTD_COMPRESS_HZSTD_COMPRESS_H16,514
#define kSearchStrength kSearchStrength34,893
#define HASH_READ_SIZE HASH_READ_SIZE35,924
#define ZSTD_DUBT_UNSORTED_MARK ZSTD_DUBT_UNSORTED_MARK36,955
typedef enum { ZSTDcs_created=0, ZSTDcs_init, ZSTDcs_ongoing, ZSTDcs_ending } ZSTD_compressionStage_e;ZSTDcs_created48,1911
typedef enum { ZSTDcs_created=0, ZSTDcs_init, ZSTDcs_ongoing, ZSTDcs_ending } ZSTD_compressionStage_e;ZSTDcs_init48,1911
typedef enum { ZSTDcs_created=0, ZSTDcs_init, ZSTDcs_ongoing, ZSTDcs_ending } ZSTD_compressionStage_e;ZSTDcs_ongoing48,1911
typedef enum { ZSTDcs_created=0, ZSTDcs_init, ZSTDcs_ongoing, ZSTDcs_ending } ZSTD_compressionStage_e;ZSTDcs_ending48,1911
typedef enum { ZSTDcs_created=0, ZSTDcs_init, ZSTDcs_ongoing, ZSTDcs_ending } ZSTD_compressionStage_e;ZSTD_compressionStage_e48,1911
typedef enum { zcss_init=0, zcss_load, zcss_flush } ZSTD_cStreamStage;zcss_init49,2014
typedef enum { zcss_init=0, zcss_load, zcss_flush } ZSTD_cStreamStage;zcss_load49,2014
typedef enum { zcss_init=0, zcss_load, zcss_flush } ZSTD_cStreamStage;zcss_flush49,2014
typedef enum { zcss_init=0, zcss_load, zcss_flush } ZSTD_cStreamStage;ZSTD_cStreamStage49,2014
typedef struct ZSTD_prefixDict_s {ZSTD_prefixDict_s51,2086
    const void* dict;dict52,2121
    size_t dictSize;dictSize53,2143
    ZSTD_dictContentType_e dictContentType;dictContentType54,2164
} ZSTD_prefixDict;ZSTD_prefixDict55,2208
    void* dictBuffer;dictBuffer58,2245
    void const* dict;dict59,2267
    size_t dictSize;dictSize60,2289
    ZSTD_dictContentType_e dictContentType;dictContentType61,2310
    ZSTD_CDict* cdict;cdict62,2354
} ZSTD_localDict;ZSTD_localDict63,2377
    HUF_CElt CTable[HUF_CTABLE_SIZE_U32(255)];CTable66,2413
    HUF_repeat repeatMode;repeatMode67,2460
} ZSTD_hufCTables_t;ZSTD_hufCTables_t68,2487
    FSE_CTable offcodeCTable[FSE_CTABLE_SIZE_U32(OffFSELog, MaxOff)];offcodeCTable71,2526
    FSE_CTable matchlengthCTable[FSE_CTABLE_SIZE_U32(MLFSELog, MaxML)];matchlengthCTable72,2596
    FSE_CTable litlengthCTable[FSE_CTABLE_SIZE_U32(LLFSELog, MaxLL)];litlengthCTable73,2668
    FSE_repeat offcode_repeatMode;offcode_repeatMode74,2738
    FSE_repeat matchlength_repeatMode;matchlength_repeatMode75,2773
    FSE_repeat litlength_repeatMode;litlength_repeatMode76,2812
} ZSTD_fseCTables_t;ZSTD_fseCTables_t77,2849
    ZSTD_hufCTables_t huf;huf80,2888
    ZSTD_fseCTables_t fse;fse81,2915
} ZSTD_entropyCTables_t;ZSTD_entropyCTables_t82,2942
    U32 off;            /* Offset code (offset + ZSTD_REP_MOVE) for the match */off85,2985
    U32 len;            /* Raw length of match */len86,3066
} ZSTD_match_t;ZSTD_match_t87,3116
    U32 offset;         /* Offset of sequence */offset90,3150
    U32 litLength;      /* Length of literals prior to match */litLength91,3199
    U32 matchLength;    /* Raw length of match */matchLength92,3263
} rawSeq;rawSeq93,3313
  rawSeq* seq;          /* The start of the sequences */seq96,3341
  size_t pos;           /* The index in seq where reading stopped. pos <= size. */pos97,3398
  size_t posInSequence; /* The position within the sequence at seq[pos] where readingposInSequence98,3481
  size_t size;          /* The number of sequences. <= capacity. */size100,3665
  size_t capacity;      /* The capacity starting from `seq` pointer */capacity101,3733
} rawSeqStore_t;rawSeqStore_t102,3804
UNUSED_ATTR static const rawSeqStore_t kNullRawSeqStore = {NULL, 0, 0, 0, 0};kNullRawSeqStore104,3822
    int price;price107,3918
    U32 off;off108,3933
    U32 mlen;mlen109,3946
    U32 litlen;litlen110,3960
    U32 rep[ZSTD_REP_NUM];rep111,3976
} ZSTD_optimal_t;ZSTD_optimal_t112,4003
typedef enum { zop_dynamic=0, zop_predef } ZSTD_OptPrice_e;zop_dynamic114,4022
typedef enum { zop_dynamic=0, zop_predef } ZSTD_OptPrice_e;zop_predef114,4022
typedef enum { zop_dynamic=0, zop_predef } ZSTD_OptPrice_e;ZSTD_OptPrice_e114,4022
    unsigned* litFreq;           /* table of literals statistics, of size 256 */litFreq118,4187
    unsigned* litLengthFreq;     /* table of litLength statistics, of size (MaxLL+1) */litLengthFreq119,4268
    unsigned* matchLengthFreq;   /* table of matchLength statistics, of size (MaxML+1) */matchLengthFreq120,4356
    unsigned* offCodeFreq;       /* table of offCode statistics, of size (MaxOff+1) */offCodeFreq121,4446
    ZSTD_match_t* matchTable;    /* list of found matches, of size ZSTD_OPT_NUM+1 */matchTable122,4533
    ZSTD_optimal_t* priceTable;  /* All positions tracked by optimal parser, of size ZSTD_OPT_NUM+1 */priceTable123,4618
    U32  litSum;                 /* nb of literals */litSum125,4722
    U32  litLengthSum;           /* nb of litLength codes */litLengthSum126,4776
    U32  matchLengthSum;         /* nb of matchLength codes */matchLengthSum127,4837
    U32  offCodeSum;             /* nb of offset codes */offCodeSum128,4900
    U32  litSumBasePrice;        /* to compare to log2(litfreq) */litSumBasePrice129,4958
    U32  litLengthSumBasePrice;  /* to compare to log2(llfreq)  */litLengthSumBasePrice130,5025
    U32  matchLengthSumBasePrice;/* to compare to log2(mlfreq)  */matchLengthSumBasePrice131,5092
    U32  offCodeSumBasePrice;    /* to compare to log2(offreq)  */offCodeSumBasePrice132,5159
    ZSTD_OptPrice_e priceType;   /* prices can be determined dynamically, or follow a pre-defined cost structure */priceType133,5226
    const ZSTD_entropyCTables_t* symbolCosts;  /* pre-calculated dictionary statistics */symbolCosts134,5342
    ZSTD_literalCompressionMode_e literalCompressionMode;literalCompressionMode135,5432
} optState_t;optState_t136,5490
  ZSTD_entropyCTables_t entropy;entropy139,5522
  U32 rep[ZSTD_REP_NUM];rep140,5555
} ZSTD_compressedBlockState_t;ZSTD_compressedBlockState_t141,5580
    BYTE const* nextSrc;    /* next block here to continue on current prefix */nextSrc144,5629
    BYTE const* base;       /* All regular indexes relative to this position */base145,5709
    BYTE const* dictBase;   /* extDict indexes relative to this position */dictBase146,5789
    U32 dictLimit;          /* below that point, need extDict */dictLimit147,5865
    U32 lowLimit;           /* below that point, no more valid data */lowLimit148,5930
} ZSTD_window_t;ZSTD_window_t149,6001
typedef struct ZSTD_matchState_t ZSTD_matchState_t;ZSTD_matchState_t151,6019
struct ZSTD_matchState_t {ZSTD_matchState_t152,6071
    ZSTD_window_t window;   /* State for window round buffer management */window153,6098
    U32 loadedDictEnd;      /* index of end of dictionary, within context's referential.loadedDictEnd154,6173
    U32 nextToUpdate;       /* index from which to continue table update */nextToUpdate161,6840
    U32 hashLog3;           /* dispatch table for matches of len==3 : larger == faster, more memory */hashLog3162,6916
    U32* hashTable;hashTable163,7019
    U32* hashTable3;hashTable3164,7039
    U32* chainTable;chainTable165,7060
    int dedicatedDictSearch;  /* Indicates whether this matchState is using thededicatedDictSearch166,7081
    optState_t opt;         /* optimal parser state */opt169,7267
    const ZSTD_matchState_t* dictMatchState;dictMatchState170,7322
    ZSTD_compressionParameters cParams;cParams171,7367
    const rawSeqStore_t* ldmSeqStore;ldmSeqStore172,7407
    ZSTD_compressedBlockState_t* prevCBlock;prevCBlock176,7466
    ZSTD_compressedBlockState_t* nextCBlock;nextCBlock177,7511
    ZSTD_matchState_t matchState;matchState178,7556
} ZSTD_blockState_t;ZSTD_blockState_t179,7590
    U32 offset;offset182,7629
    U32 checksum;checksum183,7645
} ldmEntry_t;ldmEntry_t184,7663
    ZSTD_window_t window;   /* State for the window round buffer management */window187,7695
    ldmEntry_t* hashTable;hashTable188,7774
    U32 loadedDictEnd;loadedDictEnd189,7801
    BYTE* bucketOffsets;    /* Next position in bucket to insert entry */bucketOffsets190,7824
    U64 hashPower;          /* Used to compute the rolling hash.hashPower191,7898
} ldmState_t;ldmState_t193,8033
    U32 enableLdm;          /* 1 if enable long distance matching */enableLdm196,8065
    U32 hashLog;            /* Log size of hashTable */hashLog197,8134
    U32 bucketSizeLog;      /* Log bucket size for collision resolution, at most 8 */bucketSizeLog198,8190
    U32 minMatchLength;     /* Minimum match length */minMatchLength199,8276
    U32 hashRateLog;       /* Log number of entries to skip */hashRateLog200,8331
    U32 windowLog;          /* Window log for the LDM */windowLog201,8394
} ldmParams_t;ldmParams_t202,8451
    int collectSequences;collectSequences205,8484
    ZSTD_Sequence* seqStart;seqStart206,8510
    size_t seqIndex;seqIndex207,8539
    size_t maxSequences;maxSequences208,8560
} SeqCollector;SeqCollector209,8585
struct ZSTD_CCtx_params_s {ZSTD_CCtx_params_s211,8602
    ZSTD_format_e format;format212,8630
    ZSTD_compressionParameters cParams;cParams213,8656
    ZSTD_frameParameters fParams;fParams214,8696
    int compressionLevel;compressionLevel216,8731
    int forceWindow;           /* force back-references to respect limit offorceWindow217,8757
    size_t targetCBlockSize;   /* Tries to fit compressed block size to be around targetCBlockSize.targetCBlockSize219,8899
    int srcSizeHint;           /* User's best guess of source size.srcSizeHint222,9155
    ZSTD_dictAttachPref_e attachDictPref;attachDictPref226,9399
    ZSTD_literalCompressionMode_e literalCompressionMode;literalCompressionMode227,9441
    int nbWorkers;nbWorkers230,9559
    size_t jobSize;jobSize231,9578
    int overlapLog;overlapLog232,9598
    int rsyncable;rsyncable233,9618
    ldmParams_t ldmParams;ldmParams236,9682
    int enableDedicatedDictSearch;enableDedicatedDictSearch239,9760
    ZSTD_bufferMode_e inBufferMode;inBufferMode242,9832
    ZSTD_bufferMode_e outBufferMode;outBufferMode243,9868
    ZSTD_sequenceFormat_e blockDelimiters;blockDelimiters246,9941
    int validateSequences;validateSequences247,9984
    ZSTD_customMem customMem;customMem250,10085
#define COMPRESS_SEQUENCES_WORKSPACE_SIZE COMPRESS_SEQUENCES_WORKSPACE_SIZE253,10172
#define ENTROPY_WORKSPACE_SIZE ENTROPY_WORKSPACE_SIZE254,10248
    ZSTDb_not_buffered,ZSTDb_not_buffered262,10587
    ZSTDb_bufferedZSTDb_buffered263,10611
} ZSTD_buffered_policy_e;ZSTD_buffered_policy_e264,10630
struct ZSTD_CCtx_s {ZSTD_CCtx_s266,10657
    ZSTD_compressionStage_e stage;stage267,10678
    int cParamsChanged;                  /* == 1 if cParams(except wlog) or compression level are changed in requestedParams. Triggers transmission of new params to ZSTDMT (if available) then reset to 0. */cParamsChanged268,10713
    int bmi2;                            /* == 1 if the CPU supports BMI2 and 0 otherwise. CPU support is determined dynamically once per context lifetime. */bmi2269,10920
    ZSTD_CCtx_params requestedParams;requestedParams270,11079
    ZSTD_CCtx_params appliedParams;appliedParams271,11117
    U32   dictID;dictID272,11153
    ZSTD_cwksp workspace; /* manages buffer for dynamic allocations */workspace274,11172
    size_t blockSize;blockSize275,11243
    unsigned long long pledgedSrcSizePlusOne;  /* this way, 0 (default) == unknown */pledgedSrcSizePlusOne276,11265
    unsigned long long consumedSrcSize;consumedSrcSize277,11351
    unsigned long long producedCSize;producedCSize278,11391
    XXH64_state_t xxhState;xxhState279,11429
    ZSTD_customMem customMem;customMem280,11457
    ZSTD_threadPool* pool;pool281,11487
    size_t staticSize;staticSize282,11514
    SeqCollector seqCollector;seqCollector283,11537
    int isFirstBlock;isFirstBlock284,11568
    int initialized;initialized285,11590
    seqStore_t seqStore;      /* sequences storage ptrs */seqStore287,11612
    ldmState_t ldmState;      /* long distance matching state */ldmState288,11671
    rawSeq* ldmSequences;     /* Storage for the ldm output sequences */ldmSequences289,11736
    size_t maxNbLdmSequences;maxNbLdmSequences290,11809
    rawSeqStore_t externSeqStore; /* Mutable reference to external sequences */externSeqStore291,11839
    ZSTD_blockState_t blockState;blockState292,11919
    U32* entropyWorkspace;  /* entropy workspace of ENTROPY_WORKSPACE_SIZE bytes */entropyWorkspace293,11953
    ZSTD_buffered_policy_e bufferedPolicy;bufferedPolicy296,12079
    char*  inBuff;inBuff299,12143
    size_t inBuffSize;inBuffSize300,12162
    size_t inToCompress;inToCompress301,12185
    size_t inBuffPos;inBuffPos302,12210
    size_t inBuffTarget;inBuffTarget303,12232
    char*  outBuff;outBuff304,12257
    size_t outBuffSize;outBuffSize305,12277
    size_t outBuffContentSize;outBuffContentSize306,12301
    size_t outBuffFlushedSize;outBuffFlushedSize307,12332
    ZSTD_cStreamStage streamStage;streamStage308,12363
    U32    frameEnded;frameEnded309,12398
    ZSTD_inBuffer expectedInBuffer;expectedInBuffer312,12466
    size_t expectedOutBufferSize;expectedOutBufferSize313,12502
    ZSTD_localDict localDict;localDict316,12558
    const ZSTD_CDict* cdict;cdict317,12588
    ZSTD_prefixDict prefixDict;   /* single-usage dictionary */prefixDict318,12617
    ZSTDMT_CCtx* mtctx;mtctx322,12732
typedef enum { ZSTD_dtlm_fast, ZSTD_dtlm_full } ZSTD_dictTableLoadMethod_e;ZSTD_dtlm_fast326,12767
typedef enum { ZSTD_dtlm_fast, ZSTD_dtlm_full } ZSTD_dictTableLoadMethod_e;ZSTD_dtlm_full326,12767
typedef enum { ZSTD_dtlm_fast, ZSTD_dtlm_full } ZSTD_dictTableLoadMethod_e;ZSTD_dictTableLoadMethod_e326,12767
    ZSTD_noDict = 0,ZSTD_noDict329,12859
    ZSTD_extDict = 1,ZSTD_extDict330,12880
    ZSTD_dictMatchState = 2,ZSTD_dictMatchState331,12902
    ZSTD_dedicatedDictSearch = 3ZSTD_dedicatedDictSearch332,12931
} ZSTD_dictMode_e;ZSTD_dictMode_e333,12964
    ZSTD_cpm_noAttachDict = 0,  /* Compression with ZSTD_noDict or ZSTD_extDict.ZSTD_cpm_noAttachDict336,12999
    ZSTD_cpm_attachDict = 1,    /* Compression with ZSTD_dictMatchState or ZSTD_dedicatedDictSearch.ZSTD_cpm_attachDict340,13281
    ZSTD_cpm_createCDict = 2,   /* Creating a CDict.ZSTD_cpm_createCDict344,13580
    ZSTD_cpm_unknown = 3,       /* ZSTD_getCParams, ZSTD_getParams, ZSTD_adjustParams.ZSTD_cpm_unknown348,13863
} ZSTD_cParamMode_e;ZSTD_cParamMode_e353,14273
typedef size_t (*ZSTD_blockCompressor) (ZSTD_blockCompressor355,14295
MEM_STATIC U32 ZSTD_LLcode(U32 litLength)ZSTD_LLcode361,14552
MEM_STATIC U32 ZSTD_MLcode(U32 mlBase)ZSTD_MLcode378,15428
typedef struct repcodes_s {repcodes_s392,16415
    U32 rep[3];rep393,16443
} repcodes_t;repcodes_t394,16459
MEM_STATIC repcodes_t ZSTD_updateRep(U32 const rep[3], U32 const offset, U32 const ll0)ZSTD_updateRep396,16474
MEM_STATIC int ZSTD_cParam_withinBounds(ZSTD_cParameter cParam, int value)ZSTD_cParam_withinBounds420,17358
MEM_STATIC size_t ZSTD_noCompressBlock (void* dst, size_t dstCapacity, const void* src, size_t srcSize, U32 lastBlock)ZSTD_noCompressBlock432,17773
MEM_STATIC size_t ZSTD_rleCompressBlock (void* dst, size_t dstCapacity, BYTE src, size_t srcSize, U32 lastBlock)ZSTD_rleCompressBlock442,18280
MEM_STATIC size_t ZSTD_minGain(size_t srcSize, ZSTD_strategy strat)ZSTD_minGain457,18811
MEM_STATIC int ZSTD_disableLiteralsCompression(const ZSTD_CCtx_params* cctxParams)ZSTD_disableLiteralsCompression465,19094
static void ZSTD_safecopyLiterals(BYTE* op, BYTE const* ip, BYTE const* const iend, BYTE const* ilimit_w) {ZSTD_safecopyLiterals485,19796
void ZSTD_storeSeq(seqStore_t* seqStorePtr, size_t litLength, const BYTE* literals, const BYTE* litLimit, U32 offCode, size_t mlBase)ZSTD_storeSeq502,20421
static unsigned ZSTD_NbCommonBytes (size_t val)ZSTD_NbCommonBytes559,22835
MEM_STATIC size_t ZSTD_count(const BYTE* pIn, const BYTE* pMatch, const BYTE* const pInLimit)ZSTD_count632,25987
ZSTD_count_2segments(const BYTE* ip, const BYTE* match,ZSTD_count_2segments658,27175
static const U32 prime3bytes = 506832829U;prime3bytes676,28100
static U32    ZSTD_hash3(U32 u, U32 h) { return ((u << (32-24)) * prime3bytes)  >> (32-h) ; }ZSTD_hash3677,28143
MEM_STATIC size_t ZSTD_hash3Ptr(const void* ptr, U32 h) { return ZSTD_hash3(MEM_readLE32(ptr), h); } /* only in zstd_opt.h */ZSTD_hash3Ptr678,28237
static const U32 prime4bytes = 2654435761U;prime4bytes680,28364
static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }ZSTD_hash4681,28408
static size_t ZSTD_hash4Ptr(const void* ptr, U32 h) { return ZSTD_hash4(MEM_read32(ptr), h); }ZSTD_hash4Ptr682,28488
static const U64 prime5bytes = 889523592379ULL;prime5bytes684,28584
static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }ZSTD_hash5685,28632
static size_t ZSTD_hash5Ptr(const void* p, U32 h) { return ZSTD_hash5(MEM_readLE64(p), h); }ZSTD_hash5Ptr686,28736
static const U64 prime6bytes = 227718039650203ULL;prime6bytes688,28830
static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }ZSTD_hash6689,28881
static size_t ZSTD_hash6Ptr(const void* p, U32 h) { return ZSTD_hash6(MEM_readLE64(p), h); }ZSTD_hash6Ptr690,28985
static const U64 prime7bytes = 58295818150454627ULL;prime7bytes692,29079
static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }ZSTD_hash7693,29132
static size_t ZSTD_hash7Ptr(const void* p, U32 h) { return ZSTD_hash7(MEM_readLE64(p), h); }ZSTD_hash7Ptr694,29236
static const U64 prime8bytes = 0xCF1BBCDCB7A56463ULL;prime8bytes696,29330
static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }ZSTD_hash8697,29384
static size_t ZSTD_hash8Ptr(const void* p, U32 h) { return ZSTD_hash8(MEM_readLE64(p), h); }ZSTD_hash8Ptr698,29476
size_t ZSTD_hashPtr(const void* p, U32 hBits, U32 mls)ZSTD_hashPtr701,29599
static U64 ZSTD_ipow(U64 base, U64 exponent)ZSTD_ipow717,29967
#define ZSTD_ROLL_HASH_CHAR_OFFSET ZSTD_ROLL_HASH_CHAR_OFFSET728,30164
static U64 ZSTD_rollingHash_append(U64 hash, void const* buf, size_t size)ZSTD_rollingHash_append733,30276
MEM_STATIC U64 ZSTD_rollingHash_compute(void const* buf, size_t size)ZSTD_rollingHash_compute747,30650
MEM_STATIC U64 ZSTD_rollingHash_primePower(U32 length)ZSTD_rollingHash_primePower756,30928
MEM_STATIC U64 ZSTD_rollingHash_rotate(U64 hash, BYTE toRemove, BYTE toAdd, U64 primePower)ZSTD_rollingHash_rotate764,31111
#define ZSTD_CURRENT_MAX ZSTD_CURRENT_MAX779,31615
#define ZSTD_CHUNKSIZE_MAX ZSTD_CHUNKSIZE_MAX781,31759
MEM_STATIC void ZSTD_window_clear(ZSTD_window_t* window)ZSTD_window_clear789,32095
MEM_STATIC U32 ZSTD_window_hasExtDict(ZSTD_window_t const window)ZSTD_window_hasExtDict802,32408
MEM_STATIC ZSTD_dictMode_e ZSTD_matchState_dictMode(const ZSTD_matchState_t *ms)ZSTD_matchState_dictMode812,32670
MEM_STATIC U32 ZSTD_window_needOverflowCorrection(ZSTD_window_t const window,ZSTD_window_needOverflowCorrection826,33133
MEM_STATIC U32 ZSTD_window_correctOverflow(ZSTD_window_t* window, U32 cycleLog,ZSTD_window_correctOverflow843,33773
ZSTD_window_enforceMaxDist(ZSTD_window_t* window,ZSTD_window_enforceMaxDist920,37239
ZSTD_checkDictValidity(const ZSTD_window_t* window,ZSTD_checkDictValidity965,39516
MEM_STATIC void ZSTD_window_init(ZSTD_window_t* window) {ZSTD_window_init993,40829
MEM_STATIC U32 ZSTD_window_update(ZSTD_window_t* window,ZSTD_window_update1009,41549
MEM_STATIC U32 ZSTD_getLowestMatchIndex(const ZSTD_matchState_t* ms, U32 curr, unsigned windowLog)ZSTD_getLowestMatchIndex1048,43381
MEM_STATIC U32 ZSTD_getLowestPrefixIndex(const ZSTD_matchState_t* ms, U32 curr, unsigned windowLog)ZSTD_getLowestPrefixIndex1065,44216
MEM_STATIC double ZSTD_fWeight(U32 rawStat)ZSTD_fWeight1083,44917
MEM_STATIC void ZSTD_debugTable(const U32* table, U32 max)ZSTD_debugTable1098,45446

hist.h,102
#define HIST_WKSP_SIZE_U32 HIST_WKSP_SIZE_U3238,1562
#define HIST_WKSP_SIZE HIST_WKSP_SIZE39,1594

xxhash.h,3700
#define XXHASH_H_5627135585666179 XXHASH_H_562713558566617952,1866
typedef enum { XXH_OK=0, XXH_ERROR } XXH_errorcode;XXH_OK59,2006
typedef enum { XXH_OK=0, XXH_ERROR } XXH_errorcode;XXH_ERROR59,2006
typedef enum { XXH_OK=0, XXH_ERROR } XXH_errorcode;XXH_errorcode59,2006
#    define XXH_STATIC_LINKING_ONLYXXH_STATIC_LINKING_ONLY76,2560
#    define XXH_PUBLIC_API XXH_PUBLIC_API79,2629
#    define XXH_PUBLIC_API XXH_PUBLIC_API81,2801
#    define XXH_PUBLIC_API XXH_PUBLIC_API83,2868
#    define XXH_PUBLIC_API XXH_PUBLIC_API85,2919
#  define XXH_PUBLIC_API XXH_PUBLIC_API88,3069
#  define XXH_CAT(XXH_CAT103,3725
#  define XXH_NAME2(XXH_NAME2104,3753
#  define XXH32 XXH32105,3791
#  define XXH64 XXH64106,3839
#  define XXH_versionNumber XXH_versionNumber107,3887
#  define XXH32_createState XXH32_createState108,3959
#  define XXH64_createState XXH64_createState109,4031
#  define XXH32_freeState XXH32_freeState110,4103
#  define XXH64_freeState XXH64_freeState111,4171
#  define XXH32_reset XXH32_reset112,4239
#  define XXH64_reset XXH64_reset113,4299
#  define XXH32_update XXH32_update114,4359
#  define XXH64_update XXH64_update115,4421
#  define XXH32_digest XXH32_digest116,4483
#  define XXH64_digest XXH64_digest117,4545
#  define XXH32_copyState XXH32_copyState118,4607
#  define XXH64_copyState XXH64_copyState119,4675
#  define XXH32_canonicalFromHash XXH32_canonicalFromHash120,4743
#  define XXH64_canonicalFromHash XXH64_canonicalFromHash121,4827
#  define XXH32_hashFromCanonical XXH32_hashFromCanonical122,4911
#  define XXH64_hashFromCanonical XXH64_hashFromCanonical123,4995
#define XXH_VERSION_MAJOR XXH_VERSION_MAJOR130,5181
#define XXH_VERSION_MINOR XXH_VERSION_MINOR131,5212
#define XXH_VERSION_RELEASE XXH_VERSION_RELEASE132,5243
#define XXH_VERSION_NUMBER XXH_VERSION_NUMBER133,5274
typedef unsigned int       XXH32_hash_t;XXH32_hash_t140,5519
typedef unsigned long long XXH64_hash_t;XXH64_hash_t141,5560
typedef struct XXH32_state_s XXH32_state_t;   /* incomplete type */XXH32_state_t162,6475
typedef struct XXH64_state_s XXH64_state_t;   /* incomplete type */XXH64_state_t163,6543
#  define restrict restrict211,8605
typedef struct { unsigned char digest[4]; } XXH32_canonical_t;digest226,9373
typedef struct { unsigned char digest[4]; } XXH32_canonical_t;XXH32_canonical_t226,9373
typedef struct { unsigned char digest[8]; } XXH64_canonical_t;digest227,9436
typedef struct { unsigned char digest[8]; } XXH64_canonical_t;XXH64_canonical_t227,9436
#define XXH_STATIC_H_3543687687345XXH_STATIC_H_3543687687345246,10465
   struct XXH32_state_s {XXH32_state_s252,10659
       unsigned total_len_32;total_len_32253,10685
       unsigned large_len;large_len254,10715
       unsigned v1;v1255,10742
       unsigned v2;v2256,10762
       unsigned v3;v3257,10782
       unsigned v4;v4258,10802
       unsigned mem32[4];   /* buffer defined as U32 for alignment */mem32259,10822
       unsigned memsize;memsize260,10892
       unsigned reserved;   /* never read nor write, will be removed in a future version */reserved261,10917
   struct XXH64_state_s {XXH64_state_s264,11051
       unsigned long long total_len;total_len265,11077
       unsigned long long v1;v1266,11114
       unsigned long long v2;v2267,11144
       unsigned long long v3;v3268,11174
       unsigned long long v4;v4269,11204
       unsigned long long mem64[4];   /* buffer defined as U64 for alignment */mem64270,11234
       unsigned memsize;memsize271,11314
       unsigned reserved[2];          /* never read nor write, will be removed in a future version */reserved272,11339

zstd_ldm.h,109
#define ZSTD_LDM_HZSTD_LDM_H12,405
#define ZSTD_LDM_DEFAULT_WINDOW_LOG ZSTD_LDM_DEFAULT_WINDOW_LOG25,687

debug.h,445
#define DEBUG_H_12987983217DEBUG_H_1298798321733,1270
#define DEBUG_STATIC_ASSERT(DEBUG_STATIC_ASSERT43,1541
#  define DEBUGLEVEL DEBUGLEVEL50,1752
#  define ZSTD_DEPS_NEED_ASSERTZSTD_DEPS_NEED_ASSERT70,2370
#    define assert(assert74,2522
#  define ZSTD_DEPS_NEED_IOZSTD_DEPS_NEED_IO79,2632
#  define RAWLOG(RAWLOG88,3072
#  define DEBUGLOG(DEBUGLOG92,3291
#  define RAWLOG(RAWLOG98,3583
#  define DEBUGLOG(DEBUGLOG99,3634

pool.h,207
#define POOL_HPOOL_H12,401
#define ZSTD_STATIC_LINKING_ONLY ZSTD_STATIC_LINKING_ONLY20,488
typedef struct POOL_ctx_s POOL_ctx;POOL_ctx23,563
typedef void (*POOL_function)(void*);POOL_function61,1826

zstd_v05.c,27991
#define MEM_H_MODULEMEM_H_MODULE52,2268
#  define MEM_STATIC MEM_STATIC69,2658
#  define MEM_STATIC MEM_STATIC71,2813
#  define MEM_STATIC MEM_STATIC73,2872
#  define MEM_STATIC MEM_STATIC75,2915
  typedef  uint8_t BYTE;BYTE88,3396
  typedef uint16_t U16;U1689,3421
  typedef  int16_t S16;S1690,3445
  typedef uint32_t U32;U3291,3469
  typedef  int32_t S32;S3292,3493
  typedef uint64_t U64;U6493,3517
  typedef  int64_t S64;S6494,3541
  typedef unsigned char       BYTE;BYTE96,3571
  typedef unsigned short      U16;U1697,3607
  typedef   signed short      S16;S1698,3642
  typedef unsigned int        U32;U3299,3677
  typedef   signed int        S32;S32100,3712
  typedef unsigned long long  U64;U64101,3747
  typedef   signed long long  S64;S64102,3782
#    define MEM_FORCE_MEMORY_ACCESS MEM_FORCE_MEMORY_ACCESS124,5247
#    define MEM_FORCE_MEMORY_ACCESS MEM_FORCE_MEMORY_ACCESS127,5510
MEM_STATIC unsigned MEM_32bits(void) { return sizeof(void*)==4; }MEM_32bits131,5565
MEM_STATIC unsigned MEM_64bits(void) { return sizeof(void*)==8; }MEM_64bits132,5631
MEM_STATIC unsigned MEM_isLittleEndian(void)MEM_isLittleEndian134,5698
MEM_STATIC U16 MEM_read16(const void* memPtr) { return *(const U16*) memPtr; }MEM_read16144,6077
MEM_STATIC U32 MEM_read32(const void* memPtr) { return *(const U32*) memPtr; }MEM_read32145,6156
MEM_STATIC U64 MEM_read64(const void* memPtr) { return *(const U64*) memPtr; }MEM_read64146,6235
MEM_STATIC void MEM_write16(void* memPtr, U16 value) { *(U16*)memPtr = value; }MEM_write16148,6315
MEM_STATIC void MEM_write32(void* memPtr, U32 value) { *(U32*)memPtr = value; }MEM_write32149,6395
MEM_STATIC void MEM_write64(void* memPtr, U64 value) { *(U64*)memPtr = value; }MEM_write64150,6475
typedef union { U16 u16; U32 u32; U64 u64; size_t st; } __attribute__((packed)) unalign;u16156,6782
typedef union { U16 u16; U32 u32; U64 u64; size_t st; } __attribute__((packed)) unalign;u32156,6782
typedef union { U16 u16; U32 u32; U64 u64; size_t st; } __attribute__((packed)) unalign;u64156,6782
typedef union { U16 u16; U32 u32; U64 u64; size_t st; } __attribute__((packed)) unalign;st156,6782
typedef union { U16 u16; U32 u32; U64 u64; size_t st; } __attribute__((packed)) unalign;unalign156,6782
MEM_STATIC U16 MEM_read16(const void* ptr) { return ((const unalign*)ptr)->u16; }MEM_read16158,6872
MEM_STATIC U32 MEM_read32(const void* ptr) { return ((const unalign*)ptr)->u32; }MEM_read32159,6954
MEM_STATIC U64 MEM_read64(const void* ptr) { return ((const unalign*)ptr)->u64; }MEM_read64160,7036
MEM_STATIC void MEM_write16(void* memPtr, U16 value) { ((unalign*)memPtr)->u16 = value; }MEM_write16162,7119
MEM_STATIC void MEM_write32(void* memPtr, U32 value) { ((unalign*)memPtr)->u32 = value; }MEM_write32163,7209
MEM_STATIC void MEM_write64(void* memPtr, U64 value) { ((unalign*)memPtr)->u64 = value; }MEM_write64164,7299
MEM_STATIC U16 MEM_read16(const void* memPtr)MEM_read16171,7469
MEM_STATIC U32 MEM_read32(const void* memPtr)MEM_read32176,7580
MEM_STATIC U64 MEM_read64(const void* memPtr)MEM_read64181,7691
MEM_STATIC void MEM_write16(void* memPtr, U16 value)MEM_write16186,7802
MEM_STATIC void MEM_write32(void* memPtr, U32 value)MEM_write32191,7903
MEM_STATIC void MEM_write64(void* memPtr, U64 value)MEM_write64196,8004
MEM_STATIC U16 MEM_readLE16(const void* memPtr)MEM_readLE16204,8144
MEM_STATIC void MEM_writeLE16(void* memPtr, U16 val)MEM_writeLE16214,8364
MEM_STATIC U32 MEM_readLE32(const void* memPtr)MEM_readLE32225,8597
MEM_STATIC U64 MEM_readLE64(const void* memPtr)MEM_readLE64236,8864
MEM_STATIC size_t MEM_readLEST(const void* memPtr)MEM_readLEST248,9224
#define ZSTD_STATIC_HZSTD_STATIC_H295,11084
#define ZSTDv05_WINDOWLOG_ABSOLUTEMIN ZSTDv05_WINDOWLOG_ABSOLUTEMIN311,11491
#define ZSTD_CCOMMON_H_MODULEZSTD_CCOMMON_H_MODULE431,17298
#define MIN(MIN438,17430
#define MAX(MAX439,17469
#define ZSTDv05_DICT_MAGIC ZSTDv05_DICT_MAGIC445,17612
#define KB KB447,17652
#define MB MB448,17673
#define GB GB449,17694
#define BLOCKSIZE BLOCKSIZE451,17716
static const size_t ZSTDv05_blockHeaderSize = 3;ZSTDv05_blockHeaderSize453,17796
static const size_t ZSTDv05_frameHeaderSize_min = 5;ZSTDv05_frameHeaderSize_min454,17845
#define ZSTDv05_frameHeaderSize_max ZSTDv05_frameHeaderSize_max455,17898
#define BITv057 BITv057457,17981
#define BITv056 BITv056458,18001
#define BITv055 BITv055459,18021
#define BITv054 BITv054460,18041
#define BITv051 BITv051461,18061
#define BITv050 BITv050462,18081
#define IS_HUFv05 IS_HUFv05464,18102
#define IS_PCH IS_PCH465,18122
#define IS_RAW IS_RAW466,18139
#define IS_RLE IS_RLE467,18156
#define MINMATCH MINMATCH469,18174
#define REPCODE_STARTVALUE REPCODE_STARTVALUE470,18193
#define Litbits Litbits472,18223
#define MLbits MLbits473,18242
#define LLbits LLbits474,18261
#define Offbits Offbits475,18280
#define MaxLit MaxLit476,18299
#define MaxML MaxML477,18333
#define MaxLL MaxLL478,18366
#define MaxOff MaxOff479,18399
#define MLFSEv05Log MLFSEv05Log480,18432
#define LLFSEv05Log LLFSEv05Log481,18457
#define OffFSEv05Log OffFSEv05Log482,18482
#define MaxSeq MaxSeq483,18507
#define FSEv05_ENCODING_RAW FSEv05_ENCODING_RAW485,18541
#define FSEv05_ENCODING_RLE FSEv05_ENCODING_RLE486,18575
#define FSEv05_ENCODING_STATIC FSEv05_ENCODING_STATIC487,18609
#define FSEv05_ENCODING_DYNAMIC FSEv05_ENCODING_DYNAMIC488,18643
#define HufLog HufLog491,18679
#define MIN_SEQUENCES_SIZE MIN_SEQUENCES_SIZE493,18698
#define MIN_CBLOCK_SIZE MIN_CBLOCK_SIZE494,18742
#define WILDCOPY_OVERLENGTH WILDCOPY_OVERLENGTH496,18870
#define ZSTD_CONTENTSIZE_ERROR ZSTD_CONTENTSIZE_ERROR498,18901
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_compressed500,18946
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_raw500,18946
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_rle500,18946
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_end500,18946
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;blockType_t500,18946
static void ZSTDv05_copy8(void* dst, const void* src) { memcpy(dst, src, 8); }ZSTDv05_copy8506,19154
#define COPY8(COPY8508,19234
MEM_STATIC void ZSTDv05_wildcopy(void* dst, const void* src, ptrdiff_t length)ZSTDv05_wildcopy512,19405
    void* buffer;buffer527,19777
    U32*  offsetStart;offsetStart528,19795
    U32*  offset;offset529,19818
    BYTE* offCodeStart;offCodeStart530,19836
    BYTE* offCode;offCode531,19860
    BYTE* litStart;litStart532,19879
    BYTE* lit;lit533,19899
    BYTE* litLengthStart;litLengthStart534,19914
    BYTE* litLength;litLength535,19940
    BYTE* matchLengthStart;matchLengthStart536,19961
    BYTE* matchLength;matchLength537,19989
    BYTE* dumpsStart;dumpsStart538,20012
    BYTE* dumps;dumps539,20034
    U32* matchLengthFreq;matchLengthFreq541,20065
    U32* litLengthFreq;litLengthFreq542,20091
    U32* litFreq;litFreq543,20115
    U32* offCodeFreq;offCodeFreq544,20133
    U32  matchLengthSum;matchLengthSum545,20155
    U32  litLengthSum;litLengthSum546,20180
    U32  litSum;litSum547,20203
    U32  offCodeSum;offCodeSum548,20220
} seqStore_t;seqStore_t549,20241
#define FSEv05_HFSEv05_H589,22102
typedef unsigned FSEv05_DTable;   /* don't allocate that. It's just a way to be more restrictive than void* */FSEv05_DTable646,24118
#define BITv05STREAM_H_MODULEBITv05STREAM_H_MODULE707,26905
    size_t   bitContainer;bitContainer727,27363
    unsigned bitsConsumed;bitsConsumed728,27390
    const char* ptr;ptr729,27417
    const char* start;start730,27438
} BITv05_DStream_t;BITv05_DStream_t731,27461
typedef enum { BITv05_DStream_unfinished = 0,BITv05_DStream_unfinished733,27482
               BITv05_DStream_endOfBuffer = 1,BITv05_DStream_endOfBuffer734,27528
               BITv05_DStream_completed = 2,BITv05_DStream_completed735,27575
               BITv05_DStream_overflow = 3 } BITv05_DStream_status;  /* result of BITv05_reloadDStream() */BITv05_DStream_overflow736,27620
               BITv05_DStream_overflow = 3 } BITv05_DStream_status;  /* result of BITv05_reloadDStream() */BITv05_DStream_status736,27620
MEM_STATIC unsigned BITv05_highbit32 (U32 val)BITv05_highbit32756,28553
MEM_STATIC size_t BITv05_initDStream(BITv05_DStream_t* bitD, const void* srcBuffer, size_t srcSize)BITv05_initDStream790,29696
MEM_STATIC size_t BITv05_lookBits(BITv05_DStream_t* bitD, U32 nbBits)BITv05_lookBits826,31596
MEM_STATIC size_t BITv05_lookBitsFast(BITv05_DStream_t* bitD, U32 nbBits)BITv05_lookBitsFast834,31915
MEM_STATIC void BITv05_skipBits(BITv05_DStream_t* bitD, U32 nbBits)BITv05_skipBits840,32155
MEM_STATIC size_t BITv05_readBits(BITv05_DStream_t* bitD, unsigned nbBits)BITv05_readBits845,32262
MEM_STATIC size_t BITv05_readBitsFast(BITv05_DStream_t* bitD, unsigned nbBits)BITv05_readBitsFast854,32523
MEM_STATIC BITv05_DStream_status BITv05_reloadDStream(BITv05_DStream_t* bitD)BITv05_reloadDStream861,32714
MEM_STATIC unsigned BITv05_endOfDStream(const BITv05_DStream_t* DStream)BITv05_endOfDStream893,33931
#define FSEv05_STATIC_HFSEv05_STATIC_H938,36025
#define FSEv05_DTABLE_SIZE_U32(FSEv05_DTABLE_SIZE_U32950,36317
    size_t      state;state969,36999
    const void* table;   /* precise table may vary, depending on U16 */table970,37022
} FSEv05_DState_t;FSEv05_DState_t971,37094
    U16 tableLog;tableLog995,37866
    U16 fastMode;fastMode996,37884
} FSEv05_DTableHeader;   /* sizeof U32 */FSEv05_DTableHeader997,37902
    unsigned short newState;newState1001,37962
    unsigned char  symbol;symbol1002,37991
    unsigned char  nbBits;nbBits1003,38018
} FSEv05_decode_t;   /* size == U32 */FSEv05_decode_t1004,38045
MEM_STATIC void FSEv05_initDState(FSEv05_DState_t* DStatePtr, BITv05_DStream_t* bitD, const FSEv05_DTable* dt)FSEv05_initDState1006,38085
MEM_STATIC BYTE FSEv05_peakSymbol(FSEv05_DState_t* DStatePtr)FSEv05_peakSymbol1015,38435
MEM_STATIC BYTE FSEv05_decodeSymbol(FSEv05_DState_t* DStatePtr, BITv05_DStream_t* bitD)FSEv05_decodeSymbol1021,38625
MEM_STATIC BYTE FSEv05_decodeSymbolFast(FSEv05_DState_t* DStatePtr, BITv05_DStream_t* bitD)FSEv05_decodeSymbolFast1032,39007
MEM_STATIC unsigned FSEv05_endOfDState(const FSEv05_DState_t* DStatePtr)FSEv05_endOfDState1043,39396
#define FSEv05_MAX_MEMORY_USAGE FSEv05_MAX_MEMORY_USAGE1098,41868
#define FSEv05_DEFAULT_MEMORY_USAGE FSEv05_DEFAULT_MEMORY_USAGE1099,41903
#define FSEv05_MAX_SYMBOL_VALUE FSEv05_MAX_SYMBOL_VALUE1104,42051
#define FSEv05_FUNCTION_TYPE FSEv05_FUNCTION_TYPE1110,42257
#define FSEv05_FUNCTION_EXTENSIONFSEv05_FUNCTION_EXTENSION1111,42291
#define FSEv05_DECODE_TYPE FSEv05_DECODE_TYPE1112,42325
#  define FORCE_INLINE FORCE_INLINE1121,42603
#      define FORCE_INLINE FORCE_INLINE1128,43016
#      define FORCE_INLINE FORCE_INLINE1130,43098
#    define FORCE_INLINE FORCE_INLINE1133,43158
#define FSEv05_MAX_TABLELOG FSEv05_MAX_TABLELOG1150,43665
#define FSEv05_MAX_TABLESIZE FSEv05_MAX_TABLESIZE1151,43722
#define FSEv05_MAXTABLESIZE_MASK FSEv05_MAXTABLESIZE_MASK1152,43777
#define FSEv05_DEFAULT_TABLELOG FSEv05_DEFAULT_TABLELOG1153,43835
#define FSEv05_MIN_TABLELOG FSEv05_MIN_TABLELOG1154,43899
#define FSEv05_TABLELOG_ABSOLUTE_MAX FSEv05_TABLELOG_ABSOLUTE_MAX1156,43930
#define FSEv05_STATIC_ASSERT(FSEv05_STATIC_ASSERT1165,44263
typedef unsigned DTable_max_t[FSEv05_DTABLE_SIZE_U32(FSEv05_MAX_TABLELOG)];DTable_max_t1171,44545
#define FSEv05_CAT(FSEv05_CAT1192,45153
#define FSEv05_FUNCTION_NAME(FSEv05_FUNCTION_NAME1193,45182
#define FSEv05_TYPE_NAME(FSEv05_TYPE_NAME1194,45232
static U32 FSEv05_tableStep(U32 tableSize) { return (tableSize>>1) + (tableSize>>3) + 3; }FSEv05_tableStep1198,45305
FSEv05_DTable* FSEv05_createDTable (unsigned tableLog)FSEv05_createDTable1202,45399
void FSEv05_freeDTable (FSEv05_DTable* dt)FSEv05_freeDTable1208,45635
size_t FSEv05_buildDTable(FSEv05_DTable* dt, const short* normalizedCounter, unsigned maxSymbolValue, unsigned tableLog)FSEv05_buildDTable1213,45697
unsigned FSEv05_isError(size_t code) { return ERR_isError(code); }FSEv05_isError1275,48296
const char* FSEv05_getErrorName(size_t code) { return ERR_getErrorName(code); }FSEv05_getErrorName1277,48364
static short FSEv05_abs(short a) { return a<0 ? -a : a; }FSEv05_abs1283,48613
size_t FSEv05_readNCount (short* normalizedCounter, unsigned* maxSVPtr, unsigned* tableLogPtr,FSEv05_readNCount1286,48673
size_t FSEv05_buildDTable_rle (FSEv05_DTable* dt, BYTE symbolValue)FSEv05_buildDTable_rle1384,51927
size_t FSEv05_buildDTable_raw (FSEv05_DTable* dt, unsigned nbBits)FSEv05_buildDTable_raw1402,52321
FORCE_INLINE size_t FSEv05_decompress_usingDTable_generic(FSEv05_decompress_usingDTable_generic1428,53072
#define FSEv05_GETSYMBOL(FSEv05_GETSYMBOL1450,53766
size_t FSEv05_decompress_usingDTable(void* dst, size_t originalSize,FSEv05_decompress_usingDTable1496,55561
size_t FSEv05_decompress(void* dst, size_t maxDstSize, const void* cSrc, size_t cSrcSize)FSEv05_decompress1510,56131
#define HUFF0_HHUFF0_H1573,59037
#define HUF0_STATIC_HHUF0_STATIC_H1646,62063
#define HUFv05_DTABLE_SIZE(HUFv05_DTABLE_SIZE1658,62286
#define HUFv05_CREATE_STATIC_DTABLEX2(HUFv05_CREATE_STATIC_DTABLEX21659,62351
#define HUFv05_CREATE_STATIC_DTABLEX4(HUFv05_CREATE_STATIC_DTABLEX41661,62493
#define HUFv05_CREATE_STATIC_DTABLEX6(HUFv05_CREATE_STATIC_DTABLEX61663,62633
#  define inline inline1745,66694
#  define inline inline1747,66726
#define HUFv05_ABSOLUTEMAX_TABLELOG HUFv05_ABSOLUTEMAX_TABLELOG1767,67350
#define HUFv05_MAX_TABLELOG HUFv05_MAX_TABLELOG1768,67475
#define HUFv05_DEFAULT_TABLELOG HUFv05_DEFAULT_TABLELOG1769,67622
#define HUFv05_MAX_SYMBOL_VALUE HUFv05_MAX_SYMBOL_VALUE1770,67723
unsigned HUFv05_isError(size_t code) { return ERR_isError(code); }HUFv05_isError1779,68022
const char* HUFv05_getErrorName(size_t code) { return ERR_getErrorName(code); }HUFv05_getErrorName1780,68089
#define HUFv05_STATIC_ASSERT(HUFv05_STATIC_ASSERT1781,68169
typedef struct { BYTE byte; BYTE nbBits; } HUFv05_DEltX2;   /* single-symbol decoding */byte1787,68459
typedef struct { BYTE byte; BYTE nbBits; } HUFv05_DEltX2;   /* single-symbol decoding */nbBits1787,68459
typedef struct { BYTE byte; BYTE nbBits; } HUFv05_DEltX2;   /* single-symbol decoding */HUFv05_DEltX21787,68459
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUFv05_DEltX4;  /* double-symbols decoding */sequence1789,68549
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUFv05_DEltX4;  /* double-symbols decoding */nbBits1789,68549
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUFv05_DEltX4;  /* double-symbols decoding */length1789,68549
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUFv05_DEltX4;  /* double-symbols decoding */HUFv05_DEltX41789,68549
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;symbol1791,68655
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;weight1791,68655
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;sortedSymbol_t1791,68655
static size_t HUFv05_readStats(BYTE* huffWeight, size_t hwSize, U32* rankStats,HUFv05_readStats1798,68872
size_t HUFv05_readDTableX2 (U16* DTable, const void* src, size_t srcSize)HUFv05_readDTableX21873,71799
static BYTE HUFv05_decodeSymbolX2(BITv05_DStream_t* Dstream, const HUFv05_DEltX2* dt, const U32 dtLog)HUFv05_decodeSymbolX21918,73433
#define HUFv05_DECODE_SYMBOLX2_0(HUFv05_DECODE_SYMBOLX2_01926,73734
#define HUFv05_DECODE_SYMBOLX2_1(HUFv05_DECODE_SYMBOLX2_11929,73845
#define HUFv05_DECODE_SYMBOLX2_2(HUFv05_DECODE_SYMBOLX2_21933,74001
static inline size_t HUFv05_decodeStreamX2(BYTE* p, BITv05_DStream_t* const bitDPtr, BYTE* const pEnd, const HUFv05_DEltX2* const dt, const U32 dtLog)HUFv05_decodeStreamX21937,74128
size_t HUFv05_decompress1X2_usingDTable(HUFv05_decompress1X2_usingDTable1960,74961
size_t HUFv05_decompress1X2 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv05_decompress1X21984,75691
size_t HUFv05_decompress4X2_usingDTable(HUFv05_decompress4X2_usingDTable2000,76222
size_t HUFv05_decompress4X2 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv05_decompress4X22094,80516
static void HUFv05_fillDTableX4Level2(HUFv05_DEltX4* DTable, U32 sizeLog, const U32 consumed,HUFv05_fillDTableX4Level22114,81138
typedef U32 rankVal_t[HUFv05_ABSOLUTEMAX_TABLELOG][HUFv05_ABSOLUTEMAX_TABLELOG + 1];rankVal_t2155,82616
static void HUFv05_fillDTableX4(HUFv05_DEltX4* DTable, const U32 targetLog,HUFv05_fillDTableX42157,82702
size_t HUFv05_readDTableX4 (unsigned* DTable, const void* src, size_t srcSize)HUFv05_readDTableX42201,84490
static U32 HUFv05_decodeSymbolX4(void* op, BITv05_DStream_t* DStream, const HUFv05_DEltX4* dt, const U32 dtLog)HUFv05_decodeSymbolX42279,87362
static U32 HUFv05_decodeLastSymbolX4(void* op, BITv05_DStream_t* DStream, const HUFv05_DEltX4* dt, const U32 dtLog)HUFv05_decodeLastSymbolX42287,87665
#define HUFv05_DECODE_SYMBOLX4_0(HUFv05_DECODE_SYMBOLX4_02302,88398
#define HUFv05_DECODE_SYMBOLX4_1(HUFv05_DECODE_SYMBOLX4_12305,88512
#define HUFv05_DECODE_SYMBOLX4_2(HUFv05_DECODE_SYMBOLX4_22309,88683
static inline size_t HUFv05_decodeStreamX4(BYTE* p, BITv05_DStream_t* bitDPtr, BYTE* const pEnd, const HUFv05_DEltX4* const dt, const U32 dtLog)HUFv05_decodeStreamX42313,88825
size_t HUFv05_decompress1X4_usingDTable(HUFv05_decompress1X4_usingDTable2339,89717
size_t HUFv05_decompress1X4 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv05_decompress1X42368,90555
size_t HUFv05_decompress4X4_usingDTable(HUFv05_decompress4X4_usingDTable2382,91046
size_t HUFv05_decompress4X4 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv05_decompress4X42477,95331
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;tableTime2496,95935
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;decode256Time2496,95935
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;algo_time_t2496,95935
static const algo_time_t algoTime[16 /* Quantization */][3 /* single, double, quad */] =algoTime2497,96001
typedef size_t (*decompressionAlgo)(void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize);decompressionAlgo2518,97155
size_t HUFv05_decompress (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv05_decompress2520,97255
#  define ZSTDv05_HEAPMODE ZSTDv05_HEAPMODE2590,100645
    blockType_t blockType;blockType2617,101498
    U32 origSize;origSize2618,101525
} blockProperties_t;blockProperties_t2619,101543
static void ZSTDv05_copy4(void* dst, const void* src) { memcpy(dst, src, 4); }ZSTDv05_copy42625,101706
unsigned ZSTDv05_isError(size_t code) { return ERR_isError(code); }ZSTDv05_isError2633,101961
const char* ZSTDv05_getErrorName(size_t code) { return ERR_getErrorName(code); }ZSTDv05_getErrorName2638,102117
typedef enum { ZSTDv05ds_getFrameHeaderSize, ZSTDv05ds_decodeFrameHeader,ZSTDv05ds_getFrameHeaderSize2644,102353
typedef enum { ZSTDv05ds_getFrameHeaderSize, ZSTDv05ds_decodeFrameHeader,ZSTDv05ds_decodeFrameHeader2644,102353
               ZSTDv05ds_decodeBlockHeader, ZSTDv05ds_decompressBlock } ZSTDv05_dStage;ZSTDv05ds_decodeBlockHeader2645,102427
               ZSTDv05ds_decodeBlockHeader, ZSTDv05ds_decompressBlock } ZSTDv05_dStage;ZSTDv05ds_decompressBlock2645,102427
               ZSTDv05ds_decodeBlockHeader, ZSTDv05ds_decompressBlock } ZSTDv05_dStage;ZSTDv05_dStage2645,102427
struct ZSTDv05_DCtx_sZSTDv05_DCtx_s2647,102516
    FSEv05_DTable LLTable[FSEv05_DTABLE_SIZE_U32(LLFSEv05Log)];LLTable2649,102540
    FSEv05_DTable OffTable[FSEv05_DTABLE_SIZE_U32(OffFSEv05Log)];OffTable2650,102604
    FSEv05_DTable MLTable[FSEv05_DTABLE_SIZE_U32(MLFSEv05Log)];MLTable2651,102670
    unsigned   hufTableX4[HUFv05_DTABLE_SIZE(HufLog)];hufTableX42652,102734
    const void* previousDstEnd;previousDstEnd2653,102789
    const void* base;base2654,102821
    const void* vBase;vBase2655,102843
    const void* dictEnd;dictEnd2656,102866
    size_t expected;expected2657,102891
    size_t headerSize;headerSize2658,102912
    ZSTDv05_parameters params;params2659,102935
    blockType_t bType;   /* used in ZSTDv05_decompressContinue(), to transfer blockType between header decoding and block decoding stages */bType2660,102966
    ZSTDv05_dStage stage;stage2661,103107
    U32 flagStaticTables;flagStaticTables2662,103133
    const BYTE* litPtr;litPtr2663,103159
    size_t litSize;litSize2664,103183
    BYTE litBuffer[BLOCKSIZE + WILDCOPY_OVERLENGTH];litBuffer2665,103203
    BYTE headerBuffer[ZSTDv05_frameHeaderSize_max];headerBuffer2666,103256
size_t ZSTDv05_sizeofDCtx (void) { return sizeof(ZSTDv05_DCtx); }ZSTDv05_sizeofDCtx2670,103427
size_t ZSTDv05_decompressBegin(ZSTDv05_DCtx* dctx)ZSTDv05_decompressBegin2672,103494
ZSTDv05_DCtx* ZSTDv05_createDCtx(void)ZSTDv05_createDCtx2685,103834
size_t ZSTDv05_freeDCtx(ZSTDv05_DCtx* dctx)ZSTDv05_freeDCtx2693,104033
void ZSTDv05_copyDCtx(ZSTDv05_DCtx* dstDCtx, const ZSTDv05_DCtx* srcDCtx)ZSTDv05_copyDCtx2699,104169
static size_t ZSTDv05_decodeFrameHeader_Part1(ZSTDv05_DCtx* zc, const void* src, size_t srcSize)ZSTDv05_decodeFrameHeader_Part12795,107389
size_t ZSTDv05_getFrameParams(ZSTDv05_parameters* params, const void* src, size_t srcSize)ZSTDv05_getFrameParams2807,107786
static size_t ZSTDv05_decodeFrameHeader_Part2(ZSTDv05_DCtx* zc, const void* src, size_t srcSize)ZSTDv05_decodeFrameHeader_Part22823,108576
static size_t ZSTDv05_getcBlockSize(const void* src, size_t srcSize, blockProperties_t* bpPtr)ZSTDv05_getcBlockSize2834,108952
static size_t ZSTDv05_copyRawBlock(void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTDv05_copyRawBlock2855,109508
static size_t ZSTDv05_decodeLiteralsBlock(ZSTDv05_DCtx* dctx,ZSTDv05_decodeLiteralsBlock2866,109868
static size_t ZSTDv05_decodeSeqHeaders(int* nbSeq, const BYTE** dumpsPtr, size_t* dumpsLengthPtr,ZSTDv05_decodeSeqHeaders3001,115559
    size_t litLength;litLength3128,120168
    size_t matchLength;matchLength3129,120190
    size_t offset;offset3130,120214
} seq_t;seq_t3131,120233
    BITv05_DStream_t DStream;DStream3134,120260
    FSEv05_DState_t stateLL;stateLL3135,120290
    FSEv05_DState_t stateOffb;stateOffb3136,120319
    FSEv05_DState_t stateML;stateML3137,120350
    size_t prevOffset;prevOffset3138,120379
    const BYTE* dumps;dumps3139,120402
    const BYTE* dumpsEnd;dumpsEnd3140,120425
} seqState_t;seqState_t3141,120451
static void ZSTDv05_decodeSequence(seq_t* seq, seqState_t* seqState)ZSTDv05_decodeSequence3145,120468
static size_t ZSTDv05_execSequence(BYTE* op,ZSTDv05_execSequence3227,123601
static size_t ZSTDv05_decompressSequences(ZSTDv05_decompressSequences3306,126738
static void ZSTDv05_checkContinuity(ZSTDv05_DCtx* dctx, const void* dst)ZSTDv05_checkContinuity3379,129594
static size_t ZSTDv05_decompressBlock_internal(ZSTDv05_DCtx* dctx,ZSTDv05_decompressBlock_internal3390,129957
size_t ZSTDv05_decompressBlock(ZSTDv05_DCtx* dctx,ZSTDv05_decompressBlock3409,130577
static size_t ZSTDv05_decompress_continueDCtx(ZSTDv05_DCtx* dctx,ZSTDv05_decompress_continueDCtx3420,130955
size_t ZSTDv05_decompress_usingPreparedDCtx(ZSTDv05_DCtx* dctx, const ZSTDv05_DCtx* refDCtx,ZSTDv05_decompress_usingPreparedDCtx3485,133366
size_t ZSTDv05_decompress_usingDict(ZSTDv05_DCtx* dctx,ZSTDv05_decompress_usingDict3495,133762
size_t ZSTDv05_decompressDCtx(ZSTDv05_DCtx* dctx, void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTDv05_decompressDCtx3506,134203
size_t ZSTDv05_decompress(void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTDv05_decompress3511,134408
static void ZSTD_errorFrameSizeInfoLegacy(size_t* cSize, unsigned long long* dBound, size_t ret)ZSTD_errorFrameSizeInfoLegacy3528,135002
void ZSTDv05_findFrameSizeInfoLegacy(const void *src, size_t srcSize, size_t* cSize, unsigned long long* dBound)ZSTDv05_findFrameSizeInfoLegacy3534,135160
size_t ZSTDv05_nextSrcSizeToDecompress(ZSTDv05_DCtx* dctx)ZSTDv05_nextSrcSizeToDecompress3582,136661
size_t ZSTDv05_decompressContinue(ZSTDv05_DCtx* dctx, void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTDv05_decompressContinue3587,136752
static void ZSTDv05_refDictContent(ZSTDv05_DCtx* dctx, const void* dict, size_t dictSize)ZSTDv05_refDictContent3662,139743
static size_t ZSTDv05_loadEntropy(ZSTDv05_DCtx* dctx, const void* dict, size_t dictSize)ZSTDv05_loadEntropy3670,140065
static size_t ZSTDv05_decompress_insertDictionary(ZSTDv05_DCtx* dctx, const void* dict, size_t dictSize)ZSTDv05_decompress_insertDictionary3711,142331
size_t ZSTDv05_decompressBegin_usingDict(ZSTDv05_DCtx* dctx, const void* dict, size_t dictSize)ZSTDv05_decompressBegin_usingDict3735,143017
static size_t ZBUFFv05_blockHeaderSize = 3;ZBUFFv05_blockHeaderSize3791,145453
static size_t ZBUFFv05_limitCopy(void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZBUFFv05_limitCopy3797,145527
typedef enum { ZBUFFv05ds_init, ZBUFFv05ds_readHeader, ZBUFFv05ds_loadHeader, ZBUFFv05ds_decodeHeader,ZBUFFv05ds_init3831,147239
typedef enum { ZBUFFv05ds_init, ZBUFFv05ds_readHeader, ZBUFFv05ds_loadHeader, ZBUFFv05ds_decodeHeader,ZBUFFv05ds_readHeader3831,147239
typedef enum { ZBUFFv05ds_init, ZBUFFv05ds_readHeader, ZBUFFv05ds_loadHeader, ZBUFFv05ds_decodeHeader,ZBUFFv05ds_loadHeader3831,147239
typedef enum { ZBUFFv05ds_init, ZBUFFv05ds_readHeader, ZBUFFv05ds_loadHeader, ZBUFFv05ds_decodeHeader,ZBUFFv05ds_decodeHeader3831,147239
               ZBUFFv05ds_read, ZBUFFv05ds_load, ZBUFFv05ds_flush } ZBUFFv05_dStage;ZBUFFv05ds_read3832,147342
               ZBUFFv05ds_read, ZBUFFv05ds_load, ZBUFFv05ds_flush } ZBUFFv05_dStage;ZBUFFv05ds_load3832,147342
               ZBUFFv05ds_read, ZBUFFv05ds_load, ZBUFFv05ds_flush } ZBUFFv05_dStage;ZBUFFv05ds_flush3832,147342
               ZBUFFv05ds_read, ZBUFFv05ds_load, ZBUFFv05ds_flush } ZBUFFv05_dStage;ZBUFFv05_dStage3832,147342
#define ZSTDv05_frameHeaderSize_max ZSTDv05_frameHeaderSize_max3836,147463
struct ZBUFFv05_DCtx_s {ZBUFFv05_DCtx_s3837,147549
    ZSTDv05_DCtx* zc;zc3838,147574
    ZSTDv05_parameters params;params3839,147596
    char* inBuff;inBuff3840,147627
    size_t inBuffSize;inBuffSize3841,147645
    size_t inPos;inPos3842,147668
    char* outBuff;outBuff3843,147686
    size_t outBuffSize;outBuffSize3844,147705
    size_t outStart;outStart3845,147729
    size_t outEnd;outEnd3846,147750
    size_t hPos;hPos3847,147769
    ZBUFFv05_dStage stage;stage3848,147786
    unsigned char headerBuffer[ZSTDv05_frameHeaderSize_max];headerBuffer3849,147813
ZBUFFv05_DCtx* ZBUFFv05_createDCtx(void)ZBUFFv05_createDCtx3853,147939
size_t ZBUFFv05_freeDCtx(ZBUFFv05_DCtx* zbc)ZBUFFv05_freeDCtx3863,148209
size_t ZBUFFv05_decompressInitDictionary(ZBUFFv05_DCtx* zbc, const void* dict, size_t dictSize)ZBUFFv05_decompressInitDictionary3876,148455
size_t ZBUFFv05_decompressInit(ZBUFFv05_DCtx* zbc)ZBUFFv05_decompressInit3883,148729
size_t ZBUFFv05_decompressContinue(ZBUFFv05_DCtx* zbc, void* dst, size_t* maxDstSizePtr, const void* src, size_t* srcSizePtr)ZBUFFv05_decompressContinue3891,148875
unsigned ZBUFFv05_isError(size_t errorCode) { return ERR_isError(errorCode); }ZBUFFv05_isError4050,156228
const char* ZBUFFv05_getErrorName(size_t errorCode) { return ERR_getErrorName(errorCode); }ZBUFFv05_getErrorName4051,156307
size_t ZBUFFv05_recommendedDInSize(void)  { return BLOCKSIZE + ZBUFFv05_blockHeaderSize /* block header size*/ ; }ZBUFFv05_recommendedDInSize4053,156400
size_t ZBUFFv05_recommendedDOutSize(void) { return BLOCKSIZE; }ZBUFFv05_recommendedDOutSize4054,156515

zdict.h,4858
#define DICTBUILDER_H_001DICTBUILDER_H_00112,412
#    define ZDICTLIB_VISIBILITY ZDICTLIB_VISIBILITY26,699
#    define ZDICTLIB_VISIBILITYZDICTLIB_VISIBILITY28,780
#  define ZDICTLIB_API ZDICTLIB_API32,881
#  define ZDICTLIB_API ZDICTLIB_API34,1001
#  define ZDICTLIB_API ZDICTLIB_API36,1197
    int      compressionLevel;   /*< optimize for a specific zstd compression level; 0 means default */compressionLevel65,3010
    unsigned notificationLevel;  /*< Write log to stderr; 0 = none (default); 1 = errors; 2 = progression; 3 = details; 4 = debug; */notificationLevel66,3114
    unsigned dictID;             /*< force dictID value; 0 means auto mode (32-bits random value) */dictID67,3248
} ZDICT_params_t;ZDICT_params_t68,3349
#define ZDICT_CONTENTSIZE_MIN ZDICT_CONTENTSIZE_MIN129,6536
#define ZDICT_DICTSIZE_MIN ZDICT_DICTSIZE_MIN130,6570
    unsigned k;                  /* Segment size : constraint: 0 < k : Reasonable range [16, 2048+] */k137,6737
    unsigned d;                  /* dmer size : constraint: 0 < d <= k : Reasonable range [6, 16] */d138,6840
    unsigned steps;              /* Number of steps : Only used for optimization : 0 means default (40) : Higher means more parameters checked */steps139,6941
    unsigned nbThreads;          /* Number of threads : constraint: 0 < nbThreads : 1 means single-threaded : Only used for optimization : Ignored if ZSTD_MULTITHREAD is not defined */nbThreads140,7087
    double splitPoint;           /* Percentage of samples used for training: Only used for optimization : the first nbSamples * splitPoint samples will be used to training, the last nbSamples * (1 - splitPoint) samples will be used for testing, 0 means default (1.0), 1.0 when all samples are used for both training and testing */splitPoint141,7272
    unsigned shrinkDict;         /* Train dictionaries to shrink in size starting from the minimum size and selects the smallest dictionary that is shrinkDictMaxRegression% worse than the largest dictionary. 0 means no shrinking and 1 means shrinking  */shrinkDict142,7603
    unsigned shrinkDictMaxRegression; /* Sets shrinkDictMaxRegression so that a smaller dictionary can be at worse shrinkDictMaxRegression% worse than the max dict size dictionary. */shrinkDictMaxRegression143,7858
    ZDICT_params_t zParams;zParams144,8042
} ZDICT_cover_params_t;ZDICT_cover_params_t145,8070
    unsigned k;                  /* Segment size : constraint: 0 < k : Reasonable range [16, 2048+] */k148,8112
    unsigned d;                  /* dmer size : constraint: 0 < d <= k : Reasonable range [6, 16] */d149,8215
    unsigned f;                  /* log of size of frequency array : constraint: 0 < f <= 31 : 1 means default(20)*/f150,8316
    unsigned steps;              /* Number of steps : Only used for optimization : 0 means default (40) : Higher means more parameters checked */steps151,8433
    unsigned nbThreads;          /* Number of threads : constraint: 0 < nbThreads : 1 means single-threaded : Only used for optimization : Ignored if ZSTD_MULTITHREAD is not defined */nbThreads152,8579
    double splitPoint;           /* Percentage of samples used for training: Only used for optimization : the first nbSamples * splitPoint samples will be used to training, the last nbSamples * (1 - splitPoint) samples will be used for testing, 0 means default (0.75), 1.0 when all samples are used for both training and testing */splitPoint153,8764
    unsigned accel;              /* Acceleration level: constraint: 0 < accel <= 10, higher means faster and less accurate, 0 means default(1) */accel154,9096
    unsigned shrinkDict;         /* Train dictionaries to shrink in size starting from the minimum size and selects the smallest dictionary that is shrinkDictMaxRegression% worse than the largest dictionary. 0 means no shrinking and 1 means shrinking  */shrinkDict155,9242
    unsigned shrinkDictMaxRegression; /* Sets shrinkDictMaxRegression so that a smaller dictionary can be at worse shrinkDictMaxRegression% worse than the max dict size dictionary. */shrinkDictMaxRegression156,9497
    ZDICT_params_t zParams;zParams158,9682
} ZDICT_fastCover_params_t;ZDICT_fastCover_params_t159,9710
    unsigned selectivityLevel;   /* 0 means default; larger => select more => larger dictionary */selectivityLevel247,15337
    ZDICT_params_t zParams;zParams248,15436
} ZDICT_legacy_params_t;ZDICT_legacy_params_t249,15464
#  define ZDICT_DEPRECATED(ZDICT_DEPRECATED277,17181
#  define ZDICT_GCC_VERSION ZDICT_GCC_VERSION279,17273
#    define ZDICT_DEPRECATED(ZDICT_DEPRECATED281,17413
#    define ZDICT_DEPRECATED(ZDICT_DEPRECATED283,17545
#    define ZDICT_DEPRECATED(ZDICT_DEPRECATED285,17668
#    define ZDICT_DEPRECATED(ZDICT_DEPRECATED287,17773
#    define ZDICT_DEPRECATED(ZDICT_DEPRECATED290,17953

zstd_v03.h,185
#define ZSTD_V03_H_298734209782ZSTD_V03_H_29873420978212,418
typedef struct ZSTDv03_Dctx_s ZSTDv03_Dctx;ZSTDv03_Dctx60,2412
#define ZSTDv03_magicNumber ZSTDv03_magicNumber86,3598

compiler.h,2543
#define ZSTD_COMPILER_HZSTD_COMPILER_H12,410
#  define INLINE_KEYWORD INLINE_KEYWORD21,775
#  define INLINE_KEYWORDINLINE_KEYWORD23,813
#  define FORCE_INLINE_ATTR FORCE_INLINE_ATTR27,891
#  define FORCE_INLINE_ATTR FORCE_INLINE_ATTR29,974
#  define FORCE_INLINE_ATTRFORCE_INLINE_ATTR31,1022
#define INLINE_KEYWORDINLINE_KEYWORD36,1065
#define FORCE_INLINE_ATTRFORCE_INLINE_ATTR37,1088
#  define WIN_CDECL WIN_CDECL47,1389
#  define WIN_CDECLWIN_CDECL49,1423
#define FORCE_INLINE_TEMPLATE FORCE_INLINE_TEMPLATE57,1629
#  define HINT_INLINE HINT_INLINE70,2163
#  define HINT_INLINE HINT_INLINE72,2213
#  define UNUSED_ATTR UNUSED_ATTR77,2380
#  define UNUSED_ATTRUNUSED_ATTR79,2432
#  define FORCE_NOINLINE FORCE_NOINLINE84,2502
#    define FORCE_NOINLINE FORCE_NOINLINE87,2608
#    define FORCE_NOINLINE FORCE_NOINLINE89,2680
  #define __has_attribute(__has_attribute95,2778
#  define TARGET_ATTRIBUTE(TARGET_ATTRIBUTE98,2908
#  define TARGET_ATTRIBUTE(TARGET_ATTRIBUTE100,2985
  #  define DYNAMIC_BMI2 DYNAMIC_BMI2112,3425
  #  define DYNAMIC_BMI2 DYNAMIC_BMI2114,3460
#  define PREFETCH_L1(PREFETCH_L1121,3601
#  define PREFETCH_L2(PREFETCH_L2122,3657
#    define PREFETCH_L1(PREFETCH_L1126,3937
#    define PREFETCH_L2(PREFETCH_L2127,4013
#    define PREFETCH_L1(PREFETCH_L1129,4186
#    define PREFETCH_L2(PREFETCH_L2130,4278
#    define PREFETCH_L1(PREFETCH_L1132,4399
#    define PREFETCH_L2(PREFETCH_L2133,4486
#    define PREFETCH_L1(PREFETCH_L1135,4581
#    define PREFETCH_L2(PREFETCH_L2136,4638
#define CACHELINE_SIZE CACHELINE_SIZE140,4731
#define PREFETCH_AREA(PREFETCH_AREA142,4758
#    define DONT_VECTORIZE DONT_VECTORIZE155,5317
#    define DONT_VECTORIZE DONT_VECTORIZE157,5399
#  define DONT_VECTORIZEDONT_VECTORIZE160,5488
#define LIKELY(LIKELY169,5785
#define UNLIKELY(UNLIKELY170,5830
#define LIKELY(LIKELY172,5883
#define UNLIKELY(UNLIKELY173,5905
#       define STATIC_BMI2 STATIC_BMI2190,6793
    #define STATIC_BMI2 STATIC_BMI2196,6870
#  define __has_builtin(__has_builtin201,6965
#  define __has_feature(__has_feature206,7063
#    define ZSTD_MEMORY_SANITIZER ZSTD_MEMORY_SANITIZER212,7223
#    define ZSTD_MEMORY_SANITIZER ZSTD_MEMORY_SANITIZER214,7267
#define ZSTD_DEPS_NEED_STDINTZSTD_DEPS_NEED_STDINT223,7568
#    define ZSTD_ADDRESS_SANITIZER ZSTD_ADDRESS_SANITIZER242,8353
#    define ZSTD_ADDRESS_SANITIZER ZSTD_ADDRESS_SANITIZER244,8428
#    define ZSTD_ADDRESS_SANITIZER ZSTD_ADDRESS_SANITIZER246,8473

zstd_v07.h,655
#define ZSTDv07_H_235446ZSTDv07_H_23544612,411
#  define ZSTDLIBv07_API ZSTDLIBv07_API28,761
#  define ZSTDLIBv07_APIZSTDLIBv07_API30,814
typedef struct ZSTDv07_DCtx_s ZSTDv07_DCtx;ZSTDv07_DCtx74,3121
typedef struct ZSTDv07_DDict_s ZSTDv07_DDict;ZSTDv07_DDict102,4501
    unsigned long long frameContentSize;frameContentSize115,5233
    unsigned windowSize;windowSize116,5274
    unsigned dictID;dictID117,5299
    unsigned checksumFlag;checksumFlag118,5320
} ZSTDv07_frameParams;ZSTDv07_frameParams119,5347
typedef struct ZBUFFv07_DCtx_s ZBUFFv07_DCtx;ZBUFFv07_DCtx129,5624
#define ZSTDv07_MAGICNUMBER ZSTDv07_MAGICNUMBER180,8590

zstd_v01.c,17621
#define FSE_DTABLE_SIZE_U32(FSE_DTABLE_SIZE_U3224,787
#define HUF_DTABLE_SIZE_U16(HUF_DTABLE_SIZE_U1627,964
#define HUF_CREATE_STATIC_DTABLE(HUF_CREATE_STATIC_DTABLE28,1030
#define FSE_LIST_ERRORS(FSE_LIST_ERRORS35,1278
#define FSE_GENERATE_ENUM(FSE_GENERATE_ENUM42,1639
typedef enum { FSE_LIST_ERRORS(FSE_GENERATE_ENUM) } FSE_errorCodes;  /* enum is exposed, to detect & handle specific errors; compare function result to -enum value */FSE_LIST_ERRORS43,1677
typedef enum { FSE_LIST_ERRORS(FSE_GENERATE_ENUM) } FSE_errorCodes;  /* enum is exposed, to detect & handle specific errors; compare function result to -enum value */FSE_errorCodes43,1677
typedef unsigned FSE_CTable;   /* don't allocate that. It's just a way to be more restrictive than void* */FSE_CTable57,2371
typedef unsigned FSE_DTable;   /* don't allocate that. It's just a way to be more restrictive than void* */FSE_DTable58,2479
    size_t bitContainer;bitContainer62,2605
    int    bitPos;bitPos63,2630
    char*  startPtr;startPtr64,2649
    char*  ptr;ptr65,2670
    char*  endPtr;endPtr66,2686
} FSE_CStream_t;FSE_CStream_t67,2705
    ptrdiff_t   value;value71,2740
    const void* stateTable;stateTable72,2763
    const void* symbolTT;symbolTT73,2791
    unsigned    stateLog;stateLog74,2817
} FSE_CState_t;FSE_CState_t75,2843
    size_t   bitContainer;bitContainer79,2877
    unsigned bitsConsumed;bitsConsumed80,2904
    const char* ptr;ptr81,2931
    const char* start;start82,2952
} FSE_DStream_t;FSE_DStream_t83,2975
    size_t      state;state87,3010
    const void* table;   /* precise table may vary, depending on U16 */table88,3033
} FSE_DState_t;FSE_DState_t89,3105
typedef enum { FSE_DStream_unfinished = 0,FSE_DStream_unfinished91,3122
               FSE_DStream_endOfBuffer = 1,FSE_DStream_endOfBuffer92,3165
               FSE_DStream_completed = 2,FSE_DStream_completed93,3209
               FSE_DStream_tooFar = 3 } FSE_DStream_status;  /* result of FSE_reloadDStream() */FSE_DStream_tooFar94,3251
               FSE_DStream_tooFar = 3 } FSE_DStream_status;  /* result of FSE_reloadDStream() */FSE_DStream_status94,3251
#define FSE_MAX_MEMORY_USAGE FSE_MAX_MEMORY_USAGE106,3938
#define FSE_DEFAULT_MEMORY_USAGE FSE_DEFAULT_MEMORY_USAGE107,3970
#define FSE_MAX_SYMBOL_VALUE FSE_MAX_SYMBOL_VALUE112,4112
#define FSE_FUNCTION_TYPE FSE_FUNCTION_TYPE118,4315
#define FSE_FUNCTION_EXTENSIONFSE_FUNCTION_EXTENSION119,4346
    unsigned short newState;newState127,4548
    unsigned char  symbol;symbol128,4577
    unsigned char  nbBits;nbBits129,4604
} FSE_decode_t;   /* size == U32 */FSE_decode_t130,4631
#  define FORCE_INLINE FORCE_INLINE138,4863
#  define GCC_VERSION GCC_VERSION143,5155
#      define FORCE_INLINE FORCE_INLINE146,5332
#      define FORCE_INLINE FORCE_INLINE148,5414
#    define FORCE_INLINE FORCE_INLINE151,5474
#define MEM_ACCESS_MODULEMEM_ACCESS_MODULE165,5859
typedef  uint8_t BYTE;BYTE171,6128
typedef uint16_t U16;U16172,6151
typedef  int16_t S16;S16173,6173
typedef uint32_t U32;U32174,6195
typedef  int32_t S32;S32175,6217
typedef uint64_t U64;U64176,6239
typedef  int64_t S64;S64177,6261
typedef unsigned char       BYTE;BYTE179,6289
typedef unsigned short      U16;U16180,6323
typedef   signed short      S16;S16181,6356
typedef unsigned int        U32;U32182,6389
typedef   signed int        S32;S32183,6422
typedef unsigned long long  U64;U64184,6455
typedef   signed long long  S64;S64185,6488
#    define FSE_FORCE_MEMORY_ACCESS FSE_FORCE_MEMORY_ACCESS208,8006
#    define FSE_FORCE_MEMORY_ACCESS FSE_FORCE_MEMORY_ACCESS211,8269
static unsigned FSE_32bits(void)FSE_32bits216,8325
static unsigned FSE_isLittleEndian(void)FSE_isLittleEndian221,8392
static U16 FSE_read16(const void* memPtr) { return *(const U16*) memPtr; }FSE_read16229,8632
static U32 FSE_read32(const void* memPtr) { return *(const U32*) memPtr; }FSE_read32230,8707
static U64 FSE_read64(const void* memPtr) { return *(const U64*) memPtr; }FSE_read64231,8782
typedef union { U16 u16; U32 u32; U64 u64; } __attribute__((packed)) unalign;u16237,9084
typedef union { U16 u16; U32 u32; U64 u64; } __attribute__((packed)) unalign;u32237,9084
typedef union { U16 u16; U32 u32; U64 u64; } __attribute__((packed)) unalign;u64237,9084
typedef union { U16 u16; U32 u32; U64 u64; } __attribute__((packed)) unalign;unalign237,9084
static U16 FSE_read16(const void* ptr) { return ((const unalign*)ptr)->u16; }FSE_read16239,9163
static U32 FSE_read32(const void* ptr) { return ((const unalign*)ptr)->u32; }FSE_read32240,9241
static U64 FSE_read64(const void* ptr) { return ((const unalign*)ptr)->u64; }FSE_read64241,9319
static U16 FSE_read16(const void* memPtr)FSE_read16245,9405
static U32 FSE_read32(const void* memPtr)FSE_read32250,9512
static U64 FSE_read64(const void* memPtr)FSE_read64255,9619
static U16 FSE_readLE16(const void* memPtr)FSE_readLE16262,9764
static U32 FSE_readLE32(const void* memPtr)FSE_readLE32273,9984
static U64 FSE_readLE64(const void* memPtr)FSE_readLE64285,10251
static size_t FSE_readLEST(const void* memPtr)FSE_readLEST297,10610
#define FSE_MAX_TABLELOG FSE_MAX_TABLELOG310,10931
#define FSE_MAX_TABLESIZE FSE_MAX_TABLESIZE311,10982
#define FSE_MAXTABLESIZE_MASK FSE_MAXTABLESIZE_MASK312,11031
#define FSE_DEFAULT_TABLELOG FSE_DEFAULT_TABLELOG313,11083
#define FSE_MIN_TABLELOG FSE_MIN_TABLELOG314,11141
#define FSE_TABLELOG_ABSOLUTE_MAX FSE_TABLELOG_ABSOLUTE_MAX316,11169
#define FSE_STATIC_ASSERT(FSE_STATIC_ASSERT325,11487
    int deltaFindState;deltaFindState333,11780
    U32 deltaNbBits;deltaNbBits334,11804
} FSE_symbolCompressionTransform; /* total 8 bytes */FSE_symbolCompressionTransform335,11825
typedef U32 DTable_max_t[FSE_DTABLE_SIZE_U32(FSE_MAX_TABLELOG)];DTable_max_t337,11880
FORCE_INLINE unsigned FSE_highbit32 (U32 val)FSE_highbit32342,12100
#define FSE_CAT(FSE_CAT383,13295
#define FSE_FUNCTION_NAME(FSE_FUNCTION_NAME384,13321
#define FSE_TYPE_NAME(FSE_TYPE_NAME385,13365
static U32 FSE_tableStep(U32 tableSize) { return (tableSize>>1) + (tableSize>>3) + 3; }FSE_tableStep389,13408
#define FSE_DECODE_TYPE FSE_DECODE_TYPE391,13497
    U16 tableLog;tableLog395,13553
    U16 fastMode;fastMode396,13571
} FSE_DTableHeader;   /* sizeof U32 */FSE_DTableHeader397,13589
static size_t FSE_buildDTableFSE_buildDTable399,13629
static unsigned FSE_isError(size_t code) { return (code > (size_t)(-FSE_ERROR_maxCode)); }FSE_isError471,16078
static short FSE_abs(short a)FSE_abs473,16170
static size_t FSE_readNCount (short* normalizedCounter, unsigned* maxSVPtr, unsigned* tableLogPtr,FSE_readNCount482,16393
static size_t FSE_buildDTable_rle (FSE_DTable* dt, BYTE symbolValue)FSE_buildDTable_rle598,19973
static size_t FSE_buildDTable_raw (FSE_DTable* dt, unsigned nbBits)FSE_buildDTable_raw615,20367
static size_t FSE_initDStream(FSE_DStream_t* bitD, const void* srcBuffer, size_t srcSize)FSE_initDStream648,21384
static size_t FSE_lookBits(FSE_DStream_t* bitD, U32 nbBits)FSE_lookBits701,23605
static size_t FSE_lookBitsFast(FSE_DStream_t* bitD, U32 nbBits)   /* only if nbBits >= 1 !! */FSE_lookBitsFast707,23834
static void FSE_skipBits(FSE_DStream_t* bitD, U32 nbBits)FSE_skipBits713,24095
static size_t FSE_readBits(FSE_DStream_t* bitD, U32 nbBits)FSE_readBits726,24427
static size_t FSE_readBitsFast(FSE_DStream_t* bitD, U32 nbBits)   /* only if nbBits >= 1 !! */FSE_readBitsFast733,24589
static unsigned FSE_reloadDStream(FSE_DStream_t* bitD)FSE_reloadDStream740,24790
static void FSE_initDState(FSE_DState_t* DStatePtr, FSE_DStream_t* bitD, const FSE_DTable* dt)FSE_initDState773,25881
static BYTE FSE_decodeSymbol(FSE_DState_t* DStatePtr, FSE_DStream_t* bitD)FSE_decodeSymbol782,26203
static BYTE FSE_decodeSymbolFast(FSE_DState_t* DStatePtr, FSE_DStream_t* bitD)FSE_decodeSymbolFast793,26563
static unsigned FSE_endOfDStream(const FSE_DStream_t* bitD)FSE_endOfDStream807,27007
static unsigned FSE_endOfDState(const FSE_DState_t* DStatePtr)FSE_endOfDState812,27169
FORCE_INLINE size_t FSE_decompress_usingDTable_generic(FSE_decompress_usingDTable_generic818,27272
#define FSE_GETSYMBOL(FSE_GETSYMBOL840,27939
static size_t FSE_decompress_usingDTable(void* dst, size_t originalSize,FSE_decompress_usingDTable888,29669
static size_t FSE_decompress(void* dst, size_t maxDstSize, const void* cSrc, size_t cSrcSize)FSE_decompress901,30242
#define HUF_MAX_SYMBOL_VALUE HUF_MAX_SYMBOL_VALUE932,31505
#define HUF_DEFAULT_TABLELOG HUF_DEFAULT_TABLELOG933,31538
#define HUF_MAX_TABLELOG HUF_MAX_TABLELOG934,31619
#define HUF_ABSOLUTEMAX_TABLELOG HUF_ABSOLUTEMAX_TABLELOG935,31727
typedef struct HUF_CElt_s {HUF_CElt_s940,31947
  U16  val;val941,31975
  BYTE nbBits;nbBits942,31987
} HUF_CElt ;HUF_CElt943,32002
typedef struct nodeElt_s {nodeElt_s945,32016
    U32 count;count946,32043
    U16 parent;parent947,32058
    BYTE byte;byte948,32074
    BYTE nbBits;nbBits949,32089
} nodeElt;nodeElt950,32106
    BYTE byte;byte957,32293
    BYTE nbBits;nbBits958,32308
} HUF_DElt;HUF_DElt959,32325
static size_t HUF_readDTable (U16* DTable, const void* src, size_t srcSize)HUF_readDTable961,32338
static BYTE HUF_decodeSymbol(FSE_DStream_t* Dstream, const HUF_DElt* dt, const U32 dtLog)HUF_decodeSymbol1063,35892
static size_t HUF_decompress_usingDTable(   /* -3% slower when non static */HUF_decompress_usingDTable1071,36174
    #define HUF_DECODE_SYMBOL_0(HUF_DECODE_SYMBOL_01119,38328
    #define HUF_DECODE_SYMBOL_1(HUF_DECODE_SYMBOL_11122,38434
    #define HUF_DECODE_SYMBOL_2(HUF_DECODE_SYMBOL_21126,38625
static size_t HUF_decompress (void* dst, size_t maxDstSize, const void* cSrc, size_t cSrcSize)HUF_decompress1175,40493
#define ZSTD_MEMORY_USAGE ZSTD_MEMORY_USAGE1232,43103
#  define ZSTD_UNALIGNED_ACCESS ZSTD_UNALIGNED_ACCESS1249,43689
#  define ZSTD_UNALIGNED_ACCESS ZSTD_UNALIGNED_ACCESS1251,43729
#define MEM_ACCESS_MODULEMEM_ACCESS_MODULE1278,44561
typedef  uint8_t BYTE;BYTE1288,44888
typedef uint16_t U16;U161289,44911
typedef  int16_t S16;S161290,44933
typedef uint32_t U32;U321291,44955
typedef  int32_t S32;S321292,44977
typedef uint64_t U64;U641293,44999
typedef unsigned char       BYTE;BYTE1295,45027
typedef unsigned short      U16;U161296,45061
typedef   signed short      S16;S161297,45094
typedef unsigned int        U32;U321298,45127
typedef   signed int        S32;S321299,45160
typedef unsigned long long  U64;U641300,45193
static const U32 ZSTD_magicNumber = 0xFD2FB51E;   /* 3rd version : seqNb header */ZSTD_magicNumber1309,45399
#define HASH_LOG HASH_LOG1311,45483
#define HASH_TABLESIZE HASH_TABLESIZE1312,45524
#define HASH_MASK HASH_MASK1313,45563
#define KNUTH KNUTH1315,45603
#define BIT7 BIT71317,45629
#define BIT6 BIT61318,45646
#define BIT5 BIT51319,45663
#define BIT4 BIT41320,45680
#define KB KB1322,45698
#define MB MB1323,45719
#define GB GB1324,45740
#define BLOCKSIZE BLOCKSIZE1326,45762
#define WORKPLACESIZE WORKPLACESIZE1328,45842
#define MINMATCH MINMATCH1329,45878
#define MLbits MLbits1330,45897
#define LLbits LLbits1331,45916
#define Offbits Offbits1332,45935
#define MaxML MaxML1333,45954
#define MaxLL MaxLL1334,45986
#define MaxOff MaxOff1335,46018
#define LitFSELog LitFSELog1336,46050
#define MLFSELog MLFSELog1337,46072
#define LLFSELog LLFSELog1338,46094
#define OffFSELog OffFSELog1339,46116
#define MAX(MAX1340,46138
#define MaxSeq MaxSeq1341,46173
#define LITERAL_NOENTROPY LITERAL_NOENTROPY1343,46207
#define COMMAND_NOENTROPY COMMAND_NOENTROPY1344,46236
#define ZSTD_CONTENTSIZE_ERROR ZSTD_CONTENTSIZE_ERROR1346,46283
static const size_t ZSTD_blockHeaderSize = 3;ZSTD_blockHeaderSize1348,46328
static const size_t ZSTD_frameHeaderSize = 4;ZSTD_frameHeaderSize1349,46374
static unsigned ZSTD_32bits(void) { return sizeof(void*)==4; }ZSTD_32bits1355,46560
static unsigned ZSTD_isLittleEndian(void)ZSTD_isLittleEndian1357,46624
static U16    ZSTD_read16(const void* p) { U16 r; memcpy(&r, p, sizeof(r)); return r; }ZSTD_read161363,46795
static void   ZSTD_copy4(void* dst, const void* src) { memcpy(dst, src, 4); }ZSTD_copy41365,46884
static void   ZSTD_copy8(void* dst, const void* src) { memcpy(dst, src, 8); }ZSTD_copy81367,46963
#define COPY8(COPY81369,47042
static void ZSTD_wildcopy(void* dst, const void* src, ptrdiff_t length)ZSTD_wildcopy1371,47098
static U16 ZSTD_readLE16(const void* memPtr)ZSTD_readLE161379,47314
static U32 ZSTD_readLE24(const void* memPtr)ZSTD_readLE241389,47539
static U32 ZSTD_readBE32(const void* memPtr)ZSTD_readBE321394,47658
typedef struct ZSTD_Cctx_s ZSTD_Cctx;ZSTD_Cctx1404,47938
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_compressed1406,47977
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_raw1406,47977
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_rle1406,47977
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_end1406,47977
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;blockType_t1406,47977
    blockType_t blockType;blockType1410,48063
    U32 origSize;origSize1411,48090
} blockProperties_t;blockProperties_t1412,48108
    void* buffer;buffer1415,48147
    U32*  offsetStart;offsetStart1416,48165
    U32*  offset;offset1417,48188
    BYTE* offCodeStart;offCodeStart1418,48206
    BYTE* offCode;offCode1419,48230
    BYTE* litStart;litStart1420,48249
    BYTE* lit;lit1421,48269
    BYTE* litLengthStart;litLengthStart1422,48284
    BYTE* litLength;litLength1423,48310
    BYTE* matchLengthStart;matchLengthStart1424,48331
    BYTE* matchLength;matchLength1425,48359
    BYTE* dumpsStart;dumpsStart1426,48382
    BYTE* dumps;dumps1427,48404
} seqStore_t;seqStore_t1428,48421
typedef struct ZSTD_Cctx_sZSTD_Cctx_s1431,48437
    const BYTE* base;base1433,48466
    U32 current;current1434,48488
    U32 nextUpdate;nextUpdate1435,48505
    seqStore_t seqStore;seqStore1436,48525
    __m256i hashTable[HASH_TABLESIZE>>3];hashTable1438,48566
    U32 hashTable[HASH_TABLESIZE];hashTable1440,48614
    BYTE buffer[WORKPLACESIZE];buffer1442,48656
} cctxi_t;cctxi_t1443,48688
unsigned ZSTDv01_isError(size_t code) { return ERR_isError(code); }ZSTDv01_isError1452,48831
#define ZSTD_VERSION_MAJOR ZSTD_VERSION_MAJOR1458,48999
#define ZSTD_VERSION_MINOR ZSTD_VERSION_MINOR1459,49072
#define ZSTD_VERSION_RELEASE ZSTD_VERSION_RELEASE1460,49159
#define ZSTD_VERSION_NUMBER ZSTD_VERSION_NUMBER1461,49238
static size_t ZSTDv01_getcBlockSize(const void* src, size_t srcSize, blockProperties_t* bpPtr)ZSTDv01_getcBlockSize1467,49499
static size_t ZSTD_copyUncompressedBlock(void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTD_copyUncompressedBlock1487,50047
static size_t ZSTD_decompressLiterals(void* ctx,ZSTD_decompressLiterals1497,50303
static size_t ZSTDv01_decodeLiteralsBlock(void* ctx,ZSTDv01_decodeLiteralsBlock1522,51090
static size_t ZSTDv01_decodeSeqHeaders(int* nbSeq, const BYTE** dumpsPtr, size_t* dumpsLengthPtr,ZSTDv01_decodeSeqHeaders1576,52761
    size_t litLength;litLength1678,56205
    size_t offset;offset1679,56227
    size_t matchLength;matchLength1680,56246
} seq_t;seq_t1681,56270
    FSE_DStream_t DStream;DStream1684,56297
    FSE_DState_t stateLL;stateLL1685,56324
    FSE_DState_t stateOffb;stateOffb1686,56350
    FSE_DState_t stateML;stateML1687,56378
    size_t prevOffset;prevOffset1688,56404
    const BYTE* dumps;dumps1689,56427
    const BYTE* dumpsEnd;dumpsEnd1690,56450
} seqState_t;seqState_t1691,56476
static void ZSTD_decodeSequence(seq_t* seq, seqState_t* seqState)ZSTD_decodeSequence1694,56492
static size_t ZSTD_execSequence(BYTE* op,ZSTD_execSequence1758,58362
typedef struct ZSTDv01_Dctx_sZSTDv01_Dctx_s1837,61368
    U32 LLTable[FSE_DTABLE_SIZE_U32(LLFSELog)];LLTable1839,61400
    U32 OffTable[FSE_DTABLE_SIZE_U32(OffFSELog)];OffTable1840,61448
    U32 MLTable[FSE_DTABLE_SIZE_U32(MLFSELog)];MLTable1841,61498
    void* previousDstEnd;previousDstEnd1842,61546
    void* base;base1843,61572
    size_t expected;expected1844,61588
    blockType_t bType;bType1845,61609
    U32 phase;phase1846,61632
} dctx_t;dctx_t1847,61647
static size_t ZSTD_decompressSequences(ZSTD_decompressSequences1850,61659
static size_t ZSTD_decompressBlock(ZSTD_decompressBlock1923,64452
size_t ZSTDv01_decompressDCtx(void* ctx, void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTDv01_decompressDCtx1944,65149
size_t ZSTDv01_decompress(void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTDv01_decompress2001,67019
static void ZSTD_errorFrameSizeInfoLegacy(size_t* cSize, unsigned long long* dBound, size_t ret)ZSTD_errorFrameSizeInfoLegacy2010,67308
void ZSTDv01_findFrameSizeInfoLegacy(const void *src, size_t srcSize, size_t* cSize, unsigned long long* dBound)ZSTDv01_findFrameSizeInfoLegacy2016,67466
size_t ZSTDv01_resetDCtx(ZSTDv01_Dctx* dctx)ZSTDv01_resetDCtx2067,69003
ZSTDv01_Dctx* ZSTDv01_createDCtx(void)ZSTDv01_createDCtx2076,69187
size_t ZSTDv01_freeDCtx(ZSTDv01_Dctx* dctx)ZSTDv01_freeDCtx2084,69380
size_t ZSTDv01_nextSrcSizeToDecompress(ZSTDv01_Dctx* dctx)ZSTDv01_nextSrcSizeToDecompress2090,69459
size_t ZSTDv01_decompressContinue(ZSTDv01_Dctx* dctx, void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTDv01_decompressContinue2095,69561

cover.c,5388
#define ZDICT_STATIC_LINKING_ONLYZDICT_STATIC_LINKING_ONLY35,1232
#define COVER_MAX_SAMPLES_SIZE COVER_MAX_SAMPLES_SIZE42,1388
#define COVER_DEFAULT_SPLITPOINT COVER_DEFAULT_SPLITPOINT43,1477
static int g_displayLevel = 2;g_displayLevel49,1642
#undef  DISPLAYDISPLAY51,1680
#define DISPLAY(DISPLAY52,1696
#undef  LOCALDISPLAYLEVELLOCALDISPLAYLEVEL57,2024
#define LOCALDISPLAYLEVEL(LOCALDISPLAYLEVEL58,2050
#undef  DISPLAYLEVELDISPLAYLEVEL62,2369
#define DISPLAYLEVEL(DISPLAYLEVEL63,2390
static const clock_t g_refreshRate = CLOCKS_PER_SEC * 15 / 100;g_refreshRate66,2497
static clock_t g_time = 0;g_time67,2561
#undef  LOCALDISPLAYUPDATELOCALDISPLAYUPDATE69,2595
#define LOCALDISPLAYUPDATE(LOCALDISPLAYUPDATE70,2622
#undef  DISPLAYUPDATEDISPLAYUPDATE77,3114
#define DISPLAYUPDATE(DISPLAYUPDATE78,3136
#define MAP_EMPTY_VALUE MAP_EMPTY_VALUE89,3572
typedef struct COVER_map_pair_t_s {COVER_map_pair_t_s90,3606
  U32 key;key91,3642
  U32 value;value92,3653
} COVER_map_pair_t;COVER_map_pair_t93,3666
typedef struct COVER_map_s {COVER_map_s95,3687
  COVER_map_pair_t *data;data96,3716
  U32 sizeLog;sizeLog97,3742
  U32 size;size98,3757
  U32 sizeMask;sizeMask99,3769
} COVER_map_t;COVER_map_t100,3785
static void COVER_map_clear(COVER_map_t *map) {COVER_map_clear105,3827
static int COVER_map_init(COVER_map_t *map, U32 size) {COVER_map_init115,4171
static const U32 COVER_prime4bytes = 2654435761U;COVER_prime4bytes132,4573
static U32 COVER_map_hash(COVER_map_t *map, U32 key) {COVER_map_hash133,4623
static U32 COVER_map_index(COVER_map_t *map, U32 key) {COVER_map_index140,4824
static U32 *COVER_map_at(COVER_map_t *map, U32 key) {COVER_map_at159,5298
static void COVER_map_remove(COVER_map_t *map, U32 key) {COVER_map_remove171,5573
static void COVER_map_destroy(COVER_map_t *map) {COVER_map_destroy200,6356
  const BYTE *samples;samples213,6600
  size_t *offsets;offsets214,6623
  const size_t *samplesSizes;samplesSizes215,6642
  size_t nbSamples;nbSamples216,6672
  size_t nbTrainSamples;nbTrainSamples217,6692
  size_t nbTestSamples;nbTestSamples218,6717
  U32 *suffix;suffix219,6741
  size_t suffixSize;suffixSize220,6756
  U32 *freqs;freqs221,6777
  U32 *dmerAt;dmerAt222,6791
  unsigned d;d223,6806
} COVER_ctx_t;COVER_ctx_t224,6820
static COVER_ctx_t *g_coverCtx = NULL;g_coverCtx227,6880
size_t COVER_sum(const size_t *samplesSizes, unsigned nbSamples) {COVER_sum236,7071
static int COVER_cmp(COVER_ctx_t *ctx, const void *lp, const void *rp) {COVER_cmp250,7436
static int COVER_cmp8(COVER_ctx_t *ctx, const void *lp, const void *rp) {COVER_cmp8258,7686
static int WIN_CDECL COVER_strict_cmp(const void *lp, const void *rp) {COVER_strict_cmp273,8241
static int WIN_CDECL COVER_strict_cmp8(const void *lp, const void *rp) {COVER_strict_cmp8283,8472
static const size_t *COVER_lower_bound(const size_t *first, const size_t *last,COVER_lower_bound295,8817
COVER_groupBy(const void *data, size_t count, size_t size, COVER_ctx_t *ctx,COVER_groupBy318,9362
static void COVER_group(COVER_ctx_t *ctx, const void *group,COVER_group344,10121
static COVER_segment_t COVER_selectSegment(const COVER_ctx_t *ctx, U32 *freqs,COVER_selectSegment405,12405
static int COVER_checkParameters(ZDICT_cover_params_t parameters,COVER_checkParameters488,15339
static void COVER_ctx_destroy(COVER_ctx_t *ctx) {COVER_ctx_destroy512,15907
static size_t COVER_ctx_init(COVER_ctx_t *ctx, const void *samplesBuffer,COVER_ctx_init541,16527
void COVER_warnOnSmallCorpus(size_t maxDictSize, size_t nbDmers, int displayLevel)COVER_warnOnSmallCorpus639,20777
COVER_epoch_info_t COVER_computeEpochs(U32 maxDictSize,COVER_computeEpochs655,21474
static size_t COVER_buildDictionary(const COVER_ctx_t *ctx, U32 *freqs,COVER_buildDictionary675,22076
ZDICTLIB_API size_t ZDICT_trainFromBuffer_cover(ZDICT_trainFromBuffer_cover727,24236
size_t COVER_checkTotalCompressedSize(const ZDICT_cover_params_t parameters,COVER_checkTotalCompressedSize787,26369
void COVER_best_init(COVER_best_t *best) {COVER_best_init843,28155
void COVER_best_wait(COVER_best_t *best) {COVER_best_wait857,28563
void COVER_best_destroy(COVER_best_t *best) {COVER_best_destroy871,28884
void COVER_best_start(COVER_best_t *best) {COVER_best_start887,29202
void COVER_best_finish(COVER_best_t *best, ZDICT_cover_params_t parameters,COVER_best_finish901,29604
COVER_dictSelection_t COVER_dictSelectionError(size_t error) {COVER_dictSelectionError945,30944
unsigned COVER_dictSelectionIsError(COVER_dictSelection_t selection) {COVER_dictSelectionIsError950,31090
void COVER_dictSelectionFree(COVER_dictSelection_t selection){COVER_dictSelectionFree954,31246
COVER_dictSelection_t COVER_selectDict(BYTE* customDictContent, size_t dictBufferCapacity,COVER_selectDict958,31343
typedef struct COVER_tryParameters_data_s {COVER_tryParameters_data_s1053,35104
  const COVER_ctx_t *ctx;ctx1054,35148
  COVER_best_t *best;best1055,35174
  size_t dictBufferCapacity;dictBufferCapacity1056,35196
  ZDICT_cover_params_t parameters;parameters1057,35225
} COVER_tryParameters_data_t;COVER_tryParameters_data_t1058,35260
static void COVER_tryParameters(void *opaque) {COVER_tryParameters1065,35534
ZDICTLIB_API size_t ZDICT_optimizeTrainFromBuffer_cover(ZDICT_optimizeTrainFromBuffer_cover1111,37388

zstd_ddict.c,1651
#define FSE_STATIC_LINKING_ONLYFSE_STATIC_LINKING_ONLY20,785
#define HUF_STATIC_LINKING_ONLYHUF_STATIC_LINKING_ONLY22,834
struct ZSTD_DDict_s {ZSTD_DDict_s36,1181
    void* dictBuffer;dictBuffer37,1203
    const void* dictContent;dictContent38,1225
    size_t dictSize;dictSize39,1254
    ZSTD_entropyDTables_t entropy;entropy40,1275
    U32 dictID;dictID41,1310
    U32 entropyPresent;entropyPresent42,1326
    ZSTD_customMem cMem;cMem43,1350
const void* ZSTD_DDict_dictContent(const ZSTD_DDict* ddict)ZSTD_DDict_dictContent46,1426
size_t ZSTD_DDict_dictSize(const ZSTD_DDict* ddict)ZSTD_DDict_dictSize52,1549
void ZSTD_copyDDictParameters(ZSTD_DCtx* dctx, const ZSTD_DDict* ddict)ZSTD_copyDDictParameters58,1661
ZSTD_loadEntropy_intoDDict(ZSTD_DDict* ddict,ZSTD_loadEntropy_intoDDict90,2782
static size_t ZSTD_initDDict_internal(ZSTD_DDict* ddict,ZSTD_initDDict_internal120,3872
ZSTD_DDict* ZSTD_createDDict_advanced(const void* dict, size_t dictSize,ZSTD_createDDict_advanced145,4907
ZSTD_DDict* ZSTD_createDDict(const void* dict, size_t dictSize)ZSTD_createDDict170,6029
ZSTD_DDict* ZSTD_createDDict_byReference(const void* dictBuffer, size_t dictSize)ZSTD_createDDict_byReference180,6545
const ZSTD_DDict* ZSTD_initStaticDDict(ZSTD_initStaticDDict187,6794
size_t ZSTD_freeDDict(ZSTD_DDict* ddict)ZSTD_freeDDict212,7838
size_t ZSTD_estimateDDictSize(size_t dictSize, ZSTD_dictLoadMethod_e dictLoadMethod)ZSTD_estimateDDictSize225,8307
size_t ZSTD_sizeof_DDict(const ZSTD_DDict* ddict)ZSTD_sizeof_DDict230,8480
unsigned ZSTD_getDictID_fromDDict(const ZSTD_DDict* ddict)ZSTD_getDictID_fromDDict240,8947

zstd_compress_superblock.c,2633
    symbolEncodingType_e hType;hType31,1181
    BYTE hufDesBuffer[ZSTD_MAX_HUF_HEADER_SIZE];hufDesBuffer32,1213
    size_t hufDesSize;hufDesSize33,1262
} ZSTD_hufCTablesMetadata_t;ZSTD_hufCTablesMetadata_t34,1285
    symbolEncodingType_e llType;llType42,1616
    symbolEncodingType_e ofType;ofType43,1649
    symbolEncodingType_e mlType;mlType44,1682
    BYTE fseTablesBuffer[ZSTD_MAX_FSE_HEADERS_SIZE];fseTablesBuffer45,1715
    size_t fseTablesSize;fseTablesSize46,1768
    size_t lastCountSize; /* This is to account for bug in 1.3.4. More detail in ZSTD_compressSubBlock_sequences() */lastCountSize47,1794
} ZSTD_fseCTablesMetadata_t;ZSTD_fseCTablesMetadata_t48,1912
    ZSTD_hufCTablesMetadata_t hufMetadata;hufMetadata51,1959
    ZSTD_fseCTablesMetadata_t fseMetadata;fseMetadata52,2002
} ZSTD_entropyCTablesMetadata_t;ZSTD_entropyCTablesMetadata_t53,2045
static size_t ZSTD_buildSuperBlockEntropy_literal(void* const src, size_t srcSize,ZSTD_buildSuperBlockEntropy_literal61,2350
#   define COMPRESS_LITERALS_SIZE_MIN COMPRESS_LITERALS_SIZE_MIN91,3768
static size_t ZSTD_buildSuperBlockEntropy_sequences(seqStore_t* seqStorePtr,ZSTD_buildSuperBlockEntropy_sequences163,7013
ZSTD_buildSuperBlockEntropy(seqStore_t* seqStorePtr,ZSTD_buildSuperBlockEntropy274,14234
static size_t ZSTD_compressSubBlock_literal(const HUF_CElt* hufTable,ZSTD_compressSubBlock_literal319,17010
static size_t ZSTD_seqDecompressedSize(seqStore_t const* seqStore, const seqDef* sequences, size_t nbSeq, size_t litSize, int lastSequence) {ZSTD_seqDecompressedSize407,20948
static size_t ZSTD_compressSubBlock_sequences(const ZSTD_fseCTables_t* fseTables,ZSTD_compressSubBlock_sequences436,22207
static size_t ZSTD_compressSubBlock(const ZSTD_entropyCTables_t* entropy,ZSTD_compressSubBlock536,26880
static size_t ZSTD_estimateSubBlockSize_literal(const BYTE* literals, size_t litSize,ZSTD_estimateSubBlockSize_literal579,29393
static size_t ZSTD_estimateSubBlockSize_symbolType(symbolEncodingType_e type,ZSTD_estimateSubBlockSize_symbolType602,30671
static size_t ZSTD_estimateSubBlockSize_sequences(const BYTE* ofCodeTable,ZSTD_estimateSubBlockSize_sequences637,32332
static size_t ZSTD_estimateSubBlockSize(const BYTE* literals, size_t litSize,ZSTD_estimateSubBlockSize664,34206
static int ZSTD_needSequenceEntropyTables(ZSTD_fseCTablesMetadata_t const* fseMetadata)ZSTD_needSequenceEntropyTables683,35520
static size_t ZSTD_compressSubBlock_multi(const seqStore_t* seqStorePtr,ZSTD_compressSubBlock_multi701,36330
size_t ZSTD_compressSuperBlock(ZSTD_CCtx* zc,ZSTD_compressSuperBlock827,42423

zstd_lazy.h,107
#define ZSTD_LAZY_HZSTD_LAZY_H12,406
#define ZSTD_LAZY_DDSS_BUCKET_LOG ZSTD_LAZY_DDSS_BUCKET_LOG26,714

entropy_common.c,1607
#define FSE_STATIC_LINKING_ONLY FSE_STATIC_LINKING_ONLY20,902
#define HUF_STATIC_LINKING_ONLY HUF_STATIC_LINKING_ONLY22,975
unsigned FSE_versionNumber(void) { return FSE_VERSION_NUMBER; }FSE_versionNumber27,1082
unsigned FSE_isError(size_t code) { return ERR_isError(code); }FSE_isError31,1181
const char* FSE_getErrorName(size_t code) { return ERR_getErrorName(code); }FSE_getErrorName32,1245
unsigned HUF_isError(size_t code) { return ERR_isError(code); }HUF_isError34,1323
const char* HUF_getErrorName(size_t code) { return ERR_getErrorName(code); }HUF_getErrorName35,1387
static U32 FSE_ctz(U32 val)FSE_ctz41,1630
size_t FSE_readNCount_body(short* normalizedCounter, unsigned* maxSVPtr, unsigned* tableLogPtr,FSE_readNCount_body64,2203
static size_t FSE_readNCount_body_default(FSE_readNCount_body_default212,7612
TARGET_ATTRIBUTE("bmi2") static size_t FSE_readNCount_body_bmi2(FSE_readNCount_body_bmi2220,7899
size_t FSE_readNCount_bmi2(FSE_readNCount_bmi2228,8198
size_t FSE_readNCount(FSE_readNCount241,8638
size_t HUF_readStats(BYTE* huffWeight, size_t hwSize, U32* rankStats,HUF_readStats256,9221
HUF_readStats_body(BYTE* huffWeight, size_t hwSize, U32* rankStats,HUF_readStats_body265,9623
static size_t HUF_readStats_body_default(BYTE* huffWeight, size_t hwSize, U32* rankStats,HUF_readStats_body_default331,12362
static TARGET_ATTRIBUTE("bmi2") size_t HUF_readStats_body_bmi2(BYTE* huffWeight, size_t hwSize, U32* rankStats,HUF_readStats_body_bmi2340,12768
size_t HUF_readStats_wksp(BYTE* huffWeight, size_t hwSize, U32* rankStats,HUF_readStats_wksp349,13186

threading.h,3458
#define THREADING_H_938743THREADING_H_93874315,496
#  undef WINVERWINVER30,766
#define WINVER WINVER32,789
#  undef _WIN32_WINNT_WIN32_WINNT35,838
#define _WIN32_WINNT _WIN32_WINNT37,867
#  define WIN32_LEAN_AND_MEANWIN32_LEAN_AND_MEAN40,924
#undef ERROR ERROR43,962
#undef ERRORERROR45,1057
#define ERROR(ERROR46,1070
#define ZSTD_pthread_mutex_t ZSTD_pthread_mutex_t50,1121
#define ZSTD_pthread_mutex_init(ZSTD_pthread_mutex_init51,1177
#define ZSTD_pthread_mutex_destroy(ZSTD_pthread_mutex_destroy52,1263
#define ZSTD_pthread_mutex_lock(ZSTD_pthread_mutex_lock53,1329
#define ZSTD_pthread_mutex_unlock(ZSTD_pthread_mutex_unlock54,1394
#define ZSTD_pthread_cond_t ZSTD_pthread_cond_t57,1485
#define ZSTD_pthread_cond_init(ZSTD_pthread_cond_init58,1544
#define ZSTD_pthread_cond_destroy(ZSTD_pthread_cond_destroy59,1633
#define ZSTD_pthread_cond_wait(ZSTD_pthread_cond_wait60,1685
#define ZSTD_pthread_cond_signal(ZSTD_pthread_cond_signal61,1770
#define ZSTD_pthread_cond_broadcast(ZSTD_pthread_cond_broadcast62,1837
    HANDLE handle;handle66,1977
    void* (*start_routine)(void*);start_routine67,1996
    void* arg;arg68,2031
} ZSTD_pthread_t;ZSTD_pthread_t69,2046
#define ZSTD_pthread_mutex_t ZSTD_pthread_mutex_t87,2474
#define ZSTD_pthread_mutex_init(ZSTD_pthread_mutex_init88,2530
#define ZSTD_pthread_mutex_destroy(ZSTD_pthread_mutex_destroy89,2599
#define ZSTD_pthread_mutex_lock(ZSTD_pthread_mutex_lock90,2666
#define ZSTD_pthread_mutex_unlock(ZSTD_pthread_mutex_unlock91,2730
#define ZSTD_pthread_cond_t ZSTD_pthread_cond_t93,2797
#define ZSTD_pthread_cond_init(ZSTD_pthread_cond_init94,2852
#define ZSTD_pthread_cond_destroy(ZSTD_pthread_cond_destroy95,2920
#define ZSTD_pthread_cond_wait(ZSTD_pthread_cond_wait96,2986
#define ZSTD_pthread_cond_signal(ZSTD_pthread_cond_signal97,3054
#define ZSTD_pthread_cond_broadcast(ZSTD_pthread_cond_broadcast98,3119
#define ZSTD_pthread_t ZSTD_pthread_t100,3188
#define ZSTD_pthread_create(ZSTD_pthread_create101,3238
#define ZSTD_pthread_join(ZSTD_pthread_join102,3313
#define ZSTD_pthread_mutex_t ZSTD_pthread_mutex_t112,3627
#define ZSTD_pthread_mutex_lock(ZSTD_pthread_mutex_lock115,3836
#define ZSTD_pthread_mutex_unlock(ZSTD_pthread_mutex_unlock116,3901
#define ZSTD_pthread_cond_t ZSTD_pthread_cond_t118,3969
#define ZSTD_pthread_cond_wait(ZSTD_pthread_cond_wait121,4170
#define ZSTD_pthread_cond_signal(ZSTD_pthread_cond_signal122,4240
#define ZSTD_pthread_cond_broadcast(ZSTD_pthread_cond_broadcast123,4306
#define ZSTD_pthread_t ZSTD_pthread_t125,4376
#define ZSTD_pthread_create(ZSTD_pthread_create126,4426
#define ZSTD_pthread_join(ZSTD_pthread_join127,4501
typedef int ZSTD_pthread_mutex_t;ZSTD_pthread_mutex_t134,4647
#define ZSTD_pthread_mutex_init(ZSTD_pthread_mutex_init135,4681
#define ZSTD_pthread_mutex_destroy(ZSTD_pthread_mutex_destroy136,4747
#define ZSTD_pthread_mutex_lock(ZSTD_pthread_mutex_lock137,4799
#define ZSTD_pthread_mutex_unlock(ZSTD_pthread_mutex_unlock138,4851
typedef int ZSTD_pthread_cond_t;ZSTD_pthread_cond_t140,4904
#define ZSTD_pthread_cond_init(ZSTD_pthread_cond_init141,4937
#define ZSTD_pthread_cond_destroy(ZSTD_pthread_cond_destroy142,5003
#define ZSTD_pthread_cond_wait(ZSTD_pthread_cond_wait143,5055
#define ZSTD_pthread_cond_signal(ZSTD_pthread_cond_signal144,5118
#define ZSTD_pthread_cond_broadcast(ZSTD_pthread_cond_broadcast145,5170

zstdmt_compress.c,13086
#define ZSTDMT_OVERLAPLOG_DEFAULT ZSTDMT_OVERLAPLOG_DEFAULT19,588
#define ZSTD_RESIZE_SEQPOOL ZSTD_RESIZE_SEQPOOL35,1165
#  define DEBUG_PRINTHEX(DEBUG_PRINTHEX46,1398
static unsigned long long GetCurrentClockTimeMicroseconds(void)GetCurrentClockTimeMicroseconds53,1657
#define MUTEX_WAIT_TIME_DLEVEL MUTEX_WAIT_TIME_DLEVEL62,1981
#define ZSTD_PTHREAD_MUTEX_LOCK(ZSTD_PTHREAD_MUTEX_LOCK63,2014
#  define ZSTD_PTHREAD_MUTEX_LOCK(ZSTD_PTHREAD_MUTEX_LOCK80,2901
#  define DEBUG_PRINTHEX(DEBUG_PRINTHEX81,2965
typedef struct buffer_s {buffer_s89,3121
    void* start;start90,3147
    size_t capacity;capacity91,3164
} buffer_t;buffer_t92,3185
static const buffer_t g_nullBuffer = { NULL, 0 };g_nullBuffer94,3198
typedef struct ZSTDMT_bufferPool_s {ZSTDMT_bufferPool_s96,3249
    ZSTD_pthread_mutex_t poolMutex;poolMutex97,3286
    size_t bufferSize;bufferSize98,3322
    unsigned totalBuffers;totalBuffers99,3345
    unsigned nbBuffers;nbBuffers100,3372
    ZSTD_customMem cMem;cMem101,3396
    buffer_t bTable[1];   /* variable size */bTable102,3421
} ZSTDMT_bufferPool;ZSTDMT_bufferPool103,3467
static ZSTDMT_bufferPool* ZSTDMT_createBufferPool(unsigned nbWorkers, ZSTD_customMem cMem)ZSTDMT_createBufferPool105,3489
static void ZSTDMT_freeBufferPool(ZSTDMT_bufferPool* bufPool)ZSTDMT_freeBufferPool122,4108
static size_t ZSTDMT_sizeof_bufferPool(ZSTDMT_bufferPool* bufPool)ZSTDMT_sizeof_bufferPool136,4708
static void ZSTDMT_setBufferSize(ZSTDMT_bufferPool* const bufPool, size_t const bSize)ZSTDMT_setBufferSize154,5456
static ZSTDMT_bufferPool* ZSTDMT_expandBufferPool(ZSTDMT_bufferPool* srcBufPool, U32 nbWorkers)ZSTDMT_expandBufferPool163,5749
static buffer_t ZSTDMT_getBuffer(ZSTDMT_bufferPool* bufPool)ZSTDMT_getBuffer185,6668
static buffer_t ZSTDMT_resizeBuffer(ZSTDMT_bufferPool* bufPool, buffer_t buffer)ZSTDMT_resizeBuffer227,8601
static void ZSTDMT_releaseBuffer(ZSTDMT_bufferPool* bufPool, buffer_t buf)ZSTDMT_releaseBuffer248,9405
typedef ZSTDMT_bufferPool ZSTDMT_seqPool;ZSTDMT_seqPool269,10289
static size_t ZSTDMT_sizeof_seqPool(ZSTDMT_seqPool* seqPool)ZSTDMT_sizeof_seqPool271,10332
static rawSeqStore_t bufferToSeq(buffer_t buffer)bufferToSeq276,10444
static buffer_t seqToBuffer(rawSeqStore_t seq)seqToBuffer284,10647
static rawSeqStore_t ZSTDMT_getSeq(ZSTDMT_seqPool* seqPool)ZSTDMT_getSeq292,10820
static rawSeqStore_t ZSTDMT_resizeSeq(ZSTDMT_seqPool* seqPool, rawSeqStore_t seq)ZSTDMT_resizeSeq301,11035
static void ZSTDMT_releaseSeq(ZSTDMT_seqPool* seqPool, rawSeqStore_t seq)ZSTDMT_releaseSeq307,11199
static void ZSTDMT_setNbSeq(ZSTDMT_seqPool* const seqPool, size_t const nbSeq)ZSTDMT_setNbSeq312,11329
static ZSTDMT_seqPool* ZSTDMT_createSeqPool(unsigned nbWorkers, ZSTD_customMem cMem)ZSTDMT_createSeqPool317,11470
static void ZSTDMT_freeSeqPool(ZSTDMT_seqPool* seqPool)ZSTDMT_freeSeqPool325,11729
static ZSTDMT_seqPool* ZSTDMT_expandSeqPool(ZSTDMT_seqPool* pool, U32 nbWorkers)ZSTDMT_expandSeqPool330,11826
    ZSTD_pthread_mutex_t poolMutex;poolMutex340,12090
    int totalCCtx;totalCCtx341,12126
    int availCCtx;availCCtx342,12145
    ZSTD_customMem cMem;cMem343,12164
    ZSTD_CCtx* cctx[1];   /* variable size */cctx344,12189
} ZSTDMT_CCtxPool;ZSTDMT_CCtxPool345,12235
static void ZSTDMT_freeCCtxPool(ZSTDMT_CCtxPool* pool)ZSTDMT_freeCCtxPool348,12362
static ZSTDMT_CCtxPool* ZSTDMT_createCCtxPool(int nbWorkers,ZSTDMT_createCCtxPool359,12749
static ZSTDMT_CCtxPool* ZSTDMT_expandCCtxPool(ZSTDMT_CCtxPool* srcPool,ZSTDMT_expandCCtxPool379,13583
static size_t ZSTDMT_sizeof_CCtxPool(ZSTDMT_CCtxPool* cctxPool)ZSTDMT_sizeof_CCtxPool392,14087
static ZSTD_CCtx* ZSTDMT_getCCtx(ZSTDMT_CCtxPool* cctxPool)ZSTDMT_getCCtx409,14686
static void ZSTDMT_releaseCCtx(ZSTDMT_CCtxPool* pool, ZSTD_CCtx* cctx)ZSTDMT_releaseCCtx424,15265
    void const* start;start441,15825
    size_t size;size442,15848
} range_t;range_t443,15865
    ZSTD_pthread_mutex_t mutex;mutex447,15956
    ZSTD_pthread_cond_t cond;cond448,15988
    ZSTD_CCtx_params params;params449,16018
    ldmState_t ldmState;ldmState450,16047
    XXH64_state_t xxhState;xxhState451,16072
    unsigned nextJobID;nextJobID452,16100
    ZSTD_pthread_mutex_t ldmWindowMutex;ldmWindowMutex456,16225
    ZSTD_pthread_cond_t ldmWindowCond;  /* Signaled when ldmWindow is updated */ldmWindowCond457,16266
    ZSTD_window_t ldmWindow;  /* A thread-safe copy of ldmState.window */ldmWindow458,16347
} serialState_t;serialState_t459,16421
ZSTDMT_serialState_reset(serialState_t* serialState,ZSTDMT_serialState_reset462,16450
static int ZSTDMT_serialState_init(serialState_t* serialState)ZSTDMT_serialState_init534,19996
static void ZSTDMT_serialState_free(serialState_t* serialState)ZSTDMT_serialState_free545,20454
static void ZSTDMT_serialState_update(serialState_t* serialState,ZSTDMT_serialState_update556,20930
static void ZSTDMT_serialState_ensureFinished(serialState_t* serialState,ZSTDMT_serialState_ensureFinished605,23213
static const range_t kNullRange = { NULL, 0 };kNullRange629,24133
    size_t   consumed;                   /* SHARED - set0 by mtctx, then modified by worker AND read by mtctx */consumed632,24198
    size_t   cSize;                      /* SHARED - set0 by mtctx, then modified by worker AND read by mtctx, then set0 by mtctx */cSize633,24311
    ZSTD_pthread_mutex_t job_mutex;      /* Thread-safe - used by mtctx and worker */job_mutex634,24444
    ZSTD_pthread_cond_t job_cond;        /* Thread-safe - used by mtctx and worker */job_cond635,24530
    ZSTDMT_CCtxPool* cctxPool;           /* Thread-safe - used by mtctx and (all) workers */cctxPool636,24616
    ZSTDMT_bufferPool* bufPool;          /* Thread-safe - used by mtctx and (all) workers */bufPool637,24709
    ZSTDMT_seqPool* seqPool;             /* Thread-safe - used by mtctx and (all) workers */seqPool638,24802
    serialState_t* serial;               /* Thread-safe - used by mtctx and (all) workers */serial639,24895
    buffer_t dstBuff;                    /* set by worker (or mtctx), then read by worker & mtctx, then modified by mtctx => no barrier */dstBuff640,24988
    range_t prefix;                      /* set by mtctx, then read by worker & mtctx => no barrier */prefix641,25127
    range_t src;                         /* set by mtctx, then read by worker & mtctx => no barrier */src642,25230
    unsigned jobID;                      /* set by mtctx, then read by worker => no barrier */jobID643,25333
    unsigned firstJob;                   /* set by mtctx, then read by worker => no barrier */firstJob644,25428
    unsigned lastJob;                    /* set by mtctx, then read by worker => no barrier */lastJob645,25523
    ZSTD_CCtx_params params;             /* set by mtctx, then read by worker => no barrier */params646,25618
    const ZSTD_CDict* cdict;             /* set by mtctx, then read by worker => no barrier */cdict647,25713
    unsigned long long fullFrameSize;    /* set by mtctx, then read by worker => no barrier */fullFrameSize648,25808
    size_t   dstFlushed;                 /* used only by mtctx */dstFlushed649,25903
    unsigned frameChecksumNeeded;        /* used only by mtctx */frameChecksumNeeded650,25969
} ZSTDMT_jobDescription;ZSTDMT_jobDescription651,26035
#define JOB_ERROR(JOB_ERROR653,26061
static void ZSTDMT_compressionJob(void* jobDescription)ZSTDMT_compressionJob661,26368
    range_t prefix;         /* read-only non-owned prefix buffer */prefix777,32428
    buffer_t buffer;buffer778,32496
    size_t filled;filled779,32517
} inBuff_t;inBuff_t780,32536
  BYTE* buffer;     /* The round input buffer. All jobs get referencesbuffer783,32566
  size_t capacity;  /* The capacity of buffer. */capacity788,32884
  size_t pos;       /* The position of the current inBuff in the roundpos789,32934
} roundBuff_t;roundBuff_t794,33204
static const roundBuff_t kNullRoundBuff = {NULL, 0, 0};kNullRoundBuff796,33220
#define RSYNC_LENGTH RSYNC_LENGTH798,33277
  U64 hash;hash801,33319
  U64 hitMask;hitMask802,33331
  U64 primePower;primePower803,33346
} rsyncState_t;rsyncState_t804,33364
struct ZSTDMT_CCtx_s {ZSTDMT_CCtx_s806,33381
    POOL_ctx* factory;factory807,33404
    ZSTDMT_jobDescription* jobs;jobs808,33427
    ZSTDMT_bufferPool* bufPool;bufPool809,33460
    ZSTDMT_CCtxPool* cctxPool;cctxPool810,33492
    ZSTDMT_seqPool* seqPool;seqPool811,33523
    ZSTD_CCtx_params params;params812,33552
    size_t targetSectionSize;targetSectionSize813,33581
    size_t targetPrefixSize;targetPrefixSize814,33611
    int jobReady;        /* 1 => one job is already prepared, but pool has shortage of workers. Don't create a new job. */jobReady815,33640
    inBuff_t inBuff;inBuff816,33763
    roundBuff_t roundBuff;roundBuff817,33784
    serialState_t serial;serial818,33811
    rsyncState_t rsync;rsync819,33837
    unsigned jobIDMask;jobIDMask820,33861
    unsigned doneJobID;doneJobID821,33885
    unsigned nextJobID;nextJobID822,33909
    unsigned frameEnded;frameEnded823,33933
    unsigned allJobsCompleted;allJobsCompleted824,33958
    unsigned long long frameContentSize;frameContentSize825,33989
    unsigned long long consumed;consumed826,34030
    unsigned long long produced;produced827,34063
    ZSTD_customMem cMem;cMem828,34096
    ZSTD_CDict* cdictLocal;cdictLocal829,34121
    const ZSTD_CDict* cdict;cdict830,34149
    unsigned providedFactory: 1;providedFactory831,34178
static void ZSTDMT_freeJobsTable(ZSTDMT_jobDescription* jobTable, U32 nbJobs, ZSTD_customMem cMem)ZSTDMT_freeJobsTable834,34215
static ZSTDMT_jobDescription* ZSTDMT_createJobsTable(U32* nbJobsPtr, ZSTD_customMem cMem)ZSTDMT_createJobsTable848,34708
static size_t ZSTDMT_expandJobsTable (ZSTDMT_CCtx* mtctx, U32 nbWorkers) {ZSTDMT_expandJobsTable869,35487
static size_t ZSTDMT_CCtxParam_setNbWorkers(ZSTD_CCtx_params* params, unsigned nbWorkers)ZSTDMT_CCtxParam_setNbWorkers885,36126
MEM_STATIC ZSTDMT_CCtx* ZSTDMT_createCCtx_advanced_internal(unsigned nbWorkers, ZSTD_customMem cMem, ZSTD_threadPool* pool)ZSTDMT_createCCtx_advanced_internal890,36304
ZSTDMT_CCtx* ZSTDMT_createCCtx_advanced(unsigned nbWorkers, ZSTD_customMem cMem, ZSTD_threadPool* pool)ZSTDMT_createCCtx_advanced932,37947
static void ZSTDMT_releaseAllJobResources(ZSTDMT_CCtx* mtctx)ZSTDMT_releaseAllJobResources947,38323
static void ZSTDMT_waitForAllJobsCompleted(ZSTDMT_CCtx* mtctx)ZSTDMT_waitForAllJobsCompleted969,39223
size_t ZSTDMT_freeCCtx(ZSTDMT_CCtx* mtctx)ZSTDMT_freeCCtx984,39953
size_t ZSTDMT_sizeof_CCtx(ZSTDMT_CCtx* mtctx)ZSTDMT_sizeof_CCtx1002,40694
static size_t ZSTDMT_resize(ZSTDMT_CCtx* mtctx, unsigned nbWorkers)ZSTDMT_resize1018,41267
void ZSTDMT_updateCParams_whileCompressing(ZSTDMT_CCtx* mtctx, const ZSTD_CCtx_params* cctxParams)ZSTDMT_updateCParams_whileCompressing1036,42193
ZSTD_frameProgression ZSTDMT_getFrameProgression(ZSTDMT_CCtx* mtctx)ZSTDMT_getFrameProgression1053,43111
size_t ZSTDMT_toFlushNow(ZSTDMT_CCtx* mtctx)ZSTDMT_toFlushNow1087,44647
static unsigned ZSTDMT_computeTargetJobLog(const ZSTD_CCtx_params* params)ZSTDMT_computeTargetJobLog1124,46156
static int ZSTDMT_overlapLog_default(ZSTD_strategy strat)ZSTDMT_overlapLog_default1138,46699
static int ZSTDMT_overlapLog(int ovlog, ZSTD_strategy strat)ZSTDMT_overlapLog1159,47121
static size_t ZSTDMT_computeOverlapSize(const ZSTD_CCtx_params* params)ZSTDMT_computeOverlapSize1166,47304
size_t ZSTDMT_initCStream_internal(ZSTDMT_initCStream_internal1189,48378
static void ZSTDMT_writeLastEmptyBlock(ZSTDMT_jobDescription* job)ZSTDMT_writeLastEmptyBlock1303,53909
static size_t ZSTDMT_createCompressionJob(ZSTDMT_CCtx* mtctx, size_t srcSize, ZSTD_EndDirective endOp)ZSTDMT_createCompressionJob1321,54786
static size_t ZSTDMT_flushProduced(ZSTDMT_CCtx* mtctx, ZSTD_outBuffer* output, unsigned blockToFlush, ZSTD_EndDirective end)ZSTDMT_flushProduced1406,58978
static range_t ZSTDMT_getInputDataInUse(ZSTDMT_CCtx* mtctx)ZSTDMT_getInputDataInUse1497,64703
static int ZSTDMT_isOverlapped(buffer_t buffer, range_t range)ZSTDMT_isOverlapped1528,65714
static int ZSTDMT_doesOverlapWindow(buffer_t buffer, ZSTD_window_t window)ZSTDMT_doesOverlapWindow1544,66308
static void ZSTDMT_waitForLdmComplete(ZSTDMT_CCtx* mtctx, buffer_t buffer)ZSTDMT_waitForLdmComplete1566,67072
static int ZSTDMT_tryGetInputRange(ZSTDMT_CCtx* mtctx)ZSTDMT_tryGetInputRange1589,67998
  size_t toLoad;  /* The number of bytes to load from the input. */toLoad1644,69956
  int flush;      /* Boolean declaring if we must flush because we found a synchronization point. */flush1645,70024
} syncPoint_t;syncPoint_t1646,70125
findSynchronizationPoint(ZSTDMT_CCtx const* mtctx, ZSTD_inBuffer const input)findSynchronizationPoint1655,70428
size_t ZSTDMT_nextInputSizeHint(const ZSTDMT_CCtx* mtctx)ZSTDMT_nextInputSizeHint1730,73813
size_t ZSTDMT_compressStream_generic(ZSTDMT_CCtx* mtctx,ZSTDMT_compressStream_generic1741,74266

huf_decompress.c,9208
#define HUF_STATIC_LINKING_ONLYHUF_STATIC_LINKING_ONLY22,992
#define HUF_isError HUF_isError43,1701
#define HUF_ALIGN(HUF_ALIGN49,1910
#define HUF_ALIGN_MASK(HUF_ALIGN_MASK50,1971
#define HUF_DGEN(HUF_DGEN58,2207
#define HUF_DGEN(HUF_DGEN87,4171
typedef struct { BYTE maxTableLog; BYTE tableType; BYTE tableLog; BYTE reserved; } DTableDesc;maxTableLog101,4751
typedef struct { BYTE maxTableLog; BYTE tableType; BYTE tableLog; BYTE reserved; } DTableDesc;tableType101,4751
typedef struct { BYTE maxTableLog; BYTE tableType; BYTE tableLog; BYTE reserved; } DTableDesc;tableLog101,4751
typedef struct { BYTE maxTableLog; BYTE tableType; BYTE tableLog; BYTE reserved; } DTableDesc;reserved101,4751
typedef struct { BYTE maxTableLog; BYTE tableType; BYTE tableLog; BYTE reserved; } DTableDesc;DTableDesc101,4751
static DTableDesc HUF_getDTableDesc(const HUF_DTable* table)HUF_getDTableDesc103,4847
typedef struct { BYTE byte; BYTE nbBits; } HUF_DEltX1;   /* single-symbol decoding */byte116,5122
typedef struct { BYTE byte; BYTE nbBits; } HUF_DEltX1;   /* single-symbol decoding */nbBits116,5122
typedef struct { BYTE byte; BYTE nbBits; } HUF_DEltX1;   /* single-symbol decoding */HUF_DEltX1116,5122
static U64 HUF_DEltX1_set4(BYTE symbol, BYTE nbBits) {HUF_DEltX1_set4122,5308
        U32 rankVal[HUF_TABLELOG_ABSOLUTEMAX + 1];rankVal134,5568
        U32 rankStart[HUF_TABLELOG_ABSOLUTEMAX + 1];rankStart135,5619
        U32 statsWksp[HUF_READ_STATS_WORKSPACE_SIZE_U32];statsWksp136,5672
        BYTE symbols[HUF_SYMBOLVALUE_MAX + 1];symbols137,5730
        BYTE huffWeight[HUF_SYMBOLVALUE_MAX + 1];huffWeight138,5777
} HUF_ReadDTableX1_Workspace;HUF_ReadDTableX1_Workspace139,5827
size_t HUF_readDTableX1_wksp(HUF_DTable* DTable, const void* src, size_t srcSize, void* workSpace, size_t wkspSize)HUF_readDTableX1_wksp142,5859
size_t HUF_readDTableX1_wksp_bmi2(HUF_DTable* DTable, const void* src, size_t srcSize, void* workSpace, size_t wkspSize, int bmi2)HUF_readDTableX1_wksp_bmi2147,6076
HUF_decodeSymbolX1(BIT_DStream_t* Dstream, const HUF_DEltX1* dt, const U32 dtLog)HUF_decodeSymbolX1282,11286
#define HUF_DECODE_SYMBOLX1_0(HUF_DECODE_SYMBOLX1_0290,11544
#define HUF_DECODE_SYMBOLX1_1(HUF_DECODE_SYMBOLX1_1293,11649
#define HUF_DECODE_SYMBOLX1_2(HUF_DECODE_SYMBOLX1_2297,11797
HUF_decodeStreamX1(BYTE* p, BIT_DStream_t* const bitDPtr, BYTE* const pEnd, const HUF_DEltX1* const dt, const U32 dtLog)HUF_decodeStreamX1302,11937
HUF_decompress1X1_usingDTable_internal_body(HUF_decompress1X1_usingDTable_internal_body327,12766
HUF_decompress4X1_usingDTable_internal_body(HUF_decompress4X1_usingDTable_internal_body350,13425
typedef size_t (*HUF_decompress_usingDTable_t)(void *dst, size_t dstSize,HUF_decompress_usingDTable_t444,17705
HUF_DGEN(HUF_decompress1X1_usingDTable_internal)HUF_DGEN449,17983
size_t HUF_decompress1X1_DCtx_wksp(HUF_DTable* DCtx, void* dst, size_t dstSize,HUF_decompress1X1_DCtx_wksp464,18436
size_t HUF_decompress4X1_usingDTable(HUF_decompress4X1_usingDTable479,19028
static size_t HUF_decompress4X1_DCtx_wksp_bmi2(HUF_DTable* dctx, void* dst, size_t dstSize,HUF_decompress4X1_DCtx_wksp_bmi2489,19380
size_t HUF_decompress4X1_DCtx_wksp(HUF_DTable* dctx, void* dst, size_t dstSize,HUF_decompress4X1_DCtx_wksp503,19996
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUF_DEltX2;  /* double-symbols decoding */sequence520,20489
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUF_DEltX2;  /* double-symbols decoding */nbBits520,20489
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUF_DEltX2;  /* double-symbols decoding */length520,20489
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUF_DEltX2;  /* double-symbols decoding */HUF_DEltX2520,20489
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;symbol521,20591
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;weight521,20591
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;sortedSymbol_t521,20591
typedef U32 rankValCol_t[HUF_TABLELOG_MAX + 1];rankValCol_t522,20652
typedef rankValCol_t rankVal_t[HUF_TABLELOG_MAX];rankVal_t523,20700
static void HUF_fillDTableX2Level2(HUF_DEltX2* DTable, U32 sizeLog, const U32 consumed,HUF_fillDTableX2Level2528,20859
static void HUF_fillDTableX2(HUF_DEltX2* DTable, const U32 targetLog,HUF_fillDTableX2569,22375
size_t HUF_readDTableX2_wksp(HUF_DTable* DTable,HUF_readDTableX2_wksp611,24140
HUF_decodeSymbolX2(void* op, BIT_DStream_t* DStream, const HUF_DEltX2* dt, const U32 dtLog)HUF_decodeSymbolX2713,28134
HUF_decodeLastSymbolX2(void* op, BIT_DStream_t* DStream, const HUF_DEltX2* dt, const U32 dtLog)HUF_decodeLastSymbolX2722,28442
#define HUF_DECODE_SYMBOLX2_0(HUF_DECODE_SYMBOLX2_0737,29164
#define HUF_DECODE_SYMBOLX2_1(HUF_DECODE_SYMBOLX2_1740,29272
#define HUF_DECODE_SYMBOLX2_2(HUF_DECODE_SYMBOLX2_2744,29434
HUF_decodeStreamX2(BYTE* p, BIT_DStream_t* bitDPtr, BYTE* const pEnd,HUF_decodeStreamX2749,29589
HUF_decompress1X2_usingDTable_internal_body(HUF_decompress1X2_usingDTable_internal_body776,30516
HUF_decompress4X2_usingDTable_internal_body(HUF_decompress4X2_usingDTable_internal_body803,31320
HUF_DGEN(HUF_decompress1X2_usingDTable_internal)HUF_DGEN917,36581
size_t HUF_decompress1X2_DCtx_wksp(HUF_DTable* DCtx, void* dst, size_t dstSize,HUF_decompress1X2_DCtx_wksp930,37032
size_t HUF_decompress4X2_usingDTable(HUF_decompress4X2_usingDTable946,37671
static size_t HUF_decompress4X2_DCtx_wksp_bmi2(HUF_DTable* dctx, void* dst, size_t dstSize,HUF_decompress4X2_DCtx_wksp_bmi2956,38023
size_t HUF_decompress4X2_DCtx_wksp(HUF_DTable* dctx, void* dst, size_t dstSize,HUF_decompress4X2_DCtx_wksp971,38663
size_t HUF_decompress1X_usingDTable(void* dst, size_t maxDstSize,HUF_decompress1X_usingDTable986,39164
size_t HUF_decompress4X_usingDTable(void* dst, size_t maxDstSize,HUF_decompress4X_usingDTable1005,40062
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;tableTime1026,41036
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;decode256Time1026,41036
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;algo_time_t1026,41036
static const algo_time_t algoTime[16 /* Quantization */][3 /* single, double, quad */] =algoTime1027,41102
U32 HUF_selectDecoder (size_t dstSize, size_t cSrcSize)HUF_selectDecoder1054,42485
size_t HUF_decompress4X_hufOnly_wksp(HUF_DTable* dctx, void* dst,HUF_decompress4X_hufOnly_wksp1079,43303
size_t HUF_decompress1X_DCtx_wksp(HUF_DTable* dctx, void* dst, size_t dstSize,HUF_decompress1X_DCtx_wksp1105,44423
size_t HUF_decompress1X_usingDTable_bmi2(void* dst, size_t maxDstSize, const void* cSrc, size_t cSrcSize, const HUF_DTable* DTable, int bmi2)HUF_decompress1X_usingDTable_bmi21136,45826
size_t HUF_decompress1X1_DCtx_wksp_bmi2(HUF_DTable* dctx, void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize, void* workSpace, size_t wkspSize, int bmi2)HUF_decompress1X1_DCtx_wksp_bmi21154,46667
size_t HUF_decompress4X_usingDTable_bmi2(void* dst, size_t maxDstSize, const void* cSrc, size_t cSrcSize, const HUF_DTable* DTable, int bmi2)HUF_decompress4X_usingDTable_bmi21167,47213
size_t HUF_decompress4X_hufOnly_wksp_bmi2(HUF_DTable* dctx, void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize, void* workSpace, size_t wkspSize, int bmi2)HUF_decompress4X_hufOnly_wksp_bmi21184,48022
size_t HUF_readDTableX1(HUF_DTable* DTable, const void* src, size_t srcSize)HUF_readDTableX11208,49128
size_t HUF_decompress1X1_DCtx(HUF_DTable* DCtx, void* dst, size_t dstSize,HUF_decompress1X1_DCtx1215,49383
size_t HUF_decompress1X1 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress1X11223,49727
size_t HUF_readDTableX2(HUF_DTable* DTable, const void* src, size_t srcSize)HUF_readDTableX21231,49991
size_t HUF_decompress1X2_DCtx(HUF_DTable* DCtx, void* dst, size_t dstSize,HUF_decompress1X2_DCtx1238,50240
size_t HUF_decompress1X2 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress1X21246,50584
size_t HUF_decompress4X1_DCtx (HUF_DTable* dctx, void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress4X1_DCtx1254,50847
size_t HUF_decompress4X1 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress4X11260,51161
size_t HUF_decompress4X2_DCtx(HUF_DTable* dctx, void* dst, size_t dstSize,HUF_decompress4X2_DCtx1268,51424
size_t HUF_decompress4X2 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress4X21276,51768
typedef size_t (*decompressionAlgo)(void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize);decompressionAlgo1283,51999
size_t HUF_decompress (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress1285,52099
size_t HUF_decompress4X_DCtx (HUF_DTable* dctx, void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress4X_DCtx1312,53189
size_t HUF_decompress4X_hufOnly(HUF_DTable* dctx, void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress4X_hufOnly1336,54255
size_t HUF_decompress1X_DCtx(HUF_DTable* dctx, void* dst, size_t dstSize,HUF_decompress1X_DCtx1343,54575

zstd_double_fast.c,574
void ZSTD_fillDoubleHashTable(ZSTD_matchState_t* ms,ZSTD_fillDoubleHashTable15,454
size_t ZSTD_compressBlock_doubleFast_generic(ZSTD_compressBlock_doubleFast_generic51,1880
size_t ZSTD_compressBlock_doubleFast(ZSTD_compressBlock_doubleFast319,15107
size_t ZSTD_compressBlock_doubleFast_dictMatchState(ZSTD_compressBlock_doubleFast_dictMatchState339,15837
static size_t ZSTD_compressBlock_doubleFast_extDict_generic(ZSTD_compressBlock_doubleFast_extDict_generic359,16614
size_t ZSTD_compressBlock_doubleFast_extDict(ZSTD_compressBlock_doubleFast_extDict504,24588

zstd_fast.c,605
void ZSTD_fillHashTable(ZSTD_matchState_t* ms,ZSTD_fillHashTable15,494
ZSTD_compressBlock_fast_generic(ZSTD_compressBlock_fast_generic47,1798
size_t ZSTD_compressBlock_fast(ZSTD_compressBlock_fast186,7489
size_t ZSTD_compressBlock_fast_dictMatchState_generic(ZSTD_compressBlock_fast_dictMatchState_generic207,8198
size_t ZSTD_compressBlock_fast_dictMatchState(ZSTD_compressBlock_fast_dictMatchState354,15405
static size_t ZSTD_compressBlock_fast_extDict_generic(ZSTD_compressBlock_fast_extDict_generic375,16168
size_t ZSTD_compressBlock_fast_extDict(ZSTD_compressBlock_fast_extDict479,21649

error_private.h,785
#define ERROR_H_MODULEERROR_H_MODULE14,483
#  define ERR_STATIC ERR_STATIC32,873
#  define ERR_STATIC ERR_STATIC34,1028
#  define ERR_STATIC ERR_STATIC36,1087
#  define ERR_STATIC ERR_STATIC38,1130
typedef ZSTD_ErrorCode ERR_enum;ERR_enum45,1389
#define PREFIX(PREFIX46,1422
#undef ERROR ERROR52,1575
#define ERROR(ERROR53,1629
#define ZSTD_ERROR(ZSTD_ERROR54,1666
ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }ERR_isError56,1716
ERR_STATIC ERR_enum ERR_getErrorCode(size_t code) { if (!ERR_isError(code)) return (ERR_enum)0; return (ERR_enum) (0-code); }ERR_getErrorCode58,1798
#define CHECK_V_F(CHECK_V_F61,1960
#define CHECK_F(CHECK_F62,2033
ERR_STATIC const char* ERR_getErrorName(size_t code)ERR_getErrorName71,2264

zstd_opt.h,37
#define ZSTD_OPT_HZSTD_OPT_H12,405

zstd_cwksp.h,3868
#define ZSTD_CWKSP_HZSTD_CWKSP_H12,407
#define ZSTD_CWKSP_ASAN_REDZONE_SIZE ZSTD_CWKSP_ASAN_REDZONE_SIZE35,1078
    ZSTD_cwksp_alloc_objects,ZSTD_cwksp_alloc_objects42,1238
    ZSTD_cwksp_alloc_buffers,ZSTD_cwksp_alloc_buffers43,1268
    ZSTD_cwksp_alloc_alignedZSTD_cwksp_alloc_aligned44,1298
} ZSTD_cwksp_alloc_phase_e;ZSTD_cwksp_alloc_phase_e45,1327
    ZSTD_cwksp_dynamic_alloc,ZSTD_cwksp_dynamic_alloc53,1579
    ZSTD_cwksp_static_allocZSTD_cwksp_static_alloc54,1609
} ZSTD_cwksp_static_alloc_e;ZSTD_cwksp_static_alloc_e55,1637
    void* workspace;workspace142,5441
    void* workspaceEnd;workspaceEnd143,5462
    void* objectEnd;objectEnd145,5487
    void* tableEnd;tableEnd146,5508
    void* tableValidEnd;tableValidEnd147,5528
    void* allocStart;allocStart148,5553
    BYTE allocFailed;allocFailed150,5576
    int workspaceOversizedDuration;workspaceOversizedDuration151,5598
    ZSTD_cwksp_alloc_phase_e phase;phase152,5634
    ZSTD_cwksp_static_alloc_e isStatic;isStatic153,5670
} ZSTD_cwksp;ZSTD_cwksp154,5710
MEM_STATIC void ZSTD_cwksp_assert_internal_consistency(ZSTD_cwksp* ws) {ZSTD_cwksp_assert_internal_consistency162,5884
MEM_STATIC size_t ZSTD_cwksp_align(size_t size, size_t const align) {ZSTD_cwksp_align175,6289
MEM_STATIC size_t ZSTD_cwksp_alloc_size(size_t size) {ZSTD_cwksp_alloc_size191,6902
MEM_STATIC void ZSTD_cwksp_internal_advance_phase(ZSTD_cwksp_internal_advance_phase201,7152
MEM_STATIC int ZSTD_cwksp_owns_buffer(const ZSTD_cwksp* ws, const void* ptr) {ZSTD_cwksp_owns_buffer230,8474
MEM_STATIC void* ZSTD_cwksp_reserve_internal(ZSTD_cwksp_reserve_internal237,8688
MEM_STATIC BYTE* ZSTD_cwksp_reserve_buffer(ZSTD_cwksp* ws, size_t bytes) {ZSTD_cwksp_reserve_buffer281,10027
MEM_STATIC void* ZSTD_cwksp_reserve_aligned(ZSTD_cwksp* ws, size_t bytes) {ZSTD_cwksp_reserve_aligned288,10270
MEM_STATIC void* ZSTD_cwksp_reserve_table(ZSTD_cwksp* ws, size_t bytes) {ZSTD_cwksp_reserve_table298,10679
MEM_STATIC void* ZSTD_cwksp_reserve_object(ZSTD_cwksp* ws, size_t bytes) {ZSTD_cwksp_reserve_object329,11634
MEM_STATIC void ZSTD_cwksp_mark_tables_dirty(ZSTD_cwksp* ws) {ZSTD_cwksp_mark_tables_dirty367,13050
MEM_STATIC void ZSTD_cwksp_mark_tables_clean(ZSTD_cwksp* ws) {ZSTD_cwksp_mark_tables_clean387,13823
MEM_STATIC void ZSTD_cwksp_clean_tables(ZSTD_cwksp* ws) {ZSTD_cwksp_clean_tables400,14257
MEM_STATIC void ZSTD_cwksp_clear_tables(ZSTD_cwksp* ws) {ZSTD_cwksp_clear_tables414,14726
MEM_STATIC void ZSTD_cwksp_clear(ZSTD_cwksp* ws) {ZSTD_cwksp_clear436,15502
MEM_STATIC void ZSTD_cwksp_init(ZSTD_cwksp* ws, void* start, size_t size, ZSTD_cwksp_static_alloc_e isStatic) {ZSTD_cwksp_init475,17025
MEM_STATIC size_t ZSTD_cwksp_create(ZSTD_cwksp* ws, size_t size, ZSTD_customMem customMem) {ZSTD_cwksp_create489,17622
MEM_STATIC void ZSTD_cwksp_free(ZSTD_cwksp* ws, ZSTD_customMem customMem) {ZSTD_cwksp_free497,18005
MEM_STATIC void ZSTD_cwksp_move(ZSTD_cwksp* dst, ZSTD_cwksp* src) {ZSTD_cwksp_move508,18410
MEM_STATIC size_t ZSTD_cwksp_sizeof(const ZSTD_cwksp* ws) {ZSTD_cwksp_sizeof513,18543
MEM_STATIC size_t ZSTD_cwksp_used(const ZSTD_cwksp* ws) {ZSTD_cwksp_used517,18675
MEM_STATIC int ZSTD_cwksp_reserve_failed(const ZSTD_cwksp* ws) {ZSTD_cwksp_reserve_failed522,18870
MEM_STATIC size_t ZSTD_cwksp_available_space(ZSTD_cwksp* ws) {ZSTD_cwksp_available_space530,19082
MEM_STATIC int ZSTD_cwksp_check_available(ZSTD_cwksp* ws, size_t additionalNeededSpace) {ZSTD_cwksp_check_available534,19214
MEM_STATIC int ZSTD_cwksp_check_too_large(ZSTD_cwksp* ws, size_t additionalNeededSpace) {ZSTD_cwksp_check_too_large538,19375
MEM_STATIC int ZSTD_cwksp_check_wasteful(ZSTD_cwksp* ws, size_t additionalNeededSpace) {ZSTD_cwksp_check_wasteful543,19575
MEM_STATIC void ZSTD_cwksp_bump_oversized_duration(ZSTD_cwksp_bump_oversized_duration548,19812

zstd_v06.c,29690
#define MEM_H_MODULEMEM_H_MODULE56,2398
#  define MEM_STATIC MEM_STATIC71,2739
#  define MEM_STATIC MEM_STATIC73,2894
#  define MEM_STATIC MEM_STATIC75,2953
#  define MEM_STATIC MEM_STATIC77,2996
  typedef  uint8_t BYTE;BYTE90,3501
  typedef uint16_t U16;U1691,3526
  typedef  int16_t S16;S1692,3550
  typedef uint32_t U32;U3293,3574
  typedef  int32_t S32;S3294,3598
  typedef uint64_t U64;U6495,3622
  typedef  int64_t S64;S6496,3646
  typedef unsigned char       BYTE;BYTE98,3676
  typedef unsigned short      U16;U1699,3712
  typedef   signed short      S16;S16100,3747
  typedef unsigned int        U32;U32101,3782
  typedef   signed int        S32;S32102,3817
  typedef unsigned long long  U64;U64103,3852
  typedef   signed long long  S64;S64104,3887
#    define MEM_FORCE_MEMORY_ACCESS MEM_FORCE_MEMORY_ACCESS126,5352
#    define MEM_FORCE_MEMORY_ACCESS MEM_FORCE_MEMORY_ACCESS129,5615
MEM_STATIC unsigned MEM_32bits(void) { return sizeof(size_t)==4; }MEM_32bits133,5670
MEM_STATIC unsigned MEM_64bits(void) { return sizeof(size_t)==8; }MEM_64bits134,5737
MEM_STATIC unsigned MEM_isLittleEndian(void)MEM_isLittleEndian136,5805
MEM_STATIC U16 MEM_read16(const void* memPtr) { return *(const U16*) memPtr; }MEM_read16146,6184
MEM_STATIC U32 MEM_read32(const void* memPtr) { return *(const U32*) memPtr; }MEM_read32147,6263
MEM_STATIC U64 MEM_read64(const void* memPtr) { return *(const U64*) memPtr; }MEM_read64148,6342
MEM_STATIC void MEM_write16(void* memPtr, U16 value) { *(U16*)memPtr = value; }MEM_write16150,6422
typedef union { U16 u16; U32 u32; U64 u64; size_t st; } __attribute__((packed)) unalign;u16156,6729
typedef union { U16 u16; U32 u32; U64 u64; size_t st; } __attribute__((packed)) unalign;u32156,6729
typedef union { U16 u16; U32 u32; U64 u64; size_t st; } __attribute__((packed)) unalign;u64156,6729
typedef union { U16 u16; U32 u32; U64 u64; size_t st; } __attribute__((packed)) unalign;st156,6729
typedef union { U16 u16; U32 u32; U64 u64; size_t st; } __attribute__((packed)) unalign;unalign156,6729
MEM_STATIC U16 MEM_read16(const void* ptr) { return ((const unalign*)ptr)->u16; }MEM_read16158,6819
MEM_STATIC U32 MEM_read32(const void* ptr) { return ((const unalign*)ptr)->u32; }MEM_read32159,6901
MEM_STATIC U64 MEM_read64(const void* ptr) { return ((const unalign*)ptr)->u64; }MEM_read64160,6983
MEM_STATIC void MEM_write16(void* memPtr, U16 value) { ((unalign*)memPtr)->u16 = value; }MEM_write16162,7066
MEM_STATIC U16 MEM_read16(const void* memPtr)MEM_read16169,7236
MEM_STATIC U32 MEM_read32(const void* memPtr)MEM_read32174,7347
MEM_STATIC U64 MEM_read64(const void* memPtr)MEM_read64179,7458
MEM_STATIC void MEM_write16(void* memPtr, U16 value)MEM_write16184,7569
MEM_STATIC U32 MEM_swap32(U32 in)MEM_swap32192,7709
MEM_STATIC U64 MEM_swap64(U64 in)MEM_swap64206,8105
MEM_STATIC U16 MEM_readLE16(const void* memPtr)MEM_readLE16227,8778
MEM_STATIC void MEM_writeLE16(void* memPtr, U16 val)MEM_writeLE16237,8998
MEM_STATIC U32 MEM_readLE32(const void* memPtr)MEM_readLE32248,9231
MEM_STATIC U64 MEM_readLE64(const void* memPtr)MEM_readLE64257,9406
MEM_STATIC size_t MEM_readLEST(const void* memPtr)MEM_readLEST266,9581
#define ZSTDv06_STATIC_HZSTDv06_STATIC_H314,11445
#define ZSTDv06_FRAMEHEADERSIZE_MAX ZSTDv06_FRAMEHEADERSIZE_MAX341,12563
static const size_t ZSTDv06_frameHeaderSize_min = 5;ZSTDv06_frameHeaderSize_min342,12633
static const size_t ZSTDv06_frameHeaderSize_max = ZSTDv06_FRAMEHEADERSIZE_MAX;ZSTDv06_frameHeaderSize_max343,12686
#define ZSTDv06_BLOCKSIZE_MAX ZSTDv06_BLOCKSIZE_MAX403,16239
#define ZSTDv06_CCOMMON_H_MODULEZSTDv06_CCOMMON_H_MODULE445,18148
#define MIN(MIN451,18282
#define MAX(MAX452,18321
#define ZSTDv06_DICT_MAGIC ZSTDv06_DICT_MAGIC458,18464
#define ZSTDv06_REP_NUM ZSTDv06_REP_NUM460,18504
#define ZSTDv06_REP_INIT ZSTDv06_REP_INIT461,18533
#define ZSTDv06_REP_MOVE ZSTDv06_REP_MOVE462,18576
#define KB KB464,18624
#define MB MB465,18645
#define GB GB466,18666
#define BIT7 BIT7468,18688
#define BIT6 BIT6469,18705
#define BIT5 BIT5470,18722
#define BIT4 BIT4471,18739
#define BIT1 BIT1472,18756
#define BIT0 BIT0473,18773
#define ZSTDv06_WINDOWLOG_ABSOLUTEMIN ZSTDv06_WINDOWLOG_ABSOLUTEMIN475,18791
static const size_t ZSTDv06_fcs_fieldSize[4] = { 0, 1, 2, 8 };ZSTDv06_fcs_fieldSize476,18832
#define ZSTDv06_BLOCKHEADERSIZE ZSTDv06_BLOCKHEADERSIZE478,18896
static const size_t ZSTDv06_blockHeaderSize = ZSTDv06_BLOCKHEADERSIZE;ZSTDv06_blockHeaderSize479,19048
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_compressed480,19119
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_raw480,19119
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_rle480,19119
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_end480,19119
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;blockType_t480,19119
#define MIN_SEQUENCES_SIZE MIN_SEQUENCES_SIZE482,19188
#define MIN_CBLOCK_SIZE MIN_CBLOCK_SIZE483,19232
#define HufLog HufLog485,19360
#define IS_HUF IS_HUF487,19379
#define IS_PCH IS_PCH488,19396
#define IS_RAW IS_RAW489,19413
#define IS_RLE IS_RLE490,19430
#define LONGNBSEQ LONGNBSEQ492,19448
#define MINMATCH MINMATCH494,19474
#define EQUAL_READ32 EQUAL_READ32495,19493
#define REPCODE_STARTVALUE REPCODE_STARTVALUE496,19516
#define Litbits Litbits498,19546
#define MaxLit MaxLit499,19565
#define MaxML MaxML500,19599
#define MaxLL MaxLL501,19617
#define MaxOff MaxOff502,19635
#define MaxSeq MaxSeq503,19653
#define MLFSELog MLFSELog504,19728
#define LLFSELog LLFSELog505,19750
#define OffFSELog OffFSELog506,19772
#define FSEv06_ENCODING_RAW FSEv06_ENCODING_RAW508,19795
#define FSEv06_ENCODING_RLE FSEv06_ENCODING_RLE509,19829
#define FSEv06_ENCODING_STATIC FSEv06_ENCODING_STATIC510,19863
#define FSEv06_ENCODING_DYNAMIC FSEv06_ENCODING_DYNAMIC511,19897
#define ZSTD_CONTENTSIZE_ERROR ZSTD_CONTENTSIZE_ERROR513,19932
static const U32 LL_bits[MaxLL+1] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,LL_bits515,19977
static const S16 LL_defaultNorm[MaxLL+1] = { 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1,LL_defaultNorm518,20201
static const U32 LL_defaultNormLog = 6;LL_defaultNormLog521,20446
static const U32 ML_bits[MaxML+1] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,ML_bits523,20487
static const S16 ML_defaultNorm[MaxML+1] = { 1, 4, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1,ML_defaultNorm527,20800
static const U32 ML_defaultNormLog = 6;ML_defaultNormLog531,21141
static const S16 OF_defaultNorm[MaxOff+1] = { 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1,OF_defaultNorm533,21182
static const U32 OF_defaultNormLog = 5;OF_defaultNormLog535,21363
static void ZSTDv06_copy8(void* dst, const void* src) { memcpy(dst, src, 8); }ZSTDv06_copy8541,21543
#define COPY8(COPY8542,21622
#define WILDCOPY_OVERLENGTH WILDCOPY_OVERLENGTH546,21793
MEM_STATIC void ZSTDv06_wildcopy(void* dst, const void* src, ptrdiff_t length)ZSTDv06_wildcopy547,21823
    U32 off;off563,22196
    U32 len;len564,22209
} ZSTDv06_match_t;ZSTDv06_match_t565,22222
    U32 price;price568,22259
    U32 off;off569,22274
    U32 mlen;mlen570,22287
    U32 litlen;litlen571,22301
    U32 rep[ZSTDv06_REP_INIT];rep572,22317
} ZSTDv06_optimal_t;ZSTDv06_optimal_t573,22348
typedef struct { U32  unused; } ZSTDv06_stats_t;unused575,22370
typedef struct { U32  unused; } ZSTDv06_stats_t;ZSTDv06_stats_t575,22370
    void* buffer;buffer578,22437
    U32*  offsetStart;offsetStart579,22455
    U32*  offset;offset580,22478
    BYTE* offCodeStart;offCodeStart581,22496
    BYTE* litStart;litStart582,22520
    BYTE* lit;lit583,22540
    U16*  litLengthStart;litLengthStart584,22555
    U16*  litLength;litLength585,22581
    BYTE* llCodeStart;llCodeStart586,22602
    U16*  matchLengthStart;matchLengthStart587,22625
    U16*  matchLength;matchLength588,22653
    BYTE* mlCodeStart;mlCodeStart589,22676
    U32   longLengthID;   /* 0 == no longLength; 1 == Lit.longLength; 2 == Match.longLength; */longLengthID590,22699
    U32   longLengthPos;longLengthPos591,22795
    ZSTDv06_optimal_t* priceTable;priceTable593,22834
    ZSTDv06_match_t* matchTable;matchTable594,22869
    U32* matchLengthFreq;matchLengthFreq595,22902
    U32* litLengthFreq;litLengthFreq596,22928
    U32* litFreq;litFreq597,22952
    U32* offCodeFreq;offCodeFreq598,22970
    U32  matchLengthSum;matchLengthSum599,22992
    U32  matchSum;matchSum600,23017
    U32  litLengthSum;litLengthSum601,23036
    U32  litSum;litSum602,23059
    U32  offCodeSum;offCodeSum603,23076
    U32  log2matchLengthSum;log2matchLengthSum604,23097
    U32  log2matchSum;log2matchSum605,23126
    U32  log2litLengthSum;log2litLengthSum606,23149
    U32  log2litSum;log2litSum607,23176
    U32  log2offCodeSum;log2offCodeSum608,23197
    U32  factor;factor609,23222
    U32  cachedPrice;cachedPrice610,23239
    U32  cachedLitLength;cachedLitLength611,23261
    const BYTE* cachedLiterals;cachedLiterals612,23287
    ZSTDv06_stats_t stats;stats613,23319
} seqStore_t;seqStore_t614,23346
#define FSEv06_HFSEv06_H654,25233
typedef unsigned FSEv06_DTable;   /* don't allocate that. It's just a way to be more restrictive than void* */FSEv06_DTable717,27620
#define BITSTREAM_H_MODULEBITSTREAM_H_MODULE802,32105
    size_t   bitContainer;bitContainer830,32787
    unsigned bitsConsumed;bitsConsumed831,32814
    const char* ptr;ptr832,32841
    const char* start;start833,32862
} BITv06_DStream_t;BITv06_DStream_t834,32885
typedef enum { BITv06_DStream_unfinished = 0,BITv06_DStream_unfinished836,32906
               BITv06_DStream_endOfBuffer = 1,BITv06_DStream_endOfBuffer837,32952
               BITv06_DStream_completed = 2,BITv06_DStream_completed838,32999
               BITv06_DStream_overflow = 3 } BITv06_DStream_status;  /* result of BITv06_reloadDStream() */BITv06_DStream_overflow839,33044
               BITv06_DStream_overflow = 3 } BITv06_DStream_status;  /* result of BITv06_reloadDStream() */BITv06_DStream_status839,33044
MEM_STATIC unsigned BITv06_highbit32 ( U32 val)BITv06_highbit32860,33980
MEM_STATIC size_t BITv06_initDStream(BITv06_DStream_t* bitD, const void* srcBuffer, size_t srcSize)BITv06_initDStream893,35092
 MEM_STATIC size_t BITv06_lookBits(const BITv06_DStream_t* bitD, U32 nbBits)BITv06_lookBits928,37039
MEM_STATIC size_t BITv06_lookBitsFast(const BITv06_DStream_t* bitD, U32 nbBits)BITv06_lookBitsFast936,37367
MEM_STATIC void BITv06_skipBits(BITv06_DStream_t* bitD, U32 nbBits)BITv06_skipBits942,37613
MEM_STATIC size_t BITv06_readBits(BITv06_DStream_t* bitD, U32 nbBits)BITv06_readBits947,37720
MEM_STATIC size_t BITv06_readBitsFast(BITv06_DStream_t* bitD, U32 nbBits)BITv06_readBitsFast956,37986
MEM_STATIC BITv06_DStream_status BITv06_reloadDStream(BITv06_DStream_t* bitD)BITv06_reloadDStream963,38178
MEM_STATIC unsigned BITv06_endOfDStream(const BITv06_DStream_t* DStream)BITv06_endOfDStream994,39416
#define FSEv06_STATIC_HFSEv06_STATIC_H1039,41504
#define FSEv06_NCOUNTBOUND FSEv06_NCOUNTBOUND1050,41712
#define FSEv06_BLOCKBOUND(FSEv06_BLOCKBOUND1051,41743
#define FSEv06_COMPRESSBOUND(FSEv06_COMPRESSBOUND1052,41794
#define FSEv06_DTABLE_SIZE_U32(FSEv06_DTABLE_SIZE_U321055,42033
    size_t      state;state1076,42921
    const void* table;   /* precise table may vary, depending on U16 */table1077,42944
} FSEv06_DState_t;FSEv06_DState_t1078,43016
    U16 tableLog;tableLog1101,43735
    U16 fastMode;fastMode1102,43753
} FSEv06_DTableHeader;   /* sizeof U32 */FSEv06_DTableHeader1103,43771
    unsigned short newState;newState1107,43831
    unsigned char  symbol;symbol1108,43860
    unsigned char  nbBits;nbBits1109,43887
} FSEv06_decode_t;   /* size == U32 */FSEv06_decode_t1110,43914
MEM_STATIC void FSEv06_initDState(FSEv06_DState_t* DStatePtr, BITv06_DStream_t* bitD, const FSEv06_DTable* dt)FSEv06_initDState1112,43954
MEM_STATIC BYTE FSEv06_peekSymbol(const FSEv06_DState_t* DStatePtr)FSEv06_peekSymbol1121,44304
MEM_STATIC void FSEv06_updateState(FSEv06_DState_t* DStatePtr, BITv06_DStream_t* bitD)FSEv06_updateState1127,44500
MEM_STATIC BYTE FSEv06_decodeSymbol(FSEv06_DState_t* DStatePtr, BITv06_DStream_t* bitD)FSEv06_decodeSymbol1135,44834
MEM_STATIC BYTE FSEv06_decodeSymbolFast(FSEv06_DState_t* DStatePtr, BITv06_DStream_t* bitD)FSEv06_decodeSymbolFast1148,45322
#define FSEv06_MAX_MEMORY_USAGE FSEv06_MAX_MEMORY_USAGE1171,46235
#define FSEv06_DEFAULT_MEMORY_USAGE FSEv06_DEFAULT_MEMORY_USAGE1172,46270
#define FSEv06_MAX_SYMBOL_VALUE FSEv06_MAX_SYMBOL_VALUE1177,46418
#define FSEv06_FUNCTION_TYPE FSEv06_FUNCTION_TYPE1183,46624
#define FSEv06_FUNCTION_EXTENSIONFSEv06_FUNCTION_EXTENSION1184,46658
#define FSEv06_DECODE_TYPE FSEv06_DECODE_TYPE1185,46692
#define FSEv06_MAX_TABLELOG FSEv06_MAX_TABLELOG1194,46925
#define FSEv06_MAX_TABLESIZE FSEv06_MAX_TABLESIZE1195,46982
#define FSEv06_MAXTABLESIZE_MASK FSEv06_MAXTABLESIZE_MASK1196,47037
#define FSEv06_DEFAULT_TABLELOG FSEv06_DEFAULT_TABLELOG1197,47095
#define FSEv06_MIN_TABLELOG FSEv06_MIN_TABLELOG1198,47159
#define FSEv06_TABLELOG_ABSOLUTE_MAX FSEv06_TABLELOG_ABSOLUTE_MAX1200,47190
#define FSEv06_TABLESTEP(FSEv06_TABLESTEP1205,47370
unsigned FSEv06_isError(size_t code) { return ERR_isError(code); }FSEv06_isError1251,49361
const char* FSEv06_getErrorName(size_t code) { return ERR_getErrorName(code); }FSEv06_getErrorName1253,49429
static unsigned HUFv06_isError(size_t code) { return ERR_isError(code); }HUFv06_isError1259,49667
static short FSEv06_abs(short a) { return a<0 ? -a : a; }FSEv06_abs1265,49907
size_t FSEv06_readNCount (short* normalizedCounter, unsigned* maxSVPtr, unsigned* tableLogPtr,FSEv06_readNCount1267,49966
#  define FORCE_INLINE FORCE_INLINE1397,55084
#      define FORCE_INLINE FORCE_INLINE1404,55497
#      define FORCE_INLINE FORCE_INLINE1406,55579
#    define FORCE_INLINE FORCE_INLINE1409,55639
#define FSEv06_isError FSEv06_isError1417,55864
#define FSEv06_STATIC_ASSERT(FSEv06_STATIC_ASSERT1418,55899
typedef U32 DTable_max_t[FSEv06_DTABLE_SIZE_U32(FSEv06_MAX_TABLELOG)];DTable_max_t1424,56181
#define FSEv06_CAT(FSEv06_CAT1445,56784
#define FSEv06_FUNCTION_NAME(FSEv06_FUNCTION_NAME1446,56813
#define FSEv06_TYPE_NAME(FSEv06_TYPE_NAME1447,56863
FSEv06_DTable* FSEv06_createDTable (unsigned tableLog)FSEv06_createDTable1451,56936
void FSEv06_freeDTable (FSEv06_DTable* dt)FSEv06_freeDTable1457,57172
size_t FSEv06_buildDTable(FSEv06_DTable* dt, const short* normalizedCounter, unsigned maxSymbolValue, unsigned tableLog)FSEv06_buildDTable1462,57234
size_t FSEv06_buildDTable_rle (FSEv06_DTable* dt, BYTE symbolValue)FSEv06_buildDTable_rle1527,59837
size_t FSEv06_buildDTable_raw (FSEv06_DTable* dt, unsigned nbBits)FSEv06_buildDTable_raw1545,60231
FORCE_INLINE size_t FSEv06_decompress_usingDTable_generic(FSEv06_decompress_usingDTable_generic1571,60967
#define FSEv06_GETSYMBOL(FSEv06_GETSYMBOL1592,61658
size_t FSEv06_decompress_usingDTable(void* dst, size_t originalSize,FSEv06_decompress_usingDTable1639,63242
size_t FSEv06_decompress(void* dst, size_t maxDstSize, const void* cSrc, size_t cSrcSize)FSEv06_decompress1653,63812
#define HUFv06_HHUFv06_H1715,66760
#define HUFv06_STATIC_HHUFv06_STATIC_H1785,69634
#define HUFv06_CTABLEBOUND HUFv06_CTABLEBOUND1796,69840
#define HUFv06_BLOCKBOUND(HUFv06_BLOCKBOUND1797,69871
#define HUFv06_COMPRESSBOUND(HUFv06_COMPRESSBOUND1798,69995
#define HUFv06_DTABLE_SIZE(HUFv06_DTABLE_SIZE1801,70170
#define HUFv06_CREATE_STATIC_DTABLEX2(HUFv06_CREATE_STATIC_DTABLEX21802,70235
#define HUFv06_CREATE_STATIC_DTABLEX4(HUFv06_CREATE_STATIC_DTABLEX41804,70377
#define HUFv06_CREATE_STATIC_DTABLEX6(HUFv06_CREATE_STATIC_DTABLEX61806,70517
#define HUFv06_ABSOLUTEMAX_TABLELOG HUFv06_ABSOLUTEMAX_TABLELOG1843,72432
#define HUFv06_MAX_TABLELOG HUFv06_MAX_TABLELOG1844,72557
#define HUFv06_DEFAULT_TABLELOG HUFv06_DEFAULT_TABLELOG1845,72704
#define HUFv06_MAX_SYMBOL_VALUE HUFv06_MAX_SYMBOL_VALUE1846,72805
MEM_STATIC size_t HUFv06_readStats(BYTE* huffWeight, size_t hwSize, U32* rankStats,HUFv06_readStats1858,73118
#  define inline inline1974,78237
#  define inline inline1976,78269
#define HUFv06_STATIC_ASSERT(HUFv06_STATIC_ASSERT1989,78615
typedef struct { BYTE byte; BYTE nbBits; } HUFv06_DEltX2;   /* single-symbol decoding */byte1996,78904
typedef struct { BYTE byte; BYTE nbBits; } HUFv06_DEltX2;   /* single-symbol decoding */nbBits1996,78904
typedef struct { BYTE byte; BYTE nbBits; } HUFv06_DEltX2;   /* single-symbol decoding */HUFv06_DEltX21996,78904
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUFv06_DEltX4;  /* double-symbols decoding */sequence1998,78994
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUFv06_DEltX4;  /* double-symbols decoding */nbBits1998,78994
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUFv06_DEltX4;  /* double-symbols decoding */length1998,78994
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUFv06_DEltX4;  /* double-symbols decoding */HUFv06_DEltX41998,78994
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;symbol2000,79100
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;weight2000,79100
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;sortedSymbol_t2000,79100
size_t HUFv06_readDTableX2 (U16* DTable, const void* src, size_t srcSize)HUFv06_readDTableX22008,79261
static BYTE HUFv06_decodeSymbolX2(BITv06_DStream_t* Dstream, const HUFv06_DEltX2* dt, const U32 dtLog)HUFv06_decodeSymbolX22054,80897
#define HUFv06_DECODE_SYMBOLX2_0(HUFv06_DECODE_SYMBOLX2_02062,81182
#define HUFv06_DECODE_SYMBOLX2_1(HUFv06_DECODE_SYMBOLX2_12065,81293
#define HUFv06_DECODE_SYMBOLX2_2(HUFv06_DECODE_SYMBOLX2_22069,81449
static inline size_t HUFv06_decodeStreamX2(BYTE* p, BITv06_DStream_t* const bitDPtr, BYTE* const pEnd, const HUFv06_DEltX2* const dt, const U32 dtLog)HUFv06_decodeStreamX22073,81576
size_t HUFv06_decompress1X2_usingDTable(HUFv06_decompress1X2_usingDTable2096,82409
size_t HUFv06_decompress1X2 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv06_decompress1X22119,83078
size_t HUFv06_decompress4X2_usingDTable(HUFv06_decompress4X2_usingDTable2134,83600
size_t HUFv06_decompress4X2 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv06_decompress4X22228,87888
static void HUFv06_fillDTableX4Level2(HUFv06_DEltX4* DTable, U32 sizeLog, const U32 consumed,HUFv06_fillDTableX4Level22247,88501
typedef U32 rankVal_t[HUFv06_ABSOLUTEMAX_TABLELOG][HUFv06_ABSOLUTEMAX_TABLELOG + 1];rankVal_t2287,89978
static void HUFv06_fillDTableX4(HUFv06_DEltX4* DTable, const U32 targetLog,HUFv06_fillDTableX42289,90064
size_t HUFv06_readDTableX4 (U32* DTable, const void* src, size_t srcSize)HUFv06_readDTableX42331,91847
static U32 HUFv06_decodeSymbolX4(void* op, BITv06_DStream_t* DStream, const HUFv06_DEltX4* dt, const U32 dtLog)HUFv06_decodeSymbolX42408,94816
static U32 HUFv06_decodeLastSymbolX4(void* op, BITv06_DStream_t* DStream, const HUFv06_DEltX4* dt, const U32 dtLog)HUFv06_decodeLastSymbolX42416,95119
#define HUFv06_DECODE_SYMBOLX4_0(HUFv06_DECODE_SYMBOLX4_02431,95852
#define HUFv06_DECODE_SYMBOLX4_1(HUFv06_DECODE_SYMBOLX4_12434,95966
#define HUFv06_DECODE_SYMBOLX4_2(HUFv06_DECODE_SYMBOLX4_22438,96137
static inline size_t HUFv06_decodeStreamX4(BYTE* p, BITv06_DStream_t* bitDPtr, BYTE* const pEnd, const HUFv06_DEltX4* const dt, const U32 dtLog)HUFv06_decodeStreamX42442,96279
size_t HUFv06_decompress1X4_usingDTable(HUFv06_decompress1X4_usingDTable2468,97171
size_t HUFv06_decompress1X4 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv06_decompress1X42496,97975
size_t HUFv06_decompress4X4_usingDTable(HUFv06_decompress4X4_usingDTable2510,98472
size_t HUFv06_decompress4X4 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv06_decompress4X42604,102746
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;tableTime2625,103352
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;decode256Time2625,103352
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;algo_time_t2625,103352
static const algo_time_t algoTime[16 /* Quantization */][3 /* single, double, quad */] =algoTime2626,103418
typedef size_t (*decompressionAlgo)(void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize);decompressionAlgo2647,104572
size_t HUFv06_decompress (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv06_decompress2649,104672
unsigned ZSTDv06_isError(size_t code) { return ERR_isError(code); }ZSTDv06_isError2720,108170
const char* ZSTDv06_getErrorName(size_t code) { return ERR_getErrorName(code); }ZSTDv06_getErrorName2724,108346
unsigned ZBUFFv06_isError(size_t errorCode) { return ERR_isError(errorCode); }ZBUFFv06_isError2730,108587
const char* ZBUFFv06_getErrorName(size_t errorCode) { return ERR_getErrorName(errorCode); }ZBUFFv06_getErrorName2732,108667
#  define ZSTDv06_HEAPMODE ZSTDv06_HEAPMODE2773,110672
#define ZSTDv06_isError ZSTDv06_isError2791,111232
#define FSEv06_isError FSEv06_isError2792,111289
#define HUFv06_isError HUFv06_isError2793,111325
static void ZSTDv06_copy4(void* dst, const void* src) { memcpy(dst, src, 4); }ZSTDv06_copy42799,111503
typedef enum { ZSTDds_getFrameHeaderSize, ZSTDds_decodeFrameHeader,ZSTDds_getFrameHeaderSize2805,111737
typedef enum { ZSTDds_getFrameHeaderSize, ZSTDds_decodeFrameHeader,ZSTDds_decodeFrameHeader2805,111737
               ZSTDds_decodeBlockHeader, ZSTDds_decompressBlock } ZSTDv06_dStage;ZSTDds_decodeBlockHeader2806,111805
               ZSTDds_decodeBlockHeader, ZSTDds_decompressBlock } ZSTDv06_dStage;ZSTDds_decompressBlock2806,111805
               ZSTDds_decodeBlockHeader, ZSTDds_decompressBlock } ZSTDv06_dStage;ZSTDv06_dStage2806,111805
struct ZSTDv06_DCtx_sZSTDv06_DCtx_s2808,111888
    FSEv06_DTable LLTable[FSEv06_DTABLE_SIZE_U32(LLFSELog)];LLTable2810,111912
    FSEv06_DTable OffTable[FSEv06_DTABLE_SIZE_U32(OffFSELog)];OffTable2811,111973
    FSEv06_DTable MLTable[FSEv06_DTABLE_SIZE_U32(MLFSELog)];MLTable2812,112036
    unsigned   hufTableX4[HUFv06_DTABLE_SIZE(HufLog)];hufTableX42813,112097
    const void* previousDstEnd;previousDstEnd2814,112152
    const void* base;base2815,112184
    const void* vBase;vBase2816,112206
    const void* dictEnd;dictEnd2817,112229
    size_t expected;expected2818,112254
    size_t headerSize;headerSize2819,112275
    ZSTDv06_frameParams fParams;fParams2820,112298
    blockType_t bType;   /* used in ZSTDv06_decompressContinue(), to transfer blockType between header decoding and block decoding stages */bType2821,112331
    ZSTDv06_dStage stage;stage2822,112472
    U32 flagRepeatTable;flagRepeatTable2823,112498
    const BYTE* litPtr;litPtr2824,112523
    size_t litSize;litSize2825,112547
    BYTE litBuffer[ZSTDv06_BLOCKSIZE_MAX + WILDCOPY_OVERLENGTH];litBuffer2826,112567
    BYTE headerBuffer[ZSTDv06_FRAMEHEADERSIZE_MAX];headerBuffer2827,112632
size_t ZSTDv06_sizeofDCtx (void) { return sizeof(ZSTDv06_DCtx); }ZSTDv06_sizeofDCtx2831,112803
size_t ZSTDv06_decompressBegin(ZSTDv06_DCtx* dctx)ZSTDv06_decompressBegin2833,112870
ZSTDv06_DCtx* ZSTDv06_createDCtx(void)ZSTDv06_createDCtx2846,113206
size_t ZSTDv06_freeDCtx(ZSTDv06_DCtx* dctx)ZSTDv06_freeDCtx2854,113405
void ZSTDv06_copyDCtx(ZSTDv06_DCtx* dstDCtx, const ZSTDv06_DCtx* srcDCtx)ZSTDv06_copyDCtx2860,113541
static size_t ZSTDv06_frameHeaderSize(const void* src, size_t srcSize)ZSTDv06_frameHeaderSize2971,117079
size_t ZSTDv06_getFrameParams(ZSTDv06_frameParams* fparamsPtr, const void* src, size_t srcSize)ZSTDv06_getFrameParams2984,117649
static size_t ZSTDv06_decodeFrameHeader(ZSTDv06_DCtx* zc, const void* src, size_t srcSize)ZSTDv06_decodeFrameHeader3014,119021
    blockType_t blockType;blockType3024,119332
    U32 origSize;origSize3025,119359
} blockProperties_t;blockProperties_t3026,119377
static size_t ZSTDv06_getcBlockSize(const void* src, size_t srcSize, blockProperties_t* bpPtr)ZSTDv06_getcBlockSize3030,119498
static size_t ZSTDv06_copyRawBlock(void* dst, size_t dstCapacity, const void* src, size_t srcSize)ZSTDv06_copyRawBlock3047,120016
static size_t ZSTDv06_decodeLiteralsBlock(ZSTDv06_DCtx* dctx,ZSTDv06_decodeLiteralsBlock3058,120378
static size_t ZSTDv06_buildSeqTable(FSEv06_DTable* DTable, U32 type, U32 max, U32 maxLog,ZSTDv06_buildSeqTable3192,126208
static size_t ZSTDv06_decodeSeqHeaders(int* nbSeqPtr,ZSTDv06_decodeSeqHeaders3222,127464
    size_t litLength;litLength3274,129594
    size_t matchLength;matchLength3275,129616
    size_t offset;offset3276,129640
} seq_t;seq_t3277,129659
    BITv06_DStream_t DStream;DStream3280,129686
    FSEv06_DState_t stateLL;stateLL3281,129716
    FSEv06_DState_t stateOffb;stateOffb3282,129745
    FSEv06_DState_t stateML;stateML3283,129776
    size_t prevOffset[ZSTDv06_REP_INIT];prevOffset3284,129805
} seqState_t;seqState_t3285,129846
static void ZSTDv06_decodeSequence(seq_t* seq, seqState_t* seqState)ZSTDv06_decodeSequence3289,129863
static size_t ZSTDv06_execSequence(BYTE* op,ZSTDv06_execSequence3365,133452
static size_t ZSTDv06_decompressSequences(ZSTDv06_decompressSequences3441,136572
static void ZSTDv06_checkContinuity(ZSTDv06_DCtx* dctx, const void* dst)ZSTDv06_checkContinuity3518,139717
static size_t ZSTDv06_decompressBlock_internal(ZSTDv06_DCtx* dctx,ZSTDv06_decompressBlock_internal3529,140080
size_t ZSTDv06_decompressBlock(ZSTDv06_DCtx* dctx,ZSTDv06_decompressBlock3547,140725
static size_t ZSTDv06_decompressFrame(ZSTDv06_DCtx* dctx,ZSTDv06_decompressFrame3558,141094
size_t ZSTDv06_decompress_usingPreparedDCtx(ZSTDv06_DCtx* dctx, const ZSTDv06_DCtx* refDCtx,ZSTDv06_decompress_usingPreparedDCtx3621,143397
size_t ZSTDv06_decompress_usingDict(ZSTDv06_DCtx* dctx,ZSTDv06_decompress_usingDict3631,143787
size_t ZSTDv06_decompressDCtx(ZSTDv06_DCtx* dctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize)ZSTDv06_decompressDCtx3642,144222
size_t ZSTDv06_decompress(void* dst, size_t dstCapacity, const void* src, size_t srcSize)ZSTDv06_decompress3648,144430
static void ZSTD_errorFrameSizeInfoLegacy(size_t* cSize, unsigned long long* dBound, size_t ret)ZSTD_errorFrameSizeInfoLegacy3665,145046
void ZSTDv06_findFrameSizeInfoLegacy(const void *src, size_t srcSize, size_t* cSize, unsigned long long* dBound)ZSTDv06_findFrameSizeInfoLegacy3671,145204
size_t ZSTDv06_nextSrcSizeToDecompress(ZSTDv06_DCtx* dctx)ZSTDv06_nextSrcSizeToDecompress3724,147003
size_t ZSTDv06_decompressContinue(ZSTDv06_DCtx* dctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize)ZSTDv06_decompressContinue3729,147094
static void ZSTDv06_refDictContent(ZSTDv06_DCtx* dctx, const void* dict, size_t dictSize)ZSTDv06_refDictContent3803,150102
static size_t ZSTDv06_loadEntropy(ZSTDv06_DCtx* dctx, const void* dict, size_t dictSize)ZSTDv06_loadEntropy3811,150424
static size_t ZSTDv06_decompress_insertDictionary(ZSTDv06_DCtx* dctx, const void* dict, size_t dictSize)ZSTDv06_decompress_insertDictionary3855,152839
size_t ZSTDv06_decompressBegin_usingDict(ZSTDv06_DCtx* dctx, const void* dict, size_t dictSize)ZSTDv06_decompressBegin_usingDict3879,153531
typedef enum { ZBUFFds_init, ZBUFFds_loadHeader,ZBUFFds_init3948,157313
typedef enum { ZBUFFds_init, ZBUFFds_loadHeader,ZBUFFds_loadHeader3948,157313
               ZBUFFds_read, ZBUFFds_load, ZBUFFds_flush } ZBUFFv06_dStage;ZBUFFds_read3949,157362
               ZBUFFds_read, ZBUFFds_load, ZBUFFds_flush } ZBUFFv06_dStage;ZBUFFds_load3949,157362
               ZBUFFds_read, ZBUFFds_load, ZBUFFds_flush } ZBUFFv06_dStage;ZBUFFds_flush3949,157362
               ZBUFFds_read, ZBUFFds_load, ZBUFFds_flush } ZBUFFv06_dStage;ZBUFFv06_dStage3949,157362
struct ZBUFFv06_DCtx_s {ZBUFFv06_DCtx_s3952,157473
    ZSTDv06_DCtx* zd;zd3953,157498
    ZSTDv06_frameParams fParams;fParams3954,157520
    ZBUFFv06_dStage stage;stage3955,157553
    char*  inBuff;inBuff3956,157580
    size_t inBuffSize;inBuffSize3957,157599
    size_t inPos;inPos3958,157622
    char*  outBuff;outBuff3959,157640
    size_t outBuffSize;outBuffSize3960,157660
    size_t outStart;outStart3961,157684
    size_t outEnd;outEnd3962,157705
    size_t blockSize;blockSize3963,157724
    BYTE headerBuffer[ZSTDv06_FRAMEHEADERSIZE_MAX];headerBuffer3964,157746
    size_t lhSize;lhSize3965,157798
ZBUFFv06_DCtx* ZBUFFv06_createDCtx(void)ZBUFFv06_createDCtx3969,157882
size_t ZBUFFv06_freeDCtx(ZBUFFv06_DCtx* zbd)ZBUFFv06_freeDCtx3979,158149
size_t ZBUFFv06_decompressInitDictionary(ZBUFFv06_DCtx* zbd, const void* dict, size_t dictSize)ZBUFFv06_decompressInitDictionary3992,158395
size_t ZBUFFv06_decompressInit(ZBUFFv06_DCtx* zbd)ZBUFFv06_decompressInit3999,158668
MEM_STATIC size_t ZBUFFv06_limitCopy(void* dst, size_t dstCapacity, const void* src, size_t srcSize)ZBUFFv06_limitCopy4006,158786
size_t ZBUFFv06_decompressContinue(ZBUFFv06_DCtx* zbd,ZBUFFv06_decompressContinue4018,159050
size_t ZBUFFv06_recommendedDInSize(void)  { return ZSTDv06_BLOCKSIZE_MAX + ZSTDv06_blockHeaderSize /* block header size*/ ; }ZBUFFv06_recommendedDInSize4157,166004
size_t ZBUFFv06_recommendedDOutSize(void) { return ZSTDv06_BLOCKSIZE_MAX; }ZBUFFv06_recommendedDOutSize4158,166130

fse_decompress.c,2545
#define FSE_STATIC_LINKING_ONLYFSE_STATIC_LINKING_ONLY22,942
#define ZSTD_DEPS_NEED_MALLOCZSTD_DEPS_NEED_MALLOC25,1018
#define FSE_isError FSE_isError32,1225
#define FSE_STATIC_ASSERT(FSE_STATIC_ASSERT33,1257
#define FSE_CAT(FSE_CAT54,1876
#define FSE_FUNCTION_NAME(FSE_FUNCTION_NAME55,1902
#define FSE_TYPE_NAME(FSE_TYPE_NAME56,1946
FSE_DTable* FSE_createDTable (unsigned tableLog)FSE_createDTable60,2013
void FSE_freeDTable (FSE_DTable* dt)FSE_freeDTable66,2236
static size_t FSE_buildDTable_internal(FSE_DTable* dt, const short* normalizedCounter, unsigned maxSymbolValue, unsigned tableLog, void* workSpace, size_t wkspSize)FSE_buildDTable_internal71,2297
size_t FSE_buildDTable_wksp(FSE_DTable* dt, const short* normalizedCounter, unsigned maxSymbolValue, unsigned tableLog, void* workSpace, size_t wkspSize)FSE_buildDTable_wksp176,6855
size_t FSE_buildDTable_rle (FSE_DTable* dt, BYTE symbolValue)FSE_buildDTable_rle187,7301
size_t FSE_buildDTable_raw (FSE_DTable* dt, unsigned nbBits)FSE_buildDTable_raw205,7677
FORCE_INLINE_TEMPLATE size_t FSE_decompress_usingDTable_generic(FSE_decompress_usingDTable_generic231,8395
#define FSE_GETSYMBOL(FSE_GETSYMBOL251,8948
size_t FSE_decompress_usingDTable(void* dst, size_t originalSize,FSE_decompress_usingDTable294,10446
size_t FSE_decompress_wksp(void* dst, size_t dstCapacity, const void* cSrc, size_t cSrcSize, unsigned maxLog, void* workSpace, size_t wkspSize)FSE_decompress_wksp308,10998
FORCE_INLINE_TEMPLATE size_t FSE_decompress_wksp_body(FSE_decompress_wksp_body313,11261
static size_t FSE_decompress_wksp_body_default(void* dst, size_t dstCapacity, const void* cSrc, size_t cSrcSize, unsigned maxLog, void* workSpace, size_t wkspSize)FSE_decompress_wksp_body_default352,12868
TARGET_ATTRIBUTE("bmi2") static size_t FSE_decompress_wksp_body_bmi2(void* dst, size_t dstCapacity, const void* cSrc, size_t cSrcSize, unsigned maxLog, void* workSpace, size_t wkspSize)FSE_decompress_wksp_body_bmi2358,13157
size_t FSE_decompress_wksp_bmi2(void* dst, size_t dstCapacity, const void* cSrc, size_t cSrcSize, unsigned maxLog, void* workSpace, size_t wkspSize, int bmi2)FSE_decompress_wksp_bmi2364,13458
typedef FSE_DTable DTable_max_t[FSE_DTABLE_SIZE_U32(FSE_MAX_TABLELOG)];DTable_max_t376,13902
size_t FSE_buildDTable(FSE_DTable* dt, const short* normalizedCounter, unsigned maxSymbolValue, unsigned tableLog) {FSE_buildDTable379,14008
size_t FSE_decompress(void* dst, size_t dstCapacity, const void* cSrc, size_t cSrcSize)FSE_decompress384,14325

zstd_decompress_block.h,49
#define ZSTD_DEC_BLOCK_HZSTD_DEC_BLOCK_H13,412

zstd_compress_sequences.c,1033
static unsigned const kInverseProbabilityLog256[256] = {kInverseProbabilityLog25621,650
static unsigned ZSTD_getFSEMaxSymbolValue(FSE_CTable const* ctable) {ZSTD_getFSEMaxSymbolValue46,2306
static unsigned ZSTD_useLowProbCount(size_t const nbSeq)ZSTD_useLowProbCount57,2643
static size_t ZSTD_NCountCost(unsigned const* count, unsigned const max,ZSTD_NCountCost70,3028
static size_t ZSTD_entropyCost(unsigned const* count, unsigned const max, size_t const total)ZSTD_entropyCost84,3594
size_t ZSTD_fseBitCost(ZSTD_fseBitCost102,4172
size_t ZSTD_crossEntropyCost(short const* norm, unsigned accuracyLog,ZSTD_crossEntropyCost137,5389
ZSTD_selectEncodingType(ZSTD_selectEncodingType155,5977
ZSTD_buildCTable(void* dst, size_t dstCapacity,ZSTD_buildCTable236,9789
ZSTD_encodeSequences_body(ZSTD_encodeSequences_body282,11924
ZSTD_encodeSequences_default(ZSTD_encodeSequences_default376,17021
ZSTD_encodeSequences_bmi2(ZSTD_encodeSequences_bmi2394,17774
size_t ZSTD_encodeSequences(ZSTD_encodeSequences410,18474

zstd_v02.c,23207
#define MEM_H_MODULEMEM_H_MODULE61,2541
#  define MEM_STATIC MEM_STATIC78,2926
#  define MEM_STATIC MEM_STATIC80,3081
#  define MEM_STATIC MEM_STATIC82,3140
#  define MEM_STATIC MEM_STATIC84,3183
  typedef  uint8_t BYTE;BYTE97,3664
  typedef uint16_t U16;U1698,3689
  typedef  int16_t S16;S1699,3713
  typedef uint32_t U32;U32100,3737
  typedef  int32_t S32;S32101,3761
  typedef uint64_t U64;U64102,3785
  typedef  int64_t S64;S64103,3809
  typedef unsigned char       BYTE;BYTE105,3839
  typedef unsigned short      U16;U16106,3875
  typedef   signed short      S16;S16107,3910
  typedef unsigned int        U32;U32108,3945
  typedef   signed int        S32;S32109,3980
  typedef unsigned long long  U64;U64110,4015
  typedef   signed long long  S64;S64111,4050
#    define MEM_FORCE_MEMORY_ACCESS MEM_FORCE_MEMORY_ACCESS133,5537
#    define MEM_FORCE_MEMORY_ACCESS MEM_FORCE_MEMORY_ACCESS136,5800
MEM_STATIC unsigned MEM_32bits(void) { return sizeof(void*)==4; }MEM_32bits140,5855
MEM_STATIC unsigned MEM_64bits(void) { return sizeof(void*)==8; }MEM_64bits141,5921
MEM_STATIC unsigned MEM_isLittleEndian(void)MEM_isLittleEndian143,5988
MEM_STATIC U16 MEM_read16(const void* memPtr) { return *(const U16*) memPtr; }MEM_read16153,6357
MEM_STATIC U32 MEM_read32(const void* memPtr) { return *(const U32*) memPtr; }MEM_read32154,6436
MEM_STATIC U64 MEM_read64(const void* memPtr) { return *(const U64*) memPtr; }MEM_read64155,6515
MEM_STATIC void MEM_write16(void* memPtr, U16 value) { *(U16*)memPtr = value; }MEM_write16157,6595
typedef union { U16 u16; U32 u32; U64 u64; } __attribute__((packed)) unalign;u16163,6902
typedef union { U16 u16; U32 u32; U64 u64; } __attribute__((packed)) unalign;u32163,6902
typedef union { U16 u16; U32 u32; U64 u64; } __attribute__((packed)) unalign;u64163,6902
typedef union { U16 u16; U32 u32; U64 u64; } __attribute__((packed)) unalign;unalign163,6902
MEM_STATIC U16 MEM_read16(const void* ptr) { return ((const unalign*)ptr)->u16; }MEM_read16165,6981
MEM_STATIC U32 MEM_read32(const void* ptr) { return ((const unalign*)ptr)->u32; }MEM_read32166,7063
MEM_STATIC U64 MEM_read64(const void* ptr) { return ((const unalign*)ptr)->u64; }MEM_read64167,7145
MEM_STATIC void MEM_write16(void* memPtr, U16 value) { ((unalign*)memPtr)->u16 = value; }MEM_write16169,7228
MEM_STATIC U16 MEM_read16(const void* memPtr)MEM_read16176,7398
MEM_STATIC U32 MEM_read32(const void* memPtr)MEM_read32181,7509
MEM_STATIC U64 MEM_read64(const void* memPtr)MEM_read64186,7620
MEM_STATIC void MEM_write16(void* memPtr, U16 value)MEM_write16191,7731
MEM_STATIC U16 MEM_readLE16(const void* memPtr)MEM_readLE16199,7871
MEM_STATIC void MEM_writeLE16(void* memPtr, U16 val)MEM_writeLE16210,8095
MEM_STATIC U32 MEM_readLE24(const void* memPtr)MEM_readLE24224,8340
MEM_STATIC U32 MEM_readLE32(const void* memPtr)MEM_readLE32229,8461
MEM_STATIC U64 MEM_readLE64(const void* memPtr)MEM_readLE64241,8732
MEM_STATIC size_t MEM_readLEST(const void* memPtr)MEM_readLEST254,9096
#define BITSTREAM_H_MODULEBITSTREAM_H_MODULE305,11172
    size_t   bitContainer;bitContainer324,11631
    unsigned bitsConsumed;bitsConsumed325,11658
    const char* ptr;ptr326,11685
    const char* start;start327,11706
} BIT_DStream_t;BIT_DStream_t328,11729
typedef enum { BIT_DStream_unfinished = 0,BIT_DStream_unfinished330,11747
               BIT_DStream_endOfBuffer = 1,BIT_DStream_endOfBuffer331,11790
               BIT_DStream_completed = 2,BIT_DStream_completed332,11834
               BIT_DStream_overflow = 3 } BIT_DStream_status;  /* result of BIT_reloadDStream() */BIT_DStream_overflow333,11876
               BIT_DStream_overflow = 3 } BIT_DStream_status;  /* result of BIT_reloadDStream() */BIT_DStream_status333,11876
MEM_STATIC unsigned BIT_highbit32 (U32 val)BIT_highbit32353,12767
MEM_STATIC size_t BIT_initDStream(BIT_DStream_t* bitD, const void* srcBuffer, size_t srcSize)BIT_initDStream388,13899
MEM_STATIC size_t BIT_lookBits(BIT_DStream_t* bitD, U32 nbBits)BIT_lookBits433,15911
MEM_STATIC size_t BIT_lookBitsFast(BIT_DStream_t* bitD, U32 nbBits)BIT_lookBitsFast441,16221
MEM_STATIC void BIT_skipBits(BIT_DStream_t* bitD, U32 nbBits)BIT_skipBits447,16455
MEM_STATIC size_t BIT_readBits(BIT_DStream_t* bitD, U32 nbBits)BIT_readBits452,16556
MEM_STATIC size_t BIT_readBitsFast(BIT_DStream_t* bitD, U32 nbBits)BIT_readBitsFast461,16797
MEM_STATIC BIT_DStream_status BIT_reloadDStream(BIT_DStream_t* bitD)BIT_reloadDStream468,16971
MEM_STATIC unsigned BIT_endOfDStream(const BIT_DStream_t* DStream)BIT_endOfDStream503,18171
#define ERROR_H_MODULEERROR_H_MODULE547,20203
#  define ERR_STATIC ERR_STATIC558,20485
#  define ERR_STATIC ERR_STATIC560,20544
#  define ERR_STATIC ERR_STATIC562,20605
#  define ERR_STATIC ERR_STATIC564,20663
#define PREFIX(PREFIX571,20908
#define ERROR(ERROR573,20948
#define ERROR_LIST(ERROR_LIST575,20991
#define ERROR_GENERATE_ENUM(ERROR_GENERATE_ENUM582,21364
typedef enum { ERROR_LIST(ERROR_GENERATE_ENUM) } ERR_codes;  /* enum is exposed, to detect & handle specific errors; compare function result to -enum value */ERROR_LIST583,21404
typedef enum { ERROR_LIST(ERROR_GENERATE_ENUM) } ERR_codes;  /* enum is exposed, to detect & handle specific errors; compare function result to -enum value */ERR_codes583,21404
#define ERROR_CONVERTTOSTRING(ERROR_CONVERTTOSTRING585,21564
#define ERROR_GENERATE_STRING(ERROR_GENERATE_STRING586,21611
static const char* ERR_strings[] = { ERROR_LIST(ERROR_GENERATE_STRING) };ERR_strings587,21675
ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }ERR_isError589,21750
ERR_STATIC const char* ERR_getErrorName(size_t code)ERR_getErrorName591,21832
typedef unsigned FSE_CTable;   /* don't allocate that. It's just a way to be more restrictive than void* */FSE_CTable607,22217
typedef unsigned FSE_DTable;   /* don't allocate that. It's just a way to be more restrictive than void* */FSE_DTable608,22325
#define FSE_NCOUNTBOUND FSE_NCOUNTBOUND654,24425
#define FSE_BLOCKBOUND(FSE_BLOCKBOUND655,24453
#define FSE_COMPRESSBOUND(FSE_COMPRESSBOUND656,24501
#define FSE_CTABLE_SIZE_U32(FSE_CTABLE_SIZE_U32659,24720
#define FSE_DTABLE_SIZE_U32(FSE_DTABLE_SIZE_U32660,24831
    size_t      state;state678,25495
    const void* table;   /* precise table may vary, depending on U16 */table679,25518
} FSE_DState_t;FSE_DState_t680,25590
    U16 tableLog;tableLog704,26315
    U16 fastMode;fastMode705,26333
} FSE_DTableHeader;   /* sizeof U32 */FSE_DTableHeader706,26351
    unsigned short newState;newState710,26408
    unsigned char  symbol;symbol711,26437
    unsigned char  nbBits;nbBits712,26464
} FSE_decode_t;   /* size == U32 */FSE_decode_t713,26491
MEM_STATIC void FSE_initDState(FSE_DState_t* DStatePtr, BIT_DStream_t* bitD, const FSE_DTable* dt)FSE_initDState715,26528
MEM_STATIC BYTE FSE_decodeSymbol(FSE_DState_t* DStatePtr, BIT_DStream_t* bitD)FSE_decodeSymbol724,26826
MEM_STATIC BYTE FSE_decodeSymbolFast(FSE_DState_t* DStatePtr, BIT_DStream_t* bitD)FSE_decodeSymbolFast735,27190
MEM_STATIC unsigned FSE_endOfDState(const FSE_DState_t* DStatePtr)FSE_endOfDState746,27561
#define HUF_CTABLEBOUND HUF_CTABLEBOUND798,29731
#define HUF_BLOCKBOUND(HUF_BLOCKBOUND799,29759
#define HUF_COMPRESSBOUND(HUF_COMPRESSBOUND800,29880
#define HUF_DTABLE_SIZE(HUF_DTABLE_SIZE803,30048
#define HUF_CREATE_STATIC_DTABLEX2(HUF_CREATE_STATIC_DTABLEX2804,30174
#define HUF_CREATE_STATIC_DTABLEX4(HUF_CREATE_STATIC_DTABLEX4806,30310
#define HUF_CREATE_STATIC_DTABLEX6(HUF_CREATE_STATIC_DTABLEX6808,30444
#define ZSTD_VERSION_MAJOR ZSTD_VERSION_MAJOR870,33052
#define ZSTD_VERSION_MINOR ZSTD_VERSION_MINOR871,33125
#define ZSTD_VERSION_RELEASE ZSTD_VERSION_RELEASE872,33212
#define ZSTD_VERSION_NUMBER ZSTD_VERSION_NUMBER873,33291
typedef struct ZSTD_CCtx_s ZSTD_CCtx;   /* incomplete type */ZSTD_CCtx879,33505
typedef struct ZSTD_DCtx_s ZSTD_DCtx;ZSTD_DCtx930,35697
#define ZSTD_magicNumber ZSTD_magicNumber943,36289
#define FSE_MAX_MEMORY_USAGE FSE_MAX_MEMORY_USAGE993,38668
#define FSE_DEFAULT_MEMORY_USAGE FSE_DEFAULT_MEMORY_USAGE994,38700
#define FSE_MAX_SYMBOL_VALUE FSE_MAX_SYMBOL_VALUE999,38842
#define FSE_FUNCTION_TYPE FSE_FUNCTION_TYPE1005,39045
#define FSE_FUNCTION_EXTENSIONFSE_FUNCTION_EXTENSION1006,39076
#  define FORCE_INLINE FORCE_INLINE1019,39492
#      define FORCE_INLINE FORCE_INLINE1026,39905
#      define FORCE_INLINE FORCE_INLINE1028,39987
#    define FORCE_INLINE FORCE_INLINE1031,40047
#define FSE_MAX_TABLELOG FSE_MAX_TABLELOG1046,40551
#define FSE_MAX_TABLESIZE FSE_MAX_TABLESIZE1047,40602
#define FSE_MAXTABLESIZE_MASK FSE_MAXTABLESIZE_MASK1048,40651
#define FSE_DEFAULT_TABLELOG FSE_DEFAULT_TABLELOG1049,40703
#define FSE_MIN_TABLELOG FSE_MIN_TABLELOG1050,40761
#define FSE_TABLELOG_ABSOLUTE_MAX FSE_TABLELOG_ABSOLUTE_MAX1052,40789
#define FSE_STATIC_ASSERT(FSE_STATIC_ASSERT1061,41107
typedef U32 DTable_max_t[FSE_DTABLE_SIZE_U32(FSE_MAX_TABLELOG)];DTable_max_t1067,41383
#define FSE_CAT(FSE_CAT1088,41968
#define FSE_FUNCTION_NAME(FSE_FUNCTION_NAME1089,41994
#define FSE_TYPE_NAME(FSE_TYPE_NAME1090,42038
#define FSE_DECODE_TYPE FSE_DECODE_TYPE1095,42106
static U32 FSE_tableStep(U32 tableSize) { return (tableSize>>1) + (tableSize>>3) + 3; }FSE_tableStep1097,42144
static size_t FSE_buildDTableFSE_buildDTable1099,42233
static unsigned FSE_isError(size_t code) { return ERR_isError(code); }FSE_isError1171,44646
static short FSE_abs(short a)FSE_abs1177,44883
static size_t FSE_readNCount (short* normalizedCounter, unsigned* maxSVPtr, unsigned* tableLogPtr,FSE_readNCount1182,44952
static size_t FSE_buildDTable_rle (FSE_DTable* dt, BYTE symbolValue)FSE_buildDTable_rle1298,48472
static size_t FSE_buildDTable_raw (FSE_DTable* dt, unsigned nbBits)FSE_buildDTable_raw1315,48866
FORCE_INLINE size_t FSE_decompress_usingDTable_generic(FSE_decompress_usingDTable_generic1341,49621
#define FSE_GETSYMBOL(FSE_GETSYMBOL1363,50288
static size_t FSE_decompress_usingDTable(void* dst, size_t originalSize,FSE_decompress_usingDTable1411,51995
static size_t FSE_decompress(void* dst, size_t maxDstSize, const void* cSrc, size_t cSrcSize)FSE_decompress1424,52497
#  define inline inline1493,55731
#  define inline inline1495,55763
#define HUF_STATIC_ASSERT(HUF_STATIC_ASSERT1514,56393
static unsigned HUF_isError(size_t code) { return ERR_isError(code); }HUF_isError1520,56628
#define HUF_ABSOLUTEMAX_TABLELOG HUF_ABSOLUTEMAX_TABLELOG1522,56700
#define HUF_MAX_TABLELOG HUF_MAX_TABLELOG1523,56819
#define HUF_DEFAULT_TABLELOG HUF_DEFAULT_TABLELOG1524,56960
#define HUF_MAX_SYMBOL_VALUE HUF_MAX_SYMBOL_VALUE1525,57055
typedef struct { BYTE byte; BYTE nbBits; } HUF_DEltX2;   /* single-symbol decoding */byte1535,57348
typedef struct { BYTE byte; BYTE nbBits; } HUF_DEltX2;   /* single-symbol decoding */nbBits1535,57348
typedef struct { BYTE byte; BYTE nbBits; } HUF_DEltX2;   /* single-symbol decoding */HUF_DEltX21535,57348
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUF_DEltX4;  /* double-symbols decoding */sequence1537,57435
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUF_DEltX4;  /* double-symbols decoding */nbBits1537,57435
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUF_DEltX4;  /* double-symbols decoding */length1537,57435
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUF_DEltX4;  /* double-symbols decoding */HUF_DEltX41537,57435
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;symbol1539,57538
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;weight1539,57538
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;sortedSymbol_t1539,57538
static size_t HUF_readStats(BYTE* huffWeight, size_t hwSize, U32* rankStats,HUF_readStats1546,57749
static size_t HUF_readDTableX2 (U16* DTable, const void* src, size_t srcSize)HUF_readDTableX21629,60658
static BYTE HUF_decodeSymbolX2(BIT_DStream_t* Dstream, const HUF_DEltX2* dt, const U32 dtLog)HUF_decodeSymbolX21677,62317
#define HUF_DECODE_SYMBOLX2_0(HUF_DECODE_SYMBOLX2_01685,62603
#define HUF_DECODE_SYMBOLX2_1(HUF_DECODE_SYMBOLX2_11688,62708
#define HUF_DECODE_SYMBOLX2_2(HUF_DECODE_SYMBOLX2_21692,62855
static inline size_t HUF_decodeStreamX2(BYTE* p, BIT_DStream_t* const bitDPtr, BYTE* const pEnd, const HUF_DEltX2* const dt, const U32 dtLog)HUF_decodeStreamX21696,62976
static size_t HUF_decompress4X2_usingDTable(HUF_decompress4X2_usingDTable1721,63775
static size_t HUF_decompress4X2 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress4X21818,67917
static void HUF_fillDTableX4Level2(HUF_DEltX4* DTable, U32 sizeLog, const U32 consumed,HUF_fillDTableX4Level21838,68528
typedef U32 rankVal_t[HUF_ABSOLUTEMAX_TABLELOG][HUF_ABSOLUTEMAX_TABLELOG + 1];rankVal_t1881,70002
static void HUF_fillDTableX4(HUF_DEltX4* DTable, const U32 targetLog,HUF_fillDTableX41883,70082
static size_t HUF_readDTableX4 (U32* DTable, const void* src, size_t srcSize)HUF_readDTableX41931,71883
static U32 HUF_decodeSymbolX4(void* op, BIT_DStream_t* DStream, const HUF_DEltX4* dt, const U32 dtLog)HUF_decodeSymbolX42018,74858
static U32 HUF_decodeLastSymbolX4(void* op, BIT_DStream_t* DStream, const HUF_DEltX4* dt, const U32 dtLog)HUF_decodeLastSymbolX42026,75146
#define HUF_DECODE_SYMBOLX4_0(HUF_DECODE_SYMBOLX4_02044,75879
#define HUF_DECODE_SYMBOLX4_1(HUF_DECODE_SYMBOLX4_12047,75987
#define HUF_DECODE_SYMBOLX4_2(HUF_DECODE_SYMBOLX4_22051,76149
static inline size_t HUF_decodeStreamX4(BYTE* p, BIT_DStream_t* bitDPtr, BYTE* const pEnd, const HUF_DEltX4* const dt, const U32 dtLog)HUF_decodeStreamX42055,76285
static size_t HUF_decompress4X4_usingDTable(HUF_decompress4X4_usingDTable2083,77140
static size_t HUF_decompress4X4 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress4X42180,81282
typedef struct { BYTE nbBits; BYTE nbBytes; } HUF_DDescX6;nbBits2198,81874
typedef struct { BYTE nbBits; BYTE nbBytes; } HUF_DDescX6;nbBytes2198,81874
typedef struct { BYTE nbBits; BYTE nbBytes; } HUF_DDescX6;HUF_DDescX62198,81874
typedef union { BYTE byte[4]; U32 sequence; } HUF_DSeqX6;byte2199,81933
typedef union { BYTE byte[4]; U32 sequence; } HUF_DSeqX6;sequence2199,81933
typedef union { BYTE byte[4]; U32 sequence; } HUF_DSeqX6;HUF_DSeqX62199,81933
static void HUF_fillDTableX6LevelN(HUF_DDescX6* DDescription, HUF_DSeqX6* DSequence, int sizeLog,HUF_fillDTableX6LevelN2202,82092
static size_t HUF_readDTableX6 (U32* DTable, const void* src, size_t srcSize)HUF_readDTableX62267,84625
static U32 HUF_decodeSymbolX6(void* op, BIT_DStream_t* DStream, const HUF_DDescX6* dd, const HUF_DSeqX6* ds, const U32 dtLog)HUF_decodeSymbolX62365,87890
static U32 HUF_decodeLastSymbolsX6(void* op, const U32 maxL, BIT_DStream_t* DStream,HUF_decodeLastSymbolsX62373,88219
#define HUF_DECODE_SYMBOLX6_0(HUF_DECODE_SYMBOLX6_02395,89097
#define HUF_DECODE_SYMBOLX6_1(HUF_DECODE_SYMBOLX6_12398,89209
#define HUF_DECODE_SYMBOLX6_2(HUF_DECODE_SYMBOLX6_22402,89356
static inline size_t HUF_decodeStreamX6(BYTE* p, BIT_DStream_t* bitDPtr, BYTE* const pEnd, const U32* DTable, const U32 dtLog)HUF_decodeStreamX62406,89477
static size_t HUF_decompress4X6_usingDTable(HUF_decompress4X6_usingDTable2438,90583
static size_t HUF_decompress4X6 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress4X62537,94888
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;tableTime2556,95481
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;decode256Time2556,95481
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;algo_time_t2556,95481
static const algo_time_t algoTime[16 /* Quantization */][3 /* single, double, quad */] =algoTime2557,95547
typedef size_t (*decompressionAlgo)(void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize);decompressionAlgo2578,96701
static size_t HUF_decompress (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress2580,96801
#define ZSTD_MEMORY_USAGE ZSTD_MEMORY_USAGE2653,100384
#  define ZSTD_HEAPMODE ZSTD_HEAPMODE2662,100714
#  define ZSTD_LEGACY_SUPPORT ZSTD_LEGACY_SUPPORT2670,100890
#define HASH_LOG HASH_LOG2699,101827
#define HASH_TABLESIZE HASH_TABLESIZE2700,101868
#define HASH_MASK HASH_MASK2701,101907
#define KNUTH KNUTH2703,101947
#define BIT7 BIT72705,101973
#define BIT6 BIT62706,101990
#define BIT5 BIT52707,102007
#define BIT4 BIT42708,102024
#define BIT1 BIT12709,102041
#define BIT0 BIT02710,102058
#define KB KB2712,102076
#define MB MB2713,102097
#define GB GB2714,102118
#define BLOCKSIZE BLOCKSIZE2716,102140
#define MIN_SEQUENCES_SIZE MIN_SEQUENCES_SIZE2717,102219
#define MIN_CBLOCK_SIZE MIN_CBLOCK_SIZE2718,102310
#define IS_RAW IS_RAW2719,102372
#define IS_RLE IS_RLE2720,102392
#define WORKPLACESIZE WORKPLACESIZE2722,102413
#define MINMATCH MINMATCH2723,102449
#define MLbits MLbits2724,102468
#define LLbits LLbits2725,102487
#define Offbits Offbits2726,102506
#define MaxML MaxML2727,102525
#define MaxLL MaxLL2728,102557
#define MaxOff MaxOff2729,102589
#define LitFSELog LitFSELog2730,102609
#define MLFSELog MLFSELog2731,102631
#define LLFSELog LLFSELog2732,102653
#define OffFSELog OffFSELog2733,102675
#define MAX(MAX2734,102697
#define MaxSeq MaxSeq2735,102732
#define LITERAL_NOENTROPY LITERAL_NOENTROPY2737,102766
#define COMMAND_NOENTROPY COMMAND_NOENTROPY2738,102795
#define ZSTD_CONTENTSIZE_ERROR ZSTD_CONTENTSIZE_ERROR2740,102842
static const size_t ZSTD_blockHeaderSize = 3;ZSTD_blockHeaderSize2742,102887
static const size_t ZSTD_frameHeaderSize = 4;ZSTD_frameHeaderSize2743,102933
static void   ZSTD_copy4(void* dst, const void* src) { memcpy(dst, src, 4); }ZSTD_copy42749,103121
static void   ZSTD_copy8(void* dst, const void* src) { memcpy(dst, src, 8); }ZSTD_copy82751,103200
#define COPY8(COPY82753,103279
static void ZSTD_wildcopy(void* dst, const void* src, ptrdiff_t length)ZSTD_wildcopy2756,103417
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_compressed2768,103741
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_raw2768,103741
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_rle2768,103741
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_end2768,103741
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;blockType_t2768,103741
    blockType_t blockType;blockType2772,103827
    U32 origSize;origSize2773,103854
} blockProperties_t;blockProperties_t2774,103872
    void* buffer;buffer2777,103911
    U32*  offsetStart;offsetStart2778,103929
    U32*  offset;offset2779,103952
    BYTE* offCodeStart;offCodeStart2780,103970
    BYTE* offCode;offCode2781,103994
    BYTE* litStart;litStart2782,104013
    BYTE* lit;lit2783,104033
    BYTE* litLengthStart;litLengthStart2784,104048
    BYTE* litLength;litLength2785,104074
    BYTE* matchLengthStart;matchLengthStart2786,104095
    BYTE* matchLength;matchLength2787,104123
    BYTE* dumpsStart;dumpsStart2788,104146
    BYTE* dumps;dumps2789,104168
} seqStore_t;seqStore_t2790,104185
static unsigned ZSTD_isError(size_t code) { return ERR_isError(code); }ZSTD_isError2798,104368
struct ZSTD_DCtx_sZSTD_DCtx_s2805,104599
    U32 LLTable[FSE_DTABLE_SIZE_U32(LLFSELog)];LLTable2807,104620
    U32 OffTable[FSE_DTABLE_SIZE_U32(OffFSELog)];OffTable2808,104668
    U32 MLTable[FSE_DTABLE_SIZE_U32(MLFSELog)];MLTable2809,104718
    void* previousDstEnd;previousDstEnd2810,104766
    void* base;base2811,104792
    size_t expected;expected2812,104808
    blockType_t bType;bType2813,104829
    U32 phase;phase2814,104852
    const BYTE* litPtr;litPtr2815,104867
    size_t litSize;litSize2816,104891
    BYTE litBuffer[BLOCKSIZE + 8 /* margin for wildcopy */];litBuffer2817,104911
static size_t ZSTD_getcBlockSize(const void* src, size_t srcSize, blockProperties_t* bpPtr)ZSTD_getcBlockSize2821,105031
static size_t ZSTD_copyUncompressedBlock(void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTD_copyUncompressedBlock2840,105575
static size_t ZSTD_decompressLiterals(void* dst, size_t* maxDstSizePtr,ZSTD_decompressLiterals2852,105919
static size_t ZSTD_decodeLiteralsBlock(void* ctx,ZSTD_decodeLiteralsBlock2872,106718
static size_t ZSTD_decodeSeqHeaders(int* nbSeq, const BYTE** dumpsPtr, size_t* dumpsLengthPtr,ZSTD_decodeSeqHeaders2924,108742
    size_t litLength;litLength3027,112246
    size_t offset;offset3028,112268
    size_t matchLength;matchLength3029,112287
} seq_t;seq_t3030,112311
    BIT_DStream_t DStream;DStream3033,112338
    FSE_DState_t stateLL;stateLL3034,112365
    FSE_DState_t stateOffb;stateOffb3035,112391
    FSE_DState_t stateML;stateML3036,112419
    size_t prevOffset;prevOffset3037,112445
    const BYTE* dumps;dumps3038,112468
    const BYTE* dumpsEnd;dumpsEnd3039,112491
} seqState_t;seqState_t3040,112517
static void ZSTD_decodeSequence(seq_t* seq, seqState_t* seqState)ZSTD_decodeSequence3043,112533
static size_t ZSTD_execSequence(BYTE* op,ZSTD_execSequence3107,114916
static size_t ZSTD_decompressSequences(ZSTD_decompressSequences3176,117592
static size_t ZSTD_decompressBlock(ZSTD_decompressBlock3249,120395
static size_t ZSTD_decompressDCtx(void* ctx, void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTD_decompressDCtx3267,120938
static size_t ZSTD_decompress(void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTD_decompress3324,122846
static void ZSTD_errorFrameSizeInfoLegacy(size_t* cSize, unsigned long long* dBound, size_t ret)ZSTD_errorFrameSizeInfoLegacy3333,123139
void ZSTDv02_findFrameSizeInfoLegacy(const void *src, size_t srcSize, size_t* cSize, unsigned long long* dBound)ZSTDv02_findFrameSizeInfoLegacy3339,123297
static size_t ZSTD_resetDCtx(ZSTD_DCtx* dctx)ZSTD_resetDCtx3390,124834
static ZSTD_DCtx* ZSTD_createDCtx(void)ZSTD_createDCtx3399,125019
static size_t ZSTD_freeDCtx(ZSTD_DCtx* dctx)ZSTD_freeDCtx3407,125201
static size_t ZSTD_nextSrcSizeToDecompress(ZSTD_DCtx* dctx)ZSTD_nextSrcSizeToDecompress3413,125281
static size_t ZSTD_decompressContinue(ZSTD_DCtx* ctx, void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTD_decompressContinue3418,125373
unsigned ZSTDv02_isError(size_t code)ZSTDv02_isError3488,127303
size_t ZSTDv02_decompress( void* dst, size_t maxOriginalSize,ZSTDv02_decompress3493,127377
ZSTDv02_Dctx* ZSTDv02_createDCtx(void)ZSTDv02_createDCtx3499,127576
size_t ZSTDv02_freeDCtx(ZSTDv02_Dctx* dctx)ZSTDv02_freeDCtx3504,127665
size_t ZSTDv02_resetDCtx(ZSTDv02_Dctx* dctx)ZSTDv02_resetDCtx3509,127758
size_t ZSTDv02_nextSrcSizeToDecompress(ZSTDv02_Dctx* dctx)ZSTDv02_nextSrcSizeToDecompress3514,127853
size_t ZSTDv02_decompressContinue(ZSTDv02_Dctx* dctx, void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTDv02_decompressContinue3519,127976

zstd_compress_literals.h,65
#define ZSTD_COMPRESS_LITERALS_HZSTD_COMPRESS_LITERALS_H12,419

zbuff_decompress.c,779
#define ZBUFF_STATIC_LINKING_ONLYZBUFF_STATIC_LINKING_ONLY16,486
ZBUFF_DCtx* ZBUFF_createDCtx(void)ZBUFF_createDCtx20,541
ZBUFF_DCtx* ZBUFF_createDCtx_advanced(ZSTD_customMem customMem)ZBUFF_createDCtx_advanced25,614
size_t ZBUFF_freeDCtx(ZBUFF_DCtx* zbd)ZBUFF_freeDCtx30,734
size_t ZBUFF_decompressInitDictionary(ZBUFF_DCtx* zbd, const void* dict, size_t dictSize)ZBUFF_decompressInitDictionary38,843
size_t ZBUFF_decompressInit(ZBUFF_DCtx* zbd)ZBUFF_decompressInit43,998
size_t ZBUFF_decompressContinue(ZBUFF_DCtx* zbd,ZBUFF_decompressContinue51,1112
size_t ZBUFF_recommendedDInSize(void)  { return ZSTD_DStreamInSize(); }ZBUFF_recommendedDInSize74,1771
size_t ZBUFF_recommendedDOutSize(void) { return ZSTD_DStreamOutSize(); }ZBUFF_recommendedDOutSize75,1843

zstd_v04.h,258
#define ZSTD_V04_H_91868324769238ZSTD_V04_H_9186832476923812,420
typedef struct ZSTDv04_Dctx_s ZSTDv04_Dctx;ZSTDv04_Dctx60,2412
typedef struct ZBUFFv04_DCtx_s ZBUFFv04_DCtx;ZBUFFv04_DCtx88,3598
#define ZSTDv04_magicNumber ZSTDv04_magicNumber135,6314

zstd_decompress_internal.h,6958
 #define ZSTD_DECOMPRESS_INTERNAL_HZSTD_DECOMPRESS_INTERNAL_H16,520
static UNUSED_ATTR const U32 LL_base[MaxLL+1] = {LL_base30,930
static UNUSED_ATTR const U32 OF_base[MaxOff+1] = {OF_base37,1304
static UNUSED_ATTR const U32 OF_bits[MaxOff+1] = {OF_bits43,1732
static UNUSED_ATTR const U32 ML_base[MaxML+1] = {ML_base49,1994
     U32 fastMode;fastMode63,2666
     U32 tableLog;tableLog64,2685
 } ZSTD_seqSymbol_header;ZSTD_seqSymbol_header65,2704
     U16  nextState;nextState68,2749
     BYTE nbAdditionalBits;nbAdditionalBits69,2770
     BYTE nbBits;nbBits70,2798
     U32  baseValue;baseValue71,2816
 } ZSTD_seqSymbol;ZSTD_seqSymbol72,2837
 #define SEQSYMBOL_TABLE_SIZE(SEQSYMBOL_TABLE_SIZE74,2857
#define ZSTD_BUILD_FSE_TABLE_WKSP_SIZE ZSTD_BUILD_FSE_TABLE_WKSP_SIZE76,2914
#define ZSTD_BUILD_FSE_TABLE_WKSP_SIZE_U32 ZSTD_BUILD_FSE_TABLE_WKSP_SIZE_U3277,3016
    ZSTD_seqSymbol LLTable[SEQSYMBOL_TABLE_SIZE(LLFSELog)];    /* Note : Space reserved for FSE Tables */LLTable80,3144
    ZSTD_seqSymbol OFTable[SEQSYMBOL_TABLE_SIZE(OffFSELog)];   /* is also used as temporary workspace while building hufTable during DDict creation */OFTable81,3250
    ZSTD_seqSymbol MLTable[SEQSYMBOL_TABLE_SIZE(MLFSELog)];    /* and therefore must be at least HUF_DECOMPRESS_WORKSPACE_SIZE large */MLTable82,3401
    HUF_DTable hufTable[HUF_DTABLE_SIZE(HufLog)];  /* can accommodate HUF_decompress4X */hufTable83,3537
    U32 rep[ZSTD_REP_NUM];rep84,3627
    U32 workspace[ZSTD_BUILD_FSE_TABLE_WKSP_SIZE_U32];workspace85,3654
} ZSTD_entropyDTables_t;ZSTD_entropyDTables_t86,3709
typedef enum { ZSTDds_getFrameHeaderSize, ZSTDds_decodeFrameHeader,ZSTDds_getFrameHeaderSize88,3735
typedef enum { ZSTDds_getFrameHeaderSize, ZSTDds_decodeFrameHeader,ZSTDds_decodeFrameHeader88,3735
               ZSTDds_decodeBlockHeader, ZSTDds_decompressBlock,ZSTDds_decodeBlockHeader89,3803
               ZSTDds_decodeBlockHeader, ZSTDds_decompressBlock,ZSTDds_decompressBlock89,3803
               ZSTDds_decompressLastBlock, ZSTDds_checkChecksum,ZSTDds_decompressLastBlock90,3868
               ZSTDds_decompressLastBlock, ZSTDds_checkChecksum,ZSTDds_checkChecksum90,3868
               ZSTDds_decodeSkippableHeader, ZSTDds_skipFrame } ZSTD_dStage;ZSTDds_decodeSkippableHeader91,3933
               ZSTDds_decodeSkippableHeader, ZSTDds_skipFrame } ZSTD_dStage;ZSTDds_skipFrame91,3933
               ZSTDds_decodeSkippableHeader, ZSTDds_skipFrame } ZSTD_dStage;ZSTD_dStage91,3933
typedef enum { zdss_init=0, zdss_loadHeader,zdss_init93,4011
typedef enum { zdss_init=0, zdss_loadHeader,zdss_loadHeader93,4011
               zdss_read, zdss_load, zdss_flush } ZSTD_dStreamStage;zdss_read94,4056
               zdss_read, zdss_load, zdss_flush } ZSTD_dStreamStage;zdss_load94,4056
               zdss_read, zdss_load, zdss_flush } ZSTD_dStreamStage;zdss_flush94,4056
               zdss_read, zdss_load, zdss_flush } ZSTD_dStreamStage;ZSTD_dStreamStage94,4056
    ZSTD_use_indefinitely = -1,  /* Use the dictionary indefinitely */ZSTD_use_indefinitely97,4141
    ZSTD_dont_use = 0,           /* Do not use the dictionary (if one exists free it) */ZSTD_dont_use98,4212
    ZSTD_use_once = 1            /* Use the dictionary once and set to ZSTD_dont_use */ZSTD_use_once99,4301
} ZSTD_dictUses_e;ZSTD_dictUses_e100,4389
struct ZSTD_DCtx_sZSTD_DCtx_s102,4409
    const ZSTD_seqSymbol* LLTptr;LLTptr104,4430
    const ZSTD_seqSymbol* MLTptr;MLTptr105,4464
    const ZSTD_seqSymbol* OFTptr;OFTptr106,4498
    const HUF_DTable* HUFptr;HUFptr107,4532
    ZSTD_entropyDTables_t entropy;entropy108,4562
    U32 workspace[HUF_DECOMPRESS_WORKSPACE_SIZE_U32];   /* space needed when building huffman tables */workspace109,4597
    const void* previousDstEnd;   /* detect continuity */previousDstEnd110,4701
    const void* prefixStart;      /* start of current segment */prefixStart111,4759
    const void* virtualStart;     /* virtual start of previous segment if it was just before current one */virtualStart112,4824
    const void* dictEnd;          /* end of previous segment */dictEnd113,4932
    size_t expected;expected114,4996
    ZSTD_frameHeader fParams;fParams115,5017
    U64 decodedSize;decodedSize116,5047
    blockType_e bType;            /* used in ZSTD_decompressContinue(), store blockType between block header decoding and block decompression stages */bType117,5068
    ZSTD_dStage stage;stage118,5220
    U32 litEntropy;litEntropy119,5243
    U32 fseEntropy;fseEntropy120,5263
    XXH64_state_t xxhState;xxhState121,5283
    size_t headerSize;headerSize122,5311
    ZSTD_format_e format;format123,5334
    ZSTD_forceIgnoreChecksum_e forceIgnoreChecksum;   /* User specified: if == 1, will ignore checksums in compressed frame. Default == 0 */forceIgnoreChecksum124,5360
    U32 validateChecksum;         /* if == 1, will validate checksum. Is == 1 if (fParams.checksumFlag == 1) and (forceIgnoreChecksum == 0). */validateChecksum125,5501
    const BYTE* litPtr;litPtr126,5645
    ZSTD_customMem customMem;customMem127,5669
    size_t litSize;litSize128,5699
    size_t rleSize;rleSize129,5719
    size_t staticSize;staticSize130,5739
    int bmi2;                     /* == 1 if the CPU supports BMI2 and 0 otherwise. CPU support is determined dynamically once per context lifetime. */bmi2131,5762
    ZSTD_DDict* ddictLocal;ddictLocal134,5936
    const ZSTD_DDict* ddict;     /* set by ZSTD_initDStream_usingDDict(), or ZSTD_DCtx_refDDict() */ddict135,5964
    U32 dictID;dictID136,6065
    int ddictIsCold;             /* if == 1 : dictionary is "new" for working context, and presumed "cold" (not in cpu cache) */ddictIsCold137,6081
    ZSTD_dictUses_e dictUses;dictUses138,6210
    ZSTD_dStreamStage streamStage;streamStage141,6261
    char*  inBuff;inBuff142,6296
    size_t inBuffSize;inBuffSize143,6315
    size_t inPos;inPos144,6338
    size_t maxWindowSize;maxWindowSize145,6356
    char*  outBuff;outBuff146,6382
    size_t outBuffSize;outBuffSize147,6402
    size_t outStart;outStart148,6426
    size_t outEnd;outEnd149,6447
    size_t lhSize;lhSize150,6466
    void* legacyContext;legacyContext151,6485
    U32 previousLegacyVersion;previousLegacyVersion152,6510
    U32 legacyVersion;legacyVersion153,6541
    U32 hostageByte;hostageByte154,6564
    int noForwardProgress;noForwardProgress155,6585
    ZSTD_bufferMode_e outBufferMode;outBufferMode156,6612
    ZSTD_outBuffer expectedOutBuffer;expectedOutBuffer157,6649
    BYTE litBuffer[ZSTD_BLOCKSIZE_MAX + WILDCOPY_OVERLENGTH];litBuffer160,6708
    BYTE headerBuffer[ZSTD_FRAMEHEADERSIZE_MAX];headerBuffer161,6770
    size_t oversizedDuration;oversizedDuration163,6820
    void const* dictContentBeginForFuzzing;dictContentBeginForFuzzing166,6899
    void const* dictContentEndForFuzzing;dictContentEndForFuzzing167,6943

divsufsort.c,4818
# undef INLINEINLINE47,1588
# define INLINE INLINE50,1631
# undef ALPHABET_SIZEALPHABET_SIZE53,1713
# define ALPHABET_SIZE ALPHABET_SIZE56,1770
#define BUCKET_A_SIZE BUCKET_A_SIZE58,1806
#define BUCKET_B_SIZE BUCKET_B_SIZE59,1844
#  undef SS_INSERTIONSORT_THRESHOLDSS_INSERTIONSORT_THRESHOLD62,1974
#  define SS_INSERTIONSORT_THRESHOLD SS_INSERTIONSORT_THRESHOLD63,2010
# define SS_INSERTIONSORT_THRESHOLD SS_INSERTIONSORT_THRESHOLD66,2065
#  undef SS_BLOCKSIZESS_BLOCKSIZE70,2160
#  define SS_BLOCKSIZE SS_BLOCKSIZE71,2182
#  undef SS_BLOCKSIZESS_BLOCKSIZE73,2238
#  define SS_BLOCKSIZE SS_BLOCKSIZE74,2260
# define SS_BLOCKSIZE SS_BLOCKSIZE77,2305
# define SS_MISORT_STACKSIZE SS_MISORT_STACKSIZE81,2415
# define SS_MISORT_STACKSIZE SS_MISORT_STACKSIZE83,2476
# define SS_MISORT_STACKSIZE SS_MISORT_STACKSIZE85,2516
#define SS_SMERGE_STACKSIZE SS_SMERGE_STACKSIZE87,2557
#define TR_INSERTIONSORT_THRESHOLD TR_INSERTIONSORT_THRESHOLD88,2590
#define TR_STACKSIZE TR_STACKSIZE89,2629
# define SWAP(SWAP94,2685
# define MIN(MIN97,2786
# define MAX(MAX100,2866
#define STACK_PUSH(STACK_PUSH102,2934
#define STACK_PUSH5(STACK_PUSH5108,3128
#define STACK_POP(STACK_POP114,3350
#define STACK_POP5(STACK_POP5121,3567
#define BUCKET_A(BUCKET_A128,3812
#define BUCKET_B(BUCKET_B130,3875
#define BUCKET_BSTAR(BUCKET_BSTAR131,3935
#define BUCKET_B(BUCKET_B133,4005
#define BUCKET_BSTAR(BUCKET_BSTAR134,4074
static const int lg_table[256]= {lg_table140,4183
ss_ilg(int n) {ss_ilg155,4846
static const int sqq_table[256] = {sqq_table177,5431
ss_isqrt(int x) {ss_isqrt198,6768
ss_compare(const unsigned char *T,ss_compare231,7616
ss_insertionsort(const unsigned char *T, const int *PA,ss_insertionsort257,8239
ss_fixdown(const unsigned char *Td, const int *PA,ss_fixdown282,8895
ss_heapsort(const unsigned char *Td, const int *PA, int *SA, int size) {ss_heapsort299,9271
ss_median3(const unsigned char *Td, const int *PA,ss_median3324,9893
ss_median5(const unsigned char *Td, const int *PA,ss_median5338,10234
ss_pivot(const unsigned char *Td, const int *PA, int *first, int *last) {ss_pivot353,10747
ss_partition(const int *PA,ss_partition381,11518
ss_mintrosort(const unsigned char *T, const int *PA,ss_mintrosort400,11988
#define STACK_SIZE STACK_SIZE403,12105
#undef STACK_SIZESTACK_SIZE530,15947
ss_blockswap(int *a, int *b, int n) {ss_blockswap542,16173
ss_rotate(int *first, int *middle, int *last) {ss_rotate551,16307
ss_inplacemerge(const unsigned char *T, const int *PA,ss_inplacemerge592,17196
ss_mergeforward(const unsigned char *T, const int *PA,ss_mergeforward635,18246
ss_mergebackward(const unsigned char *T, const int *PA,ss_mergebackward685,19392
ss_swapmerge(const unsigned char *T, const int *PA,ss_swapmerge744,21178
#define STACK_SIZE STACK_SIZE747,21328
#define GETIDX(GETIDX748,21367
#define MERGE_CHECK(MERGE_CHECK749,21413
#undef STACK_SIZESTACK_SIZE825,23689
sssort(const unsigned char *T, const int *PA,sssort836,23857
tr_ilg(int n) {tr_ilg911,26052
tr_insertionsort(const int *ISAd, int *first, int *last) {tr_insertionsort927,26488
tr_fixdown(const int *ISAd, int *SA, int i, int size) {tr_fixdown946,26927
tr_heapsort(const int *ISAd, int *SA, int size) {tr_heapsort962,27263
tr_median3(const int *ISAd, int *v1, int *v2, int *v3) {tr_median3987,27852
tr_median5(const int *ISAd,tr_median51000,28147
tr_pivot(const int *ISAd, int *first, int *last) {tr_pivot1015,28613
typedef struct _trbudget_t trbudget_t;trbudget_t1040,29290
struct _trbudget_t {_trbudget_t1041,29329
  int chance;chance1042,29350
  int remain;remain1043,29364
  int incval;incval1044,29378
  int count;count1045,29392
trbudget_init(trbudget_t *budget, int chance, int incval) {trbudget_init1050,29428
trbudget_check(trbudget_t *budget, int size) {trbudget_check1057,29580
tr_partition(const int *ISAd,tr_partition1070,29939
tr_copy(int *ISA, const int *SA,tr_copy1112,31095
tr_partialcopy(int *ISA, const int *SA,tr_partialcopy1137,31665
tr_introsort(int *ISA, const int *ISAd,tr_introsort1175,32594
#define STACK_SIZE STACK_SIZE1178,32714
#undef STACK_SIZESTACK_SIZE1392,39904
trsort(int *ISA, int *SA, int n, int depth) {trsort1402,40045
sort_typeBstar(const unsigned char *T, int *SA,sort_typeBstar1441,41116
construct_SA(const unsigned char *T, int *SA,construct_SA1613,46437
construct_BWT(const unsigned char *T, int *SA,construct_BWT1677,48237
construct_BWT_indexes(const unsigned char *T, int *SA,construct_BWT_indexes1748,50165
divsufsort(const unsigned char *T, int *SA, int n, int openMP) {divsufsort1847,52699
divbwt(const unsigned char *T, unsigned char *U, int *A, int n, unsigned char * num_indexes, int * indexes, int openMP) {divbwt1876,53440

fastcover.c,3462
#define ZDICT_STATIC_LINKING_ONLYZDICT_STATIC_LINKING_ONLY26,843
#define FASTCOVER_MAX_SAMPLES_SIZE FASTCOVER_MAX_SAMPLES_SIZE34,1000
#define FASTCOVER_MAX_F FASTCOVER_MAX_F35,1093
#define FASTCOVER_MAX_ACCEL FASTCOVER_MAX_ACCEL36,1120
#define FASTCOVER_DEFAULT_SPLITPOINT FASTCOVER_DEFAULT_SPLITPOINT37,1151
#define DEFAULT_F DEFAULT_F38,1193
#define DEFAULT_ACCEL DEFAULT_ACCEL39,1214
static int g_displayLevel = 2;g_displayLevel46,1367
#undef  DISPLAYDISPLAY48,1405
#define DISPLAY(DISPLAY49,1421
#undef  LOCALDISPLAYLEVELLOCALDISPLAYLEVEL54,1749
#define LOCALDISPLAYLEVEL(LOCALDISPLAYLEVEL55,1775
#undef  DISPLAYLEVELDISPLAYLEVEL59,2094
#define DISPLAYLEVEL(DISPLAYLEVEL60,2115
static const clock_t g_refreshRate = CLOCKS_PER_SEC * 15 / 100;g_refreshRate63,2222
static clock_t g_time = 0;g_time64,2286
#undef  LOCALDISPLAYUPDATELOCALDISPLAYUPDATE66,2320
#define LOCALDISPLAYUPDATE(LOCALDISPLAYUPDATE67,2347
#undef  DISPLAYUPDATEDISPLAYUPDATE74,2839
#define DISPLAYUPDATE(DISPLAYUPDATE75,2861
static size_t FASTCOVER_hashPtrToIndex(const void* p, U32 f, unsigned d) {FASTCOVER_hashPtrToIndex84,3130
  unsigned finalize;    /* Percentage of training samples used for ZDICT_finalizeDictionary */finalize96,3405
  unsigned skip;        /* Number of dmer skipped between each dmer counted in computeFrequency */skip97,3500
} FASTCOVER_accel_t;FASTCOVER_accel_t98,3599
static const FASTCOVER_accel_t FASTCOVER_defaultAccelParameters[FASTCOVER_MAX_ACCEL+1] = {FASTCOVER_defaultAccelParameters101,3622
  const BYTE *samples;samples120,4230
  size_t *offsets;offsets121,4253
  const size_t *samplesSizes;samplesSizes122,4272
  size_t nbSamples;nbSamples123,4302
  size_t nbTrainSamples;nbTrainSamples124,4322
  size_t nbTestSamples;nbTestSamples125,4347
  size_t nbDmers;nbDmers126,4371
  U32 *freqs;freqs127,4389
  unsigned d;d128,4403
  unsigned f;f129,4417
  FASTCOVER_accel_t accelParams;accelParams130,4431
} FASTCOVER_ctx_t;FASTCOVER_ctx_t131,4464
static COVER_segment_t FASTCOVER_selectSegment(const FASTCOVER_ctx_t *ctx,FASTCOVER_selectSegment148,4971
static int FASTCOVER_checkParameters(ZDICT_cover_params_t parameters,FASTCOVER_checkParameters221,7654
FASTCOVER_ctx_destroy(FASTCOVER_ctx_t* ctx)FASTCOVER_ctx_destroy260,8575
FASTCOVER_computeFrequency(U32* freqs, const FASTCOVER_ctx_t* ctx)FASTCOVER_computeFrequency276,8833
FASTCOVER_ctx_init(FASTCOVER_ctx_t* ctx,FASTCOVER_ctx_init305,9834
FASTCOVER_buildDictionary(const FASTCOVER_ctx_t* ctx,FASTCOVER_buildDictionary392,13205
typedef struct FASTCOVER_tryParameters_data_s {FASTCOVER_tryParameters_data_s452,15374
    const FASTCOVER_ctx_t* ctx;ctx453,15422
    COVER_best_t* best;best454,15454
    size_t dictBufferCapacity;dictBufferCapacity455,15478
    ZDICT_cover_params_t parameters;parameters456,15509
} FASTCOVER_tryParameters_data_t;FASTCOVER_tryParameters_data_t457,15546
static void FASTCOVER_tryParameters(void *opaque)FASTCOVER_tryParameters465,15825
FASTCOVER_convertToCoverParams(ZDICT_fastCover_params_t fastCoverParams,FASTCOVER_convertToCoverParams510,17760
FASTCOVER_convertToFastCoverParams(ZDICT_cover_params_t coverParams,FASTCOVER_convertToFastCoverParams524,18269
ZDICT_trainFromBuffer_fastCover(void* dictBuffer, size_t dictBufferCapacity,ZDICT_trainFromBuffer_fastCover541,18921
ZDICT_optimizeTrainFromBuffer_fastCover(ZDICT_optimizeTrainFromBuffer_fastCover610,22049

zstd_ldm.c,2255
#define LDM_BUCKET_SIZE_LOG LDM_BUCKET_SIZE_LOG17,553
#define LDM_MIN_MATCH_LENGTH LDM_MIN_MATCH_LENGTH18,583
#define LDM_HASH_RLOG LDM_HASH_RLOG19,615
#define LDM_HASH_CHAR_OFFSET LDM_HASH_CHAR_OFFSET20,639
void ZSTD_ldm_adjustParameters(ldmParams_t* params,ZSTD_ldm_adjustParameters22,672
size_t ZSTD_ldm_getTableSize(ldmParams_t params)ZSTD_ldm_getTableSize42,1594
size_t ZSTD_ldm_getMaxNbSeq(ldmParams_t params, size_t maxChunkSize)ZSTD_ldm_getMaxNbSeq52,2065
static U32 ZSTD_ldm_getSmallHash(U64 value, U32 numBits)ZSTD_ldm_getSmallHash61,2357
static U32 ZSTD_ldm_getChecksum(U64 hash, U32 numBitsToDiscard)ZSTD_ldm_getChecksum70,2648
static U32 ZSTD_ldm_getTag(U64 hash, U32 hbits, U32 numTagBits)ZSTD_ldm_getTag82,3022
static ldmEntry_t* ZSTD_ldm_getBucket(ZSTD_ldm_getBucket94,3425
static void ZSTD_ldm_insertEntry(ldmState_t* ldmState,ZSTD_ldm_insertEntry102,3706
static void ZSTD_ldm_makeEntryAndInsertByTag(ldmState_t* ldmState,ZSTD_ldm_makeEntryAndInsertByTag122,4610
static size_t ZSTD_ldm_countBackwardsMatch(ZSTD_ldm_countBackwardsMatch144,5604
static size_t ZSTD_ldm_countBackwardsMatch_2segments(ZSTD_ldm_countBackwardsMatch_2segments162,6188
static size_t ZSTD_ldm_fillFastTables(ZSTD_matchState_t* ms,ZSTD_ldm_fillFastTables185,7309
static U64 ZSTD_ldm_fillLdmHashTable(ldmState_t* state,ZSTD_ldm_fillLdmHashTable221,8210
void ZSTD_ldm_fillHashTable(ZSTD_ldm_fillHashTable241,9030
static void ZSTD_ldm_limitTableUpdate(ZSTD_matchState_t* ms, const BYTE* anchor)ZSTD_ldm_limitTableUpdate261,9751
static size_t ZSTD_ldm_generateSequences_internal(ZSTD_ldm_generateSequences_internal270,10027
static void ZSTD_ldm_reduceTable(ldmEntry_t* const table, U32 const size,ZSTD_ldm_reduceTable434,17164
size_t ZSTD_ldm_generateSequences(ZSTD_ldm_generateSequences444,17461
void ZSTD_ldm_skipSequences(rawSeqStore_t* rawSeqStore, size_t srcSize, U32 const minMatch) {ZSTD_ldm_skipSequences521,21215
static rawSeq maybeSplitSequence(rawSeqStore_t* rawSeqStore,maybeSplitSequence556,22490
void ZSTD_ldm_skipRawSeqStoreBytes(rawSeqStore_t* rawSeqStore, size_t nbBytes) {ZSTD_ldm_skipRawSeqStoreBytes580,23403
size_t ZSTD_ldm_blockCompress(rawSeqStore_t* rawSeqStore,ZSTD_ldm_blockCompress597,24048

debug.c,51
int g_debuglevel = DEBUGLEVEL;g_debuglevel24,814

hist.c,906
unsigned HIST_isError(size_t code) { return ERR_isError(code); }HIST_isError24,969
unsigned HIST_count_simple(unsigned* count, unsigned* maxSymbolValuePtr,HIST_count_simple29,1192
typedef enum { trustInput, checkMaxSymbolValue } HIST_checkInput_e;trustInput56,1955
typedef enum { trustInput, checkMaxSymbolValue } HIST_checkInput_e;checkMaxSymbolValue56,1955
typedef enum { trustInput, checkMaxSymbolValue } HIST_checkInput_e;HIST_checkInput_e56,1955
static size_t HIST_count_parallel_wksp(HIST_count_parallel_wksp66,2516
size_t HIST_countFast_wksp(unsigned* count, unsigned* maxSymbolValuePtr,HIST_countFast_wksp140,5279
size_t HIST_count_wksp(unsigned* count, unsigned* maxSymbolValuePtr,HIST_count_wksp154,6073
size_t HIST_countFast(unsigned* count, unsigned* maxSymbolValuePtr,HIST_countFast168,6856
size_t HIST_count(unsigned* count, unsigned* maxSymbolValuePtr,HIST_count175,7147

xxhash.c,7239
#    define XXH_FORCE_MEMORY_ACCESS XXH_FORCE_MEMORY_ACCESS34,1937
#    define XXH_FORCE_MEMORY_ACCESS XXH_FORCE_MEMORY_ACCESS38,2227
#  define XXH_FORCE_NATIVE_FORMAT XXH_FORCE_NATIVE_FORMAT58,3287
#    define XXH_FORCE_ALIGN_CHECK XXH_FORCE_ALIGN_CHECK69,3746
#    define XXH_FORCE_ALIGN_CHECK XXH_FORCE_ALIGN_CHECK71,3790
#define ZSTD_DEPS_NEED_MALLOCZSTD_DEPS_NEED_MALLOC81,4091
static void* XXH_malloc(size_t s) { return ZSTD_malloc(s); }XXH_malloc83,4195
static void  XXH_free  (void* p)  { ZSTD_free(p); }XXH_free84,4256
static void* XXH_memcpy(void* dest, const void* src, size_t size) { return ZSTD_memcpy(dest,src,size); }XXH_memcpy85,4308
#  define XXH_STATIC_LINKING_ONLYXXH_STATIC_LINKING_ONLY88,4446
static U32 XXH_read32(const void* memPtr) { return *(const U32*) memPtr; }XXH_read32107,4963
static U64 XXH_read64(const void* memPtr) { return *(const U64*) memPtr; }XXH_read64108,5038
typedef union { U32 u32; U64 u64; } __attribute__((packed)) unalign;u32114,5342
typedef union { U32 u32; U64 u64; } __attribute__((packed)) unalign;u64114,5342
typedef union { U32 u32; U64 u64; } __attribute__((packed)) unalign;unalign114,5342
static U32 XXH_read32(const void* ptr) { return ((const unalign*)ptr)->u32; }XXH_read32116,5412
static U64 XXH_read64(const void* ptr) { return ((const unalign*)ptr)->u64; }XXH_read64117,5490
static U32 XXH_read32(const void* memPtr)XXH_read32125,5685
static U64 XXH_read64(const void* memPtr)XXH_read64132,5805
#define GCC_VERSION GCC_VERSION145,6103
#  define XXH_rotl32(XXH_rotl32149,6269
#  define XXH_rotl64(XXH_rotl64150,6306
#  define XXH_rotl32(XXH_rotl32154,6401
#  define XXH_rotl32(XXH_rotl32156,6451
#  define XXH_rotl64(XXH_rotl64158,6513
#  define XXH_swap32 XXH_swap32162,6622
#  define XXH_swap64 XXH_swap64163,6659
#  define XXH_swap32 XXH_swap32165,6722
#  define XXH_swap64 XXH_swap64166,6761
static U32 XXH_swap32 (U32 x)XXH_swap32168,6806
static U64 XXH_swap64 (U64 x)XXH_swap64175,6999
typedef enum { XXH_bigEndian=0, XXH_littleEndian=1 } XXH_endianess;XXH_bigEndian192,7546
typedef enum { XXH_bigEndian=0, XXH_littleEndian=1 } XXH_endianess;XXH_littleEndian192,7546
typedef enum { XXH_bigEndian=0, XXH_littleEndian=1 } XXH_endianess;XXH_endianess192,7546
    static const int g_one = 1;g_one196,7741
#   define XXH_CPU_LITTLE_ENDIAN XXH_CPU_LITTLE_ENDIAN197,7773
typedef enum { XXH_aligned, XXH_unaligned } XXH_alignment;XXH_aligned204,7920
typedef enum { XXH_aligned, XXH_unaligned } XXH_alignment;XXH_unaligned204,7920
typedef enum { XXH_aligned, XXH_unaligned } XXH_alignment;XXH_alignment204,7920
FORCE_INLINE_TEMPLATE U32 XXH_readLE32_align(const void* ptr, XXH_endianess endian, XXH_alignment align)XXH_readLE32_align206,7980
FORCE_INLINE_TEMPLATE U32 XXH_readLE32(const void* ptr, XXH_endianess endian)XXH_readLE32214,8309
static U32 XXH_readBE32(const void* ptr)XXH_readBE32219,8451
FORCE_INLINE_TEMPLATE U64 XXH_readLE64_align(const void* ptr, XXH_endianess endian, XXH_alignment align)XXH_readLE64_align224,8579
FORCE_INLINE_TEMPLATE U64 XXH_readLE64(const void* ptr, XXH_endianess endian)XXH_readLE64232,8908
static U64 XXH_readBE64(const void* ptr)XXH_readBE64237,9050
#define XXH_STATIC_ASSERT(XXH_STATIC_ASSERT246,9271
static const U32 PRIME32_1 = 2654435761U;PRIME32_1252,9496
static const U32 PRIME32_2 = 2246822519U;PRIME32_2253,9538
static const U32 PRIME32_3 = 3266489917U;PRIME32_3254,9580
static const U32 PRIME32_4 =  668265263U;PRIME32_4255,9622
static const U32 PRIME32_5 =  374761393U;PRIME32_5256,9664
static const U64 PRIME64_1 = 11400714785074694791ULL;PRIME64_1258,9707
static const U64 PRIME64_2 = 14029467366897019727ULL;PRIME64_2259,9761
static const U64 PRIME64_3 =  1609587929392839161ULL;PRIME64_3260,9815
static const U64 PRIME64_4 =  9650029242287828579ULL;PRIME64_4261,9869
static const U64 PRIME64_5 =  2870177450012600261ULL;PRIME64_5262,9923
XXH_PUBLIC_API unsigned XXH_versionNumber (void) { return XXH_VERSION_NUMBER; }XXH_versionNumber264,9978
XXH_PUBLIC_API void XXH32_copyState(XXH32_state_t* restrict dstState, const XXH32_state_t* restrict srcState)XXH32_copyState270,10129
XXH_PUBLIC_API void XXH64_copyState(XXH64_state_t* restrict dstState, const XXH64_state_t* restrict srcState)XXH64_copyState275,10300
static U32 XXH32_round(U32 seed, U32 input)XXH32_round285,10560
FORCE_INLINE_TEMPLATE U32 XXH32_endian_align(const void* input, size_t len, U32 seed, XXH_endianess endian, XXH_alignment align)XXH32_endian_align293,10714
#define XXH_get32bits(XXH_get32bits298,10930
XXH_PUBLIC_API unsigned int XXH32 (const void* input, size_t len, unsigned int seed)XXH32350,12164
static U64 XXH64_round(U64 acc, U64 input)XXH64_round377,13253
static U64 XXH64_mergeRound(U64 acc, U64 val)XXH64_mergeRound385,13401
FORCE_INLINE_TEMPLATE U64 XXH64_endian_align(const void* input, size_t len, U64 seed, XXH_endianess endian, XXH_alignment align)XXH64_endian_align393,13556
#define XXH_get64bits(XXH_get64bits398,13778
XXH_PUBLIC_API unsigned long long XXH64 (const void* input, size_t len, unsigned long long seed)XXH64462,15370
XXH_PUBLIC_API XXH32_state_t* XXH32_createState(void)XXH32_createState493,16604
XXH_PUBLIC_API XXH_errorcode XXH32_freeState(XXH32_state_t* statePtr)XXH32_freeState497,16724
XXH_PUBLIC_API XXH64_state_t* XXH64_createState(void)XXH64_createState503,16842
XXH_PUBLIC_API XXH_errorcode XXH64_freeState(XXH64_state_t* statePtr)XXH64_freeState507,16962
XXH_PUBLIC_API XXH_errorcode XXH32_reset(XXH32_state_t* statePtr, unsigned int seed)XXH32_reset516,17102
XXH_PUBLIC_API XXH_errorcode XXH64_reset(XXH64_state_t* statePtr, unsigned long long seed)XXH64_reset529,17606
FORCE_INLINE_TEMPLATE XXH_errorcode XXH32_update_endian (XXH32_state_t* state, const void* input, size_t len, XXH_endianess endian)XXH32_update_endian542,18116
XXH_PUBLIC_API XXH_errorcode XXH32_update (XXH32_state_t* state_in, const void* input, size_t len)XXH32_update600,20067
FORCE_INLINE_TEMPLATE U32 XXH32_digest_endian (const XXH32_state_t* state, XXH_endianess endian)XXH32_digest_endian612,20478
XXH_PUBLIC_API unsigned int XXH32_digest (const XXH32_state_t* state_in)XXH32_digest648,21367
FORCE_INLINE_TEMPLATE XXH_errorcode XXH64_update_endian (XXH64_state_t* state, const void* input, size_t len, XXH_endianess endian)XXH64_update_endian662,21751
XXH_PUBLIC_API XXH_errorcode XXH64_update (XXH64_state_t* state_in, const void* input, size_t len)XXH64_update719,23592
FORCE_INLINE_TEMPLATE U64 XXH64_digest_endian (const XXH64_state_t* state, XXH_endianess endian)XXH64_digest_endian731,24003
XXH_PUBLIC_API unsigned long long XXH64_digest (const XXH64_state_t* state_in)XXH64_digest783,25362
XXH_PUBLIC_API void XXH32_canonicalFromHash(XXH32_canonical_t* dst, XXH32_hash_t hash)XXH32_canonicalFromHash804,26213
XXH_PUBLIC_API void XXH64_canonicalFromHash(XXH64_canonical_t* dst, XXH64_hash_t hash)XXH64_canonicalFromHash811,26478
XXH_PUBLIC_API XXH32_hash_t XXH32_hashFromCanonical(const XXH32_canonical_t* src)XXH32_hashFromCanonical818,26743
XXH_PUBLIC_API XXH64_hash_t XXH64_hashFromCanonical(const XXH64_canonical_t* src)XXH64_hashFromCanonical823,26860

bitstream.h,3157
#define BITSTREAM_H_MODULEBITSTREAM_H_MODULE15,667
#define STREAM_ACCUMULATOR_MIN_32 STREAM_ACCUMULATOR_MIN_3246,1620
#define STREAM_ACCUMULATOR_MIN_64 STREAM_ACCUMULATOR_MIN_6447,1658
#define STREAM_ACCUMULATOR_MIN STREAM_ACCUMULATOR_MIN48,1696
    size_t bitContainer;bitContainer59,2197
    unsigned bitPos;bitPos60,2222
    char*  startPtr;startPtr61,2243
    char*  ptr;ptr62,2264
    char*  endPtr;endPtr63,2280
} BIT_CStream_t;BIT_CStream_t64,2299
    size_t   bitContainer;bitContainer93,3703
    unsigned bitsConsumed;bitsConsumed94,3730
    const char* ptr;ptr95,3757
    const char* start;start96,3778
    const char* limitPtr;limitPtr97,3801
} BIT_DStream_t;BIT_DStream_t98,3827
typedef enum { BIT_DStream_unfinished = 0,BIT_DStream_unfinished100,3845
               BIT_DStream_endOfBuffer = 1,BIT_DStream_endOfBuffer101,3888
               BIT_DStream_completed = 2,BIT_DStream_completed102,3932
               BIT_DStream_overflow = 3 } BIT_DStream_status;  /* result of BIT_reloadDStream() */BIT_DStream_overflow103,3974
               BIT_DStream_overflow = 3 } BIT_DStream_status;  /* result of BIT_reloadDStream() */BIT_DStream_status103,3974
MEM_STATIC unsigned BIT_highbit32 (U32 val)BIT_highbit32140,5800
static const unsigned BIT_mask[] = {BIT_mask172,6876
#define BIT_MASK_SIZE BIT_MASK_SIZE179,7306
MEM_STATIC size_t BIT_initCStream(BIT_CStream_t* bitC,BIT_initCStream188,7696
MEM_STATIC void BIT_addBits(BIT_CStream_t* bitC,BIT_addBits203,8233
MEM_STATIC void BIT_addBitsFast(BIT_CStream_t* bitC,BIT_addBitsFast216,8704
MEM_STATIC void BIT_flushBitsFast(BIT_CStream_t* bitC)BIT_flushBitsFast228,9133
MEM_STATIC void BIT_flushBits(BIT_CStream_t* bitC)BIT_flushBits244,9718
MEM_STATIC size_t BIT_closeCStream(BIT_CStream_t* bitC)BIT_closeCStream259,10238
MEM_STATIC size_t BIT_initDStream(BIT_DStream_t* bitD, const void* srcBuffer, size_t srcSize)BIT_initDStream277,10927
MEM_STATIC FORCE_INLINE_ATTR size_t BIT_getUpperBits(size_t bitContainer, U32 const start)BIT_getUpperBits325,13052
MEM_STATIC FORCE_INLINE_ATTR size_t BIT_getMiddleBits(size_t bitContainer, U32 const start, U32 const nbBits)BIT_getMiddleBits330,13182
MEM_STATIC FORCE_INLINE_ATTR size_t BIT_getLowerBits(size_t bitContainer, U32 const nbBits)BIT_getLowerBits338,13530
MEM_STATIC  FORCE_INLINE_ATTR size_t BIT_lookBits(const BIT_DStream_t*  bitD, U32 nbBits)BIT_lookBits354,14004
MEM_STATIC size_t BIT_lookBitsFast(const BIT_DStream_t* bitD, U32 nbBits)BIT_lookBitsFast370,14720
MEM_STATIC FORCE_INLINE_ATTR void BIT_skipBits(BIT_DStream_t* bitD, U32 nbBits)BIT_skipBits377,14985
MEM_STATIC FORCE_INLINE_ATTR size_t BIT_readBits(BIT_DStream_t* bitD, unsigned nbBits)BIT_readBits386,15299
MEM_STATIC size_t BIT_readBitsFast(BIT_DStream_t* bitD, unsigned nbBits)BIT_readBitsFast395,15573
MEM_STATIC BIT_DStream_status BIT_reloadDStreamFast(BIT_DStream_t* bitD)BIT_reloadDStreamFast409,16076
MEM_STATIC BIT_DStream_status BIT_reloadDStream(BIT_DStream_t* bitD)BIT_reloadDStream425,16797
MEM_STATIC unsigned BIT_endOfDStream(const BIT_DStream_t* DStream)BIT_endOfDStream454,17949

zbuff.h,632
#define ZSTD_BUFFERED_H_23987ZSTD_BUFFERED_H_2398725,827
#  define ZBUFF_DEPRECATED(ZBUFF_DEPRECATED45,1550
#    define ZBUFF_DEPRECATED(ZBUFF_DEPRECATED48,1718
#    define ZBUFF_DEPRECATED(ZBUFF_DEPRECATED50,1886
#    define ZBUFF_DEPRECATED(ZBUFF_DEPRECATED52,2018
#    define ZBUFF_DEPRECATED(ZBUFF_DEPRECATED54,2122
#    define ZBUFF_DEPRECATED(ZBUFF_DEPRECATED57,2301
typedef ZSTD_CStream ZBUFF_CCtx;ZBUFF_CCtx71,2806
typedef ZSTD_DStream ZBUFF_DCtx;ZBUFF_DCtx123,6508
#define ZBUFF_STATIC_H_30298098432ZBUFF_STATIC_H_30298098432178,9935
#define ZSTD_STATIC_LINKING_ONLY ZSTD_STATIC_LINKING_ONLY188,10435

zstd_v01.h,244
#define ZSTD_V01_H_28739879432ZSTD_V01_H_2873987943212,417
typedef struct ZSTDv01_Dctx_s ZSTDv01_Dctx;ZSTDv01_Dctx60,2405
#define ZSTDv01_magicNumber ZSTDv01_magicNumber86,3591
#define ZSTDv01_magicNumberLE ZSTDv01_magicNumberLE87,3659

zstd_v07.c,37401
#  define XXH_STATIC_LINKING_ONLY XXH_STATIC_LINKING_ONLY18,576
#define FSEv07_STATIC_LINKING_ONLY FSEv07_STATIC_LINKING_ONLY23,714
#define HUFv07_STATIC_LINKING_ONLY HUFv07_STATIC_LINKING_ONLY24,777
#define ZSTDv07_STATIC_LINKING_ONLYZSTDv07_STATIC_LINKING_ONLY25,848
#define ZSTDv07_MAGIC_SKIPPABLE_START ZSTDv07_MAGIC_SKIPPABLE_START40,1398
#define ZSTDv07_WINDOWLOG_MAX_32 ZSTDv07_WINDOWLOG_MAX_3242,1450
#define ZSTDv07_WINDOWLOG_MAX_64 ZSTDv07_WINDOWLOG_MAX_6443,1487
#define ZSTDv07_WINDOWLOG_MAX ZSTDv07_WINDOWLOG_MAX44,1524
#define ZSTDv07_WINDOWLOG_MIN ZSTDv07_WINDOWLOG_MIN45,1633
#define ZSTDv07_CHAINLOG_MAX ZSTDv07_CHAINLOG_MAX46,1670
#define ZSTDv07_CHAINLOG_MIN ZSTDv07_CHAINLOG_MIN47,1729
#define ZSTDv07_HASHLOG_MAX ZSTDv07_HASHLOG_MAX48,1766
#define ZSTDv07_HASHLOG_MIN ZSTDv07_HASHLOG_MIN49,1822
#define ZSTDv07_HASHLOG3_MAX ZSTDv07_HASHLOG3_MAX50,1859
#define ZSTDv07_SEARCHLOG_MAX ZSTDv07_SEARCHLOG_MAX51,1896
#define ZSTDv07_SEARCHLOG_MIN ZSTDv07_SEARCHLOG_MIN52,1955
#define ZSTDv07_SEARCHLENGTH_MAX ZSTDv07_SEARCHLENGTH_MAX53,1992
#define ZSTDv07_SEARCHLENGTH_MIN ZSTDv07_SEARCHLENGTH_MIN54,2029
#define ZSTDv07_TARGETLENGTH_MIN ZSTDv07_TARGETLENGTH_MIN55,2066
#define ZSTDv07_TARGETLENGTH_MAX ZSTDv07_TARGETLENGTH_MAX56,2103
#define ZSTDv07_FRAMEHEADERSIZE_MAX ZSTDv07_FRAMEHEADERSIZE_MAX58,2141
static const size_t ZSTDv07_frameHeaderSize_min = 5;ZSTDv07_frameHeaderSize_min59,2211
static const size_t ZSTDv07_frameHeaderSize_max = ZSTDv07_FRAMEHEADERSIZE_MAX;ZSTDv07_frameHeaderSize_max60,2264
static const size_t ZSTDv07_skippableHeaderSize = 8;  /* magic number + skippable frame length */ZSTDv07_skippableHeaderSize61,2343
typedef void* (*ZSTDv07_allocFunction) (void* opaque, size_t size);ZSTDv07_allocFunction65,2484
typedef void  (*ZSTDv07_freeFunction) (void* opaque, void* address);ZSTDv07_freeFunction66,2552
typedef struct { ZSTDv07_allocFunction customAlloc; ZSTDv07_freeFunction customFree; void* opaque; } ZSTDv07_customMem;customAlloc67,2621
typedef struct { ZSTDv07_allocFunction customAlloc; ZSTDv07_freeFunction customFree; void* opaque; } ZSTDv07_customMem;customFree67,2621
typedef struct { ZSTDv07_allocFunction customAlloc; ZSTDv07_freeFunction customFree; void* opaque; } ZSTDv07_customMem;opaque67,2621
typedef struct { ZSTDv07_allocFunction customAlloc; ZSTDv07_freeFunction customFree; void* opaque; } ZSTDv07_customMem;ZSTDv07_customMem67,2621
#define ZSTDv07_BLOCKSIZE_ABSOLUTEMAX ZSTDv07_BLOCKSIZE_ABSOLUTEMAX174,9002
#define MEM_H_MODULEMEM_H_MODULE217,11254
#  define MEM_STATIC MEM_STATIC231,11594
#  define MEM_STATIC MEM_STATIC233,11749
#  define MEM_STATIC MEM_STATIC235,11808
#  define MEM_STATIC MEM_STATIC237,11851
  typedef  uint8_t BYTE;BYTE250,12356
  typedef uint16_t U16;U16251,12381
  typedef  int16_t S16;S16252,12405
  typedef uint32_t U32;U32253,12429
  typedef  int32_t S32;S32254,12453
  typedef uint64_t U64;U64255,12477
  typedef  int64_t S64;S64256,12501
  typedef unsigned char       BYTE;BYTE258,12531
  typedef unsigned short      U16;U16259,12567
  typedef   signed short      S16;S16260,12602
  typedef unsigned int        U32;U32261,12637
  typedef   signed int        S32;S32262,12672
  typedef unsigned long long  U64;U64263,12707
  typedef   signed long long  S64;S64264,12742
#    define MEM_FORCE_MEMORY_ACCESS MEM_FORCE_MEMORY_ACCESS286,14207
#    define MEM_FORCE_MEMORY_ACCESS MEM_FORCE_MEMORY_ACCESS289,14470
MEM_STATIC unsigned MEM_32bits(void) { return sizeof(size_t)==4; }MEM_32bits293,14525
MEM_STATIC unsigned MEM_64bits(void) { return sizeof(size_t)==8; }MEM_64bits294,14592
MEM_STATIC unsigned MEM_isLittleEndian(void)MEM_isLittleEndian296,14660
MEM_STATIC U16 MEM_read16(const void* memPtr) { return *(const U16*) memPtr; }MEM_read16306,15039
MEM_STATIC U32 MEM_read32(const void* memPtr) { return *(const U32*) memPtr; }MEM_read32307,15118
MEM_STATIC U64 MEM_read64(const void* memPtr) { return *(const U64*) memPtr; }MEM_read64308,15197
MEM_STATIC void MEM_write16(void* memPtr, U16 value) { *(U16*)memPtr = value; }MEM_write16310,15277
typedef union { U16 u16; U32 u32; U64 u64; size_t st; } __attribute__((packed)) unalign;u16316,15584
typedef union { U16 u16; U32 u32; U64 u64; size_t st; } __attribute__((packed)) unalign;u32316,15584
typedef union { U16 u16; U32 u32; U64 u64; size_t st; } __attribute__((packed)) unalign;u64316,15584
typedef union { U16 u16; U32 u32; U64 u64; size_t st; } __attribute__((packed)) unalign;st316,15584
typedef union { U16 u16; U32 u32; U64 u64; size_t st; } __attribute__((packed)) unalign;unalign316,15584
MEM_STATIC U16 MEM_read16(const void* ptr) { return ((const unalign*)ptr)->u16; }MEM_read16318,15674
MEM_STATIC U32 MEM_read32(const void* ptr) { return ((const unalign*)ptr)->u32; }MEM_read32319,15756
MEM_STATIC U64 MEM_read64(const void* ptr) { return ((const unalign*)ptr)->u64; }MEM_read64320,15838
MEM_STATIC void MEM_write16(void* memPtr, U16 value) { ((unalign*)memPtr)->u16 = value; }MEM_write16322,15921
MEM_STATIC U16 MEM_read16(const void* memPtr)MEM_read16329,16091
MEM_STATIC U32 MEM_read32(const void* memPtr)MEM_read32334,16202
MEM_STATIC U64 MEM_read64(const void* memPtr)MEM_read64339,16313
MEM_STATIC void MEM_write16(void* memPtr, U16 value)MEM_write16344,16424
MEM_STATIC U32 MEM_swap32(U32 in)MEM_swap32351,16563
MEM_STATIC U64 MEM_swap64(U64 in)MEM_swap64365,16959
MEM_STATIC U16 MEM_readLE16(const void* memPtr)MEM_readLE16386,17632
MEM_STATIC void MEM_writeLE16(void* memPtr, U16 val)MEM_writeLE16396,17852
MEM_STATIC U32 MEM_readLE32(const void* memPtr)MEM_readLE32407,18085
MEM_STATIC U64 MEM_readLE64(const void* memPtr)MEM_readLE64416,18260
MEM_STATIC size_t MEM_readLEST(const void* memPtr)MEM_readLEST424,18434
#define BITSTREAM_H_MODULEBITSTREAM_H_MODULE474,20434
    size_t   bitContainer;bitContainer500,21114
    unsigned bitsConsumed;bitsConsumed501,21141
    const char* ptr;ptr502,21168
    const char* start;start503,21189
} BITv07_DStream_t;BITv07_DStream_t504,21212
typedef enum { BITv07_DStream_unfinished = 0,BITv07_DStream_unfinished506,21233
               BITv07_DStream_endOfBuffer = 1,BITv07_DStream_endOfBuffer507,21279
               BITv07_DStream_completed = 2,BITv07_DStream_completed508,21326
               BITv07_DStream_overflow = 3 } BITv07_DStream_status;  /* result of BITv07_reloadDStream() */BITv07_DStream_overflow509,21371
               BITv07_DStream_overflow = 3 } BITv07_DStream_status;  /* result of BITv07_reloadDStream() */BITv07_DStream_status509,21371
MEM_STATIC unsigned BITv07_highbit32 (U32 val)BITv07_highbit32530,22307
MEM_STATIC size_t BITv07_initDStream(BITv07_DStream_t* bitD, const void* srcBuffer, size_t srcSize)BITv07_initDStream561,23391
 MEM_STATIC size_t BITv07_lookBits(const BITv07_DStream_t* bitD, U32 nbBits)BITv07_lookBits596,25364
MEM_STATIC size_t BITv07_lookBitsFast(const BITv07_DStream_t* bitD, U32 nbBits)BITv07_lookBitsFast604,25692
MEM_STATIC void BITv07_skipBits(BITv07_DStream_t* bitD, U32 nbBits)BITv07_skipBits610,25938
MEM_STATIC size_t BITv07_readBits(BITv07_DStream_t* bitD, U32 nbBits)BITv07_readBits615,26045
MEM_STATIC size_t BITv07_readBitsFast(BITv07_DStream_t* bitD, U32 nbBits)BITv07_readBitsFast624,26311
MEM_STATIC BITv07_DStream_status BITv07_reloadDStream(BITv07_DStream_t* bitD)BITv07_reloadDStream631,26503
MEM_STATIC unsigned BITv07_endOfDStream(const BITv07_DStream_t* DStream)BITv07_endOfDStream662,27762
#define FSEv07_HFSEv07_H706,29771
typedef unsigned FSEv07_DTable;   /* don't allocate that. It's just a way to be more restrictive than void* */FSEv07_DTable763,31971
#define FSEv07_NCOUNTBOUND FSEv07_NCOUNTBOUND815,34809
#define FSEv07_BLOCKBOUND(FSEv07_BLOCKBOUND816,34840
#define FSEv07_DTABLE_SIZE_U32(FSEv07_DTABLE_SIZE_U32819,34996
    size_t      state;state844,36077
    const void* table;   /* precise table may vary, depending on U16 */table845,36100
} FSEv07_DState_t;FSEv07_DState_t846,36172
    U16 tableLog;tableLog865,36761
    U16 fastMode;fastMode866,36779
} FSEv07_DTableHeader;   /* sizeof U32 */FSEv07_DTableHeader867,36797
    unsigned short newState;newState871,36857
    unsigned char  symbol;symbol872,36886
    unsigned char  nbBits;nbBits873,36913
} FSEv07_decode_t;   /* size == U32 */FSEv07_decode_t874,36940
MEM_STATIC void FSEv07_initDState(FSEv07_DState_t* DStatePtr, BITv07_DStream_t* bitD, const FSEv07_DTable* dt)FSEv07_initDState876,36980
MEM_STATIC BYTE FSEv07_peekSymbol(const FSEv07_DState_t* DStatePtr)FSEv07_peekSymbol885,37330
MEM_STATIC void FSEv07_updateState(FSEv07_DState_t* DStatePtr, BITv07_DStream_t* bitD)FSEv07_updateState891,37526
MEM_STATIC BYTE FSEv07_decodeSymbol(FSEv07_DState_t* DStatePtr, BITv07_DStream_t* bitD)FSEv07_decodeSymbol899,37860
MEM_STATIC BYTE FSEv07_decodeSymbolFast(FSEv07_DState_t* DStatePtr, BITv07_DStream_t* bitD)FSEv07_decodeSymbolFast912,38348
#define FSEv07_MAX_MEMORY_USAGE FSEv07_MAX_MEMORY_USAGE935,39261
#define FSEv07_DEFAULT_MEMORY_USAGE FSEv07_DEFAULT_MEMORY_USAGE936,39296
#define FSEv07_MAX_SYMBOL_VALUE FSEv07_MAX_SYMBOL_VALUE941,39444
#define FSEv07_FUNCTION_TYPE FSEv07_FUNCTION_TYPE947,39650
#define FSEv07_FUNCTION_EXTENSIONFSEv07_FUNCTION_EXTENSION948,39684
#define FSEv07_DECODE_TYPE FSEv07_DECODE_TYPE949,39718
#define FSEv07_MAX_TABLELOG FSEv07_MAX_TABLELOG958,39951
#define FSEv07_MAX_TABLESIZE FSEv07_MAX_TABLESIZE959,40008
#define FSEv07_MAXTABLESIZE_MASK FSEv07_MAXTABLESIZE_MASK960,40063
#define FSEv07_DEFAULT_TABLELOG FSEv07_DEFAULT_TABLELOG961,40121
#define FSEv07_MIN_TABLELOG FSEv07_MIN_TABLELOG962,40185
#define FSEv07_TABLELOG_ABSOLUTE_MAX FSEv07_TABLELOG_ABSOLUTE_MAX964,40216
#define FSEv07_TABLESTEP(FSEv07_TABLESTEP969,40398
#define HUFv07_H_298734234HUFv07_H_2987342341014,42342
#define HUFv07_BLOCKSIZE_MAX HUFv07_BLOCKSIZE_MAX1041,43220
#define HUFv07_TABLELOG_ABSOLUTEMAX HUFv07_TABLELOG_ABSOLUTEMAX1055,43585
#define HUFv07_TABLELOG_MAX HUFv07_TABLELOG_MAX1056,43710
#define HUFv07_TABLELOG_DEFAULT HUFv07_TABLELOG_DEFAULT1057,43857
#define HUFv07_SYMBOLVALUE_MAX HUFv07_SYMBOLVALUE_MAX1058,43945
#define HUFv07_BLOCKBOUND(HUFv07_BLOCKBOUND1068,44224
typedef U32 HUFv07_DTable;HUFv07_DTable1071,44389
#define HUFv07_DTABLE_SIZE(HUFv07_DTABLE_SIZE1072,44416
#define HUFv07_CREATE_STATIC_DTABLEX2(HUFv07_CREATE_STATIC_DTABLEX21073,44483
#define HUFv07_CREATE_STATIC_DTABLEX4(HUFv07_CREATE_STATIC_DTABLEX41075,44651
unsigned FSEv07_isError(size_t code) { return ERR_isError(code); }FSEv07_isError1193,50841
const char* FSEv07_getErrorName(size_t code) { return ERR_getErrorName(code); }FSEv07_getErrorName1195,50909
unsigned HUFv07_isError(size_t code) { return ERR_isError(code); }HUFv07_isError1201,51147
const char* HUFv07_getErrorName(size_t code) { return ERR_getErrorName(code); }HUFv07_getErrorName1203,51215
static short FSEv07_abs(short a) { return (short)(a<0 ? -a : a); }FSEv07_abs1209,51461
size_t FSEv07_readNCount (short* normalizedCounter, unsigned* maxSVPtr, unsigned* tableLogPtr,FSEv07_readNCount1211,51529
size_t HUFv07_readStats(BYTE* huffWeight, size_t hwSize, U32* rankStats,HUFv07_readStats1310,54931
#  define FORCE_INLINE FORCE_INLINE1417,59823
#      define FORCE_INLINE FORCE_INLINE1424,60236
#      define FORCE_INLINE FORCE_INLINE1426,60318
#    define FORCE_INLINE FORCE_INLINE1429,60378
#define FSEv07_isError FSEv07_isError1437,60603
#define FSEv07_STATIC_ASSERT(FSEv07_STATIC_ASSERT1438,60638
typedef U32 DTable_max_t[FSEv07_DTABLE_SIZE_U32(FSEv07_MAX_TABLELOG)];DTable_max_t1444,60920
#define FSEv07_CAT(FSEv07_CAT1465,61523
#define FSEv07_FUNCTION_NAME(FSEv07_FUNCTION_NAME1466,61552
#define FSEv07_TYPE_NAME(FSEv07_TYPE_NAME1467,61602
FSEv07_DTable* FSEv07_createDTable (unsigned tableLog)FSEv07_createDTable1471,61675
void FSEv07_freeDTable (FSEv07_DTable* dt)FSEv07_freeDTable1477,61911
size_t FSEv07_buildDTable(FSEv07_DTable* dt, const short* normalizedCounter, unsigned maxSymbolValue, unsigned tableLog)FSEv07_buildDTable1482,61973
size_t FSEv07_buildDTable_rle (FSEv07_DTable* dt, BYTE symbolValue)FSEv07_buildDTable_rle1547,64576
size_t FSEv07_buildDTable_raw (FSEv07_DTable* dt, unsigned nbBits)FSEv07_buildDTable_raw1565,64970
FORCE_INLINE size_t FSEv07_decompress_usingDTable_generic(FSEv07_decompress_usingDTable_generic1591,65706
#define FSEv07_GETSYMBOL(FSEv07_GETSYMBOL1612,66397
size_t FSEv07_decompress_usingDTable(void* dst, size_t originalSize,FSEv07_decompress_usingDTable1659,67981
size_t FSEv07_decompress(void* dst, size_t maxDstSize, const void* cSrc, size_t cSrcSize)FSEv07_decompress1673,68551
#  define inline inline1742,71850
#  define inline inline1744,71882
#define HUFv07_STATIC_ASSERT(HUFv07_STATIC_ASSERT1757,72228
typedef struct { BYTE maxTableLog; BYTE tableType; BYTE tableLog; BYTE reserved; } DTableDesc;maxTableLog1764,72458
typedef struct { BYTE maxTableLog; BYTE tableType; BYTE tableLog; BYTE reserved; } DTableDesc;tableType1764,72458
typedef struct { BYTE maxTableLog; BYTE tableType; BYTE tableLog; BYTE reserved; } DTableDesc;tableLog1764,72458
typedef struct { BYTE maxTableLog; BYTE tableType; BYTE tableLog; BYTE reserved; } DTableDesc;reserved1764,72458
typedef struct { BYTE maxTableLog; BYTE tableType; BYTE tableLog; BYTE reserved; } DTableDesc;DTableDesc1764,72458
static DTableDesc HUFv07_getDTableDesc(const HUFv07_DTable* table)HUFv07_getDTableDesc1766,72554
typedef struct { BYTE byte; BYTE nbBits; } HUFv07_DEltX2;   /* single-symbol decoding */byte1778,72798
typedef struct { BYTE byte; BYTE nbBits; } HUFv07_DEltX2;   /* single-symbol decoding */nbBits1778,72798
typedef struct { BYTE byte; BYTE nbBits; } HUFv07_DEltX2;   /* single-symbol decoding */HUFv07_DEltX21778,72798
size_t HUFv07_readDTableX2 (HUFv07_DTable* DTable, const void* src, size_t srcSize)HUFv07_readDTableX21780,72888
static BYTE HUFv07_decodeSymbolX2(BITv07_DStream_t* Dstream, const HUFv07_DEltX2* dt, const U32 dtLog)HUFv07_decodeSymbolX21829,74621
#define HUFv07_DECODE_SYMBOLX2_0(HUFv07_DECODE_SYMBOLX2_01837,74906
#define HUFv07_DECODE_SYMBOLX2_1(HUFv07_DECODE_SYMBOLX2_11840,75017
#define HUFv07_DECODE_SYMBOLX2_2(HUFv07_DECODE_SYMBOLX2_21844,75173
static inline size_t HUFv07_decodeStreamX2(BYTE* p, BITv07_DStream_t* const bitDPtr, BYTE* const pEnd, const HUFv07_DEltX2* const dt, const U32 dtLog)HUFv07_decodeStreamX21848,75300
static size_t HUFv07_decompress1X2_usingDTable_internal(HUFv07_decompress1X2_usingDTable_internal1871,76133
size_t HUFv07_decompress1X2_usingDTable(HUFv07_decompress1X2_usingDTable1895,76888
size_t HUFv07_decompress1X2_DCtx (HUFv07_DTable* DCtx, void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv07_decompress1X2_DCtx1905,77238
size_t HUFv07_decompress1X2 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv07_decompress1X21917,77698
static size_t HUFv07_decompress4X2_usingDTable_internal(HUFv07_decompress4X2_usingDTable_internal1924,77936
size_t HUFv07_decompress4X2_usingDTable(HUFv07_decompress4X2_usingDTable2017,82352
size_t HUFv07_decompress4X2_DCtx (HUFv07_DTable* dctx, void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv07_decompress4X2_DCtx2028,82703
size_t HUFv07_decompress4X2 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv07_decompress4X22040,83163
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUFv07_DEltX4;  /* double-symbols decoding */sequence2050,83490
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUFv07_DEltX4;  /* double-symbols decoding */nbBits2050,83490
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUFv07_DEltX4;  /* double-symbols decoding */length2050,83490
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUFv07_DEltX4;  /* double-symbols decoding */HUFv07_DEltX42050,83490
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;symbol2052,83596
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;weight2052,83596
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;sortedSymbol_t2052,83596
static void HUFv07_fillDTableX4Level2(HUFv07_DEltX4* DTable, U32 sizeLog, const U32 consumed,HUFv07_fillDTableX4Level22054,83658
typedef U32 rankVal_t[HUFv07_TABLELOG_ABSOLUTEMAX][HUFv07_TABLELOG_ABSOLUTEMAX + 1];rankVal_t2094,85135
static void HUFv07_fillDTableX4(HUFv07_DEltX4* DTable, const U32 targetLog,HUFv07_fillDTableX42096,85221
size_t HUFv07_readDTableX4 (HUFv07_DTable* DTable, const void* src, size_t srcSize)HUFv07_readDTableX42138,87004
static U32 HUFv07_decodeSymbolX4(void* op, BITv07_DStream_t* DStream, const HUFv07_DEltX4* dt, const U32 dtLog)HUFv07_decodeSymbolX42219,90226
static U32 HUFv07_decodeLastSymbolX4(void* op, BITv07_DStream_t* DStream, const HUFv07_DEltX4* dt, const U32 dtLog)HUFv07_decodeLastSymbolX42227,90529
#define HUFv07_DECODE_SYMBOLX4_0(HUFv07_DECODE_SYMBOLX4_02242,91262
#define HUFv07_DECODE_SYMBOLX4_1(HUFv07_DECODE_SYMBOLX4_12245,91376
#define HUFv07_DECODE_SYMBOLX4_2(HUFv07_DECODE_SYMBOLX4_22249,91547
static inline size_t HUFv07_decodeStreamX4(BYTE* p, BITv07_DStream_t* bitDPtr, BYTE* const pEnd, const HUFv07_DEltX4* const dt, const U32 dtLog)HUFv07_decodeStreamX42253,91689
static size_t HUFv07_decompress1X4_usingDTable_internal(HUFv07_decompress1X4_usingDTable_internal2279,92605
size_t HUFv07_decompress1X4_usingDTable(HUFv07_decompress1X4_usingDTable2307,93497
size_t HUFv07_decompress1X4_DCtx (HUFv07_DTable* DCtx, void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv07_decompress1X4_DCtx2317,93847
size_t HUFv07_decompress1X4 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv07_decompress1X42329,94307
static size_t HUFv07_decompress4X4_usingDTable_internal(HUFv07_decompress4X4_usingDTable_internal2335,94543
size_t HUFv07_decompress4X4_usingDTable(HUFv07_decompress4X4_usingDTable2428,98957
size_t HUFv07_decompress4X4_DCtx (HUFv07_DTable* dctx, void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv07_decompress4X4_DCtx2439,99308
size_t HUFv07_decompress4X4 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv07_decompress4X42451,99761
size_t HUFv07_decompress1X_usingDTable(void* dst, size_t maxDstSize,HUFv07_decompress1X_usingDTable2462,100110
size_t HUFv07_decompress4X_usingDTable(void* dst, size_t maxDstSize,HUFv07_decompress4X_usingDTable2471,100600
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;tableTime2481,101091
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;decode256Time2481,101091
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;algo_time_t2481,101091
static const algo_time_t algoTime[16 /* Quantization */][3 /* single, double, quad */] =algoTime2482,101157
U32 HUFv07_selectDecoder (size_t dstSize, size_t cSrcSize)HUFv07_selectDecoder2508,102556
typedef size_t (*decompressionAlgo)(void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize);decompressionAlgo2521,103085
size_t HUFv07_decompress (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv07_decompress2523,103185
size_t HUFv07_decompress4X_DCtx (HUFv07_DTable* dctx, void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv07_decompress4X_DCtx2541,104106
size_t HUFv07_decompress4X_hufOnly (HUFv07_DTable* dctx, void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv07_decompress4X_hufOnly2555,104836
size_t HUFv07_decompress1X_DCtx (HUFv07_DTable* dctx, void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUFv07_decompress1X_DCtx2567,105394
unsigned ZSTDv07_isError(size_t code) { return ERR_isError(code); }ZSTDv07_isError2618,107878
const char* ZSTDv07_getErrorName(size_t code) { return ERR_getErrorName(code); }ZSTDv07_getErrorName2622,108054
unsigned ZBUFFv07_isError(size_t errorCode) { return ERR_isError(errorCode); }ZBUFFv07_isError2629,108296
const char* ZBUFFv07_getErrorName(size_t errorCode) { return ERR_getErrorName(errorCode); }ZBUFFv07_getErrorName2631,108376
static void* ZSTDv07_defaultAllocFunction(void* opaque, size_t size)ZSTDv07_defaultAllocFunction2635,108471
static void ZSTDv07_defaultFreeFunction(void* opaque, void* address)ZSTDv07_defaultFreeFunction2643,108692
#define ZSTDv07_CCOMMON_H_MODULEZSTDv07_CCOMMON_H_MODULE2681,110501
#define MIN(MIN2687,110635
#define MAX(MAX2688,110674
#define ZSTDv07_OPT_NUM ZSTDv07_OPT_NUM2694,110817
#define ZSTDv07_DICT_MAGIC ZSTDv07_DICT_MAGIC2695,110852
#define ZSTDv07_REP_NUM ZSTDv07_REP_NUM2697,110905
#define ZSTDv07_REP_INIT ZSTDv07_REP_INIT2698,110934
#define ZSTDv07_REP_MOVE ZSTDv07_REP_MOVE2699,110977
static const U32 repStartValue[ZSTDv07_REP_NUM] = { 1, 4, 8 };repStartValue2700,111024
#define KB KB2702,111088
#define MB MB2703,111109
#define GB GB2704,111130
#define BIT7 BIT72706,111152
#define BIT6 BIT62707,111169
#define BIT5 BIT52708,111186
#define BIT4 BIT42709,111203
#define BIT1 BIT12710,111220
#define BIT0 BIT02711,111237
#define ZSTDv07_WINDOWLOG_ABSOLUTEMIN ZSTDv07_WINDOWLOG_ABSOLUTEMIN2713,111255
static const size_t ZSTDv07_fcs_fieldSize[4] = { 0, 2, 4, 8 };ZSTDv07_fcs_fieldSize2714,111296
static const size_t ZSTDv07_did_fieldSize[4] = { 0, 1, 2, 4 };ZSTDv07_did_fieldSize2715,111359
#define ZSTDv07_BLOCKHEADERSIZE ZSTDv07_BLOCKHEADERSIZE2717,111423
static const size_t ZSTDv07_blockHeaderSize = ZSTDv07_BLOCKHEADERSIZE;ZSTDv07_blockHeaderSize2718,111563
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_compressed2719,111634
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_raw2719,111634
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_rle2719,111634
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_end2719,111634
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;blockType_t2719,111634
#define MIN_SEQUENCES_SIZE MIN_SEQUENCES_SIZE2721,111703
#define MIN_CBLOCK_SIZE MIN_CBLOCK_SIZE2722,111747
#define HufLog HufLog2724,111875
typedef enum { lbt_huffman, lbt_repeat, lbt_raw, lbt_rle } litBlockType_t;lbt_huffman2725,111893
typedef enum { lbt_huffman, lbt_repeat, lbt_raw, lbt_rle } litBlockType_t;lbt_repeat2725,111893
typedef enum { lbt_huffman, lbt_repeat, lbt_raw, lbt_rle } litBlockType_t;lbt_raw2725,111893
typedef enum { lbt_huffman, lbt_repeat, lbt_raw, lbt_rle } litBlockType_t;lbt_rle2725,111893
typedef enum { lbt_huffman, lbt_repeat, lbt_raw, lbt_rle } litBlockType_t;litBlockType_t2725,111893
#define LONGNBSEQ LONGNBSEQ2727,111969
#define MINMATCH MINMATCH2729,111995
#define EQUAL_READ32 EQUAL_READ322730,112014
#define Litbits Litbits2732,112038
#define MaxLit MaxLit2733,112057
#define MaxML MaxML2734,112091
#define MaxLL MaxLL2735,112109
#define MaxOff MaxOff2736,112127
#define MaxSeq MaxSeq2737,112145
#define MLFSELog MLFSELog2738,112220
#define LLFSELog LLFSELog2739,112242
#define OffFSELog OffFSELog2740,112264
#define FSEv07_ENCODING_RAW FSEv07_ENCODING_RAW2742,112287
#define FSEv07_ENCODING_RLE FSEv07_ENCODING_RLE2743,112321
#define FSEv07_ENCODING_STATIC FSEv07_ENCODING_STATIC2744,112355
#define FSEv07_ENCODING_DYNAMIC FSEv07_ENCODING_DYNAMIC2745,112389
#define ZSTD_CONTENTSIZE_ERROR ZSTD_CONTENTSIZE_ERROR2747,112424
static const U32 LL_bits[MaxLL+1] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,LL_bits2749,112469
static const S16 LL_defaultNorm[MaxLL+1] = { 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1,LL_defaultNorm2752,112693
static const U32 LL_defaultNormLog = 6;LL_defaultNormLog2755,112938
static const U32 ML_bits[MaxML+1] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,ML_bits2757,112979
static const S16 ML_defaultNorm[MaxML+1] = { 1, 4, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1,ML_defaultNorm2761,113292
static const U32 ML_defaultNormLog = 6;ML_defaultNormLog2765,113633
static const S16 OF_defaultNorm[MaxOff+1] = { 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1,OF_defaultNorm2767,113674
static const U32 OF_defaultNormLog = 5;OF_defaultNormLog2769,113855
static void ZSTDv07_copy8(void* dst, const void* src) { memcpy(dst, src, 8); }ZSTDv07_copy82775,114035
#define COPY8(COPY82776,114114
#define WILDCOPY_OVERLENGTH WILDCOPY_OVERLENGTH2780,114285
MEM_STATIC void ZSTDv07_wildcopy(void* dst, const void* src, ptrdiff_t length)ZSTDv07_wildcopy2781,114315
typedef struct ZSTDv07_stats_s ZSTDv07_stats_t;ZSTDv07_stats_t2795,114670
    U32 off;off2798,114736
    U32 len;len2799,114749
} ZSTDv07_match_t;ZSTDv07_match_t2800,114762
    U32 price;price2803,114799
    U32 off;off2804,114814
    U32 mlen;mlen2805,114827
    U32 litlen;litlen2806,114841
    U32 rep[ZSTDv07_REP_INIT];rep2807,114857
} ZSTDv07_optimal_t;ZSTDv07_optimal_t2808,114888
struct ZSTDv07_stats_s { U32 unused; };ZSTDv07_stats_s2810,114910
struct ZSTDv07_stats_s { U32 unused; };unused2810,114910
    void* buffer;buffer2813,114968
    U32*  offsetStart;offsetStart2814,114986
    U32*  offset;offset2815,115009
    BYTE* offCodeStart;offCodeStart2816,115027
    BYTE* litStart;litStart2817,115051
    BYTE* lit;lit2818,115071
    U16*  litLengthStart;litLengthStart2819,115086
    U16*  litLength;litLength2820,115112
    BYTE* llCodeStart;llCodeStart2821,115133
    U16*  matchLengthStart;matchLengthStart2822,115156
    U16*  matchLength;matchLength2823,115184
    BYTE* mlCodeStart;mlCodeStart2824,115207
    U32   longLengthID;   /* 0 == no longLength; 1 == Lit.longLength; 2 == Match.longLength; */longLengthID2825,115230
    U32   longLengthPos;longLengthPos2826,115326
    ZSTDv07_optimal_t* priceTable;priceTable2828,115365
    ZSTDv07_match_t* matchTable;matchTable2829,115400
    U32* matchLengthFreq;matchLengthFreq2830,115433
    U32* litLengthFreq;litLengthFreq2831,115459
    U32* litFreq;litFreq2832,115483
    U32* offCodeFreq;offCodeFreq2833,115501
    U32  matchLengthSum;matchLengthSum2834,115523
    U32  matchSum;matchSum2835,115548
    U32  litLengthSum;litLengthSum2836,115567
    U32  litSum;litSum2837,115590
    U32  offCodeSum;offCodeSum2838,115607
    U32  log2matchLengthSum;log2matchLengthSum2839,115628
    U32  log2matchSum;log2matchSum2840,115657
    U32  log2litLengthSum;log2litLengthSum2841,115680
    U32  log2litSum;log2litSum2842,115707
    U32  log2offCodeSum;log2offCodeSum2843,115728
    U32  factor;factor2844,115753
    U32  cachedPrice;cachedPrice2845,115770
    U32  cachedLitLength;cachedLitLength2846,115792
    const BYTE* cachedLiterals;cachedLiterals2847,115818
    ZSTDv07_stats_t stats;stats2848,115850
} seqStore_t;seqStore_t2849,115877
static const ZSTDv07_customMem defaultCustomMem = { ZSTDv07_defaultAllocFunction, ZSTDv07_defaultFreeFunction, NULL };defaultCustomMem2854,116010
#  define ZSTDv07_HEAPMODE ZSTDv07_HEAPMODE2897,118083
#define ZSTDv07_isError ZSTDv07_isError2915,118735
#define FSEv07_isError FSEv07_isError2916,118792
#define HUFv07_isError HUFv07_isError2917,118828
static void ZSTDv07_copy4(void* dst, const void* src) { memcpy(dst, src, 4); }ZSTDv07_copy42923,119006
typedef enum { ZSTDds_getFrameHeaderSize, ZSTDds_decodeFrameHeader,ZSTDds_getFrameHeaderSize2929,119240
typedef enum { ZSTDds_getFrameHeaderSize, ZSTDds_decodeFrameHeader,ZSTDds_decodeFrameHeader2929,119240
               ZSTDds_decodeBlockHeader, ZSTDds_decompressBlock,ZSTDds_decodeBlockHeader2930,119308
               ZSTDds_decodeBlockHeader, ZSTDds_decompressBlock,ZSTDds_decompressBlock2930,119308
               ZSTDds_decodeSkippableHeader, ZSTDds_skipFrame } ZSTDv07_dStage;ZSTDds_decodeSkippableHeader2931,119373
               ZSTDds_decodeSkippableHeader, ZSTDds_skipFrame } ZSTDv07_dStage;ZSTDds_skipFrame2931,119373
               ZSTDds_decodeSkippableHeader, ZSTDds_skipFrame } ZSTDv07_dStage;ZSTDv07_dStage2931,119373
struct ZSTDv07_DCtx_sZSTDv07_DCtx_s2933,119454
    FSEv07_DTable LLTable[FSEv07_DTABLE_SIZE_U32(LLFSELog)];LLTable2935,119478
    FSEv07_DTable OffTable[FSEv07_DTABLE_SIZE_U32(OffFSELog)];OffTable2936,119539
    FSEv07_DTable MLTable[FSEv07_DTABLE_SIZE_U32(MLFSELog)];MLTable2937,119602
    HUFv07_DTable hufTable[HUFv07_DTABLE_SIZE(HufLog)];  /* can accommodate HUFv07_decompress4X */hufTable2938,119663
    const void* previousDstEnd;previousDstEnd2939,119762
    const void* base;base2940,119794
    const void* vBase;vBase2941,119816
    const void* dictEnd;dictEnd2942,119839
    size_t expected;expected2943,119864
    U32 rep[3];rep2944,119885
    ZSTDv07_frameParams fParams;fParams2945,119901
    blockType_t bType;   /* used in ZSTDv07_decompressContinue(), to transfer blockType between header decoding and block decoding stages */bType2946,119934
    ZSTDv07_dStage stage;stage2947,120075
    U32 litEntropy;litEntropy2948,120101
    U32 fseEntropy;fseEntropy2949,120121
    XXH64_state_t xxhState;xxhState2950,120141
    size_t headerSize;headerSize2951,120169
    U32 dictID;dictID2952,120192
    const BYTE* litPtr;litPtr2953,120208
    ZSTDv07_customMem customMem;customMem2954,120232
    size_t litSize;litSize2955,120265
    BYTE litBuffer[ZSTDv07_BLOCKSIZE_ABSOLUTEMAX + WILDCOPY_OVERLENGTH];litBuffer2956,120285
    BYTE headerBuffer[ZSTDv07_FRAMEHEADERSIZE_MAX];headerBuffer2957,120358
size_t ZSTDv07_sizeofDCtx (const ZSTDv07_DCtx* dctx) { return sizeof(*dctx); }ZSTDv07_sizeofDCtx2962,120516
size_t ZSTDv07_estimateDCtxSize(void) { return sizeof(ZSTDv07_DCtx); }ZSTDv07_estimateDCtxSize2964,120596
size_t ZSTDv07_decompressBegin(ZSTDv07_DCtx* dctx)ZSTDv07_decompressBegin2966,120668
ZSTDv07_DCtx* ZSTDv07_createDCtx_advanced(ZSTDv07_customMem customMem)ZSTDv07_createDCtx_advanced2981,121149
ZSTDv07_DCtx* ZSTDv07_createDCtx(void)ZSTDv07_createDCtx2998,121664
size_t ZSTDv07_freeDCtx(ZSTDv07_DCtx* dctx)ZSTDv07_freeDCtx3003,121766
void ZSTDv07_copyDCtx(ZSTDv07_DCtx* dstDCtx, const ZSTDv07_DCtx* srcDCtx)ZSTDv07_copyDCtx3010,122007
static size_t ZSTDv07_frameHeaderSize(const void* src, size_t srcSize)ZSTDv07_frameHeaderSize3136,126088
size_t ZSTDv07_getFrameParams(ZSTDv07_frameParams* fparamsPtr, const void* src, size_t srcSize)ZSTDv07_getFrameParams3154,126884
unsigned long long ZSTDv07_getDecompressedSize(const void* src, size_t srcSize)ZSTDv07_getDecompressedSize3230,130180
static size_t ZSTDv07_decodeFrameHeader(ZSTDv07_DCtx* dctx, const void* src, size_t srcSize)ZSTDv07_decodeFrameHeader3242,130640
    blockType_t blockType;blockType3253,131030
    U32 origSize;origSize3254,131057
} blockProperties_t;blockProperties_t3255,131075
static size_t ZSTDv07_getcBlockSize(const void* src, size_t srcSize, blockProperties_t* bpPtr)ZSTDv07_getcBlockSize3259,131196
static size_t ZSTDv07_copyRawBlock(void* dst, size_t dstCapacity, const void* src, size_t srcSize)ZSTDv07_copyRawBlock3276,131714
static size_t ZSTDv07_decodeLiteralsBlock(ZSTDv07_DCtx* dctx,ZSTDv07_decodeLiteralsBlock3288,132058
static size_t ZSTDv07_buildSeqTable(FSEv07_DTable* DTable, U32 type, U32 max, U32 maxLog,ZSTDv07_buildSeqTable3422,137925
static size_t ZSTDv07_decodeSeqHeaders(int* nbSeqPtr,ZSTDv07_decodeSeqHeaders3452,139181
    size_t litLength;litLength3504,141318
    size_t matchLength;matchLength3505,141340
    size_t offset;offset3506,141364
} seq_t;seq_t3507,141383
    BITv07_DStream_t DStream;DStream3510,141410
    FSEv07_DState_t stateLL;stateLL3511,141440
    FSEv07_DState_t stateOffb;stateOffb3512,141469
    FSEv07_DState_t stateML;stateML3513,141500
    size_t prevOffset[ZSTDv07_REP_INIT];prevOffset3514,141529
} seqState_t;seqState_t3515,141570
static seq_t ZSTDv07_decodeSequence(seqState_t* seqState)ZSTDv07_decodeSequence3518,141586
size_t ZSTDv07_execSequence(BYTE* op,ZSTDv07_execSequence3593,145104
static size_t ZSTDv07_decompressSequences(ZSTDv07_decompressSequences3668,148199
static void ZSTDv07_checkContinuity(ZSTDv07_DCtx* dctx, const void* dst)ZSTDv07_checkContinuity3733,150985
static size_t ZSTDv07_decompressBlock_internal(ZSTDv07_DCtx* dctx,ZSTDv07_decompressBlock_internal3744,151348
size_t ZSTDv07_decompressBlock(ZSTDv07_DCtx* dctx,ZSTDv07_decompressBlock3762,152001
ZSTDLIBv07_API size_t ZSTDv07_insertBlock(ZSTDv07_DCtx* dctx, const void* blockStart, size_t blockSize)ZSTDv07_insertBlock3776,152491
static size_t ZSTDv07_generateNxBytes(void* dst, size_t dstCapacity, BYTE byte, size_t length)ZSTDv07_generateNxBytes3784,152734
static size_t ZSTDv07_decompressFrame(ZSTDv07_DCtx* dctx,ZSTDv07_decompressFrame3796,153054
static size_t ZSTDv07_decompress_usingPreparedDCtx(ZSTDv07_DCtx* dctx, const ZSTDv07_DCtx* refDCtx,ZSTDv07_decompress_usingPreparedDCtx3866,155959
size_t ZSTDv07_decompress_usingDict(ZSTDv07_DCtx* dctx,ZSTDv07_decompress_usingDict3876,156356
size_t ZSTDv07_decompressDCtx(ZSTDv07_DCtx* dctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize)ZSTDv07_decompressDCtx3887,156791
size_t ZSTDv07_decompress(void* dst, size_t dstCapacity, const void* src, size_t srcSize)ZSTDv07_decompress3893,156999
static void ZSTD_errorFrameSizeInfoLegacy(size_t* cSize, unsigned long long* dBound, size_t ret)ZSTD_errorFrameSizeInfoLegacy3910,157621
void ZSTDv07_findFrameSizeInfoLegacy(const void *src, size_t srcSize, size_t* cSize, unsigned long long* dBound)ZSTDv07_findFrameSizeInfoLegacy3916,157779
size_t ZSTDv07_nextSrcSizeToDecompress(ZSTDv07_DCtx* dctx)ZSTDv07_nextSrcSizeToDecompress3976,159761
int ZSTDv07_isSkipFrame(ZSTDv07_DCtx* dctx)ZSTDv07_isSkipFrame3981,159852
size_t ZSTDv07_decompressContinue(ZSTDv07_DCtx* dctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize)ZSTDv07_decompressContinue3989,160136
static size_t ZSTDv07_refDictContent(ZSTDv07_DCtx* dctx, const void* dict, size_t dictSize)ZSTDv07_refDictContent4088,164453
static size_t ZSTDv07_loadEntropy(ZSTDv07_DCtx* dctx, const void* const dict, size_t const dictSize)ZSTDv07_loadEntropy4097,164791
static size_t ZSTDv07_decompress_insertDictionary(ZSTDv07_DCtx* dctx, const void* dict, size_t dictSize)ZSTDv07_decompress_insertDictionary4147,167668
size_t ZSTDv07_decompressBegin_usingDict(ZSTDv07_DCtx* dctx, const void* dict, size_t dictSize)ZSTDv07_decompressBegin_usingDict4170,168500
struct ZSTDv07_DDict_s {ZSTDv07_DDict_s4184,168940
    void* dict;dict4185,168965
    size_t dictSize;dictSize4186,168981
    ZSTDv07_DCtx* refContext;refContext4187,169002
static ZSTDv07_DDict* ZSTDv07_createDDict_advanced(const void* dict, size_t dictSize, ZSTDv07_customMem customMem)ZSTDv07_createDDict_advanced4190,169084
ZSTDv07_DDict* ZSTDv07_createDDict(const void* dict, size_t dictSize)ZSTDv07_createDDict4228,170654
size_t ZSTDv07_freeDDict(ZSTDv07_DDict* ddict)ZSTDv07_freeDDict4234,170859
ZSTDLIBv07_API size_t ZSTDv07_decompress_usingDDict(ZSTDv07_DCtx* dctx,ZSTDv07_decompress_usingDDict4247,171306
typedef enum { ZBUFFds_init, ZBUFFds_loadHeader,ZBUFFds_init4313,175127
typedef enum { ZBUFFds_init, ZBUFFds_loadHeader,ZBUFFds_loadHeader4313,175127
               ZBUFFds_read, ZBUFFds_load, ZBUFFds_flush } ZBUFFv07_dStage;ZBUFFds_read4314,175176
               ZBUFFds_read, ZBUFFds_load, ZBUFFds_flush } ZBUFFv07_dStage;ZBUFFds_load4314,175176
               ZBUFFds_read, ZBUFFds_load, ZBUFFds_flush } ZBUFFv07_dStage;ZBUFFds_flush4314,175176
               ZBUFFds_read, ZBUFFds_load, ZBUFFds_flush } ZBUFFv07_dStage;ZBUFFv07_dStage4314,175176
struct ZBUFFv07_DCtx_s {ZBUFFv07_DCtx_s4317,175287
    ZSTDv07_DCtx* zd;zd4318,175312
    ZSTDv07_frameParams fParams;fParams4319,175334
    ZBUFFv07_dStage stage;stage4320,175367
    char*  inBuff;inBuff4321,175394
    size_t inBuffSize;inBuffSize4322,175413
    size_t inPos;inPos4323,175436
    char*  outBuff;outBuff4324,175454
    size_t outBuffSize;outBuffSize4325,175474
    size_t outStart;outStart4326,175498
    size_t outEnd;outEnd4327,175519
    size_t blockSize;blockSize4328,175538
    BYTE headerBuffer[ZSTDv07_FRAMEHEADERSIZE_MAX];headerBuffer4329,175560
    size_t lhSize;lhSize4330,175612
    ZSTDv07_customMem customMem;customMem4331,175631
ZBUFFv07_DCtx* ZBUFFv07_createDCtx(void)ZBUFFv07_createDCtx4336,175818
ZBUFFv07_DCtx* ZBUFFv07_createDCtx_advanced(ZSTDv07_customMem customMem)ZBUFFv07_createDCtx_advanced4341,175923
size_t ZBUFFv07_freeDCtx(ZBUFFv07_DCtx* zbd)ZBUFFv07_freeDCtx4361,176601
size_t ZBUFFv07_decompressInitDictionary(ZBUFFv07_DCtx* zbd, const void* dict, size_t dictSize)ZBUFFv07_decompressInitDictionary4374,177014
size_t ZBUFFv07_decompressInit(ZBUFFv07_DCtx* zbd)ZBUFFv07_decompressInit4381,177287
MEM_STATIC size_t ZBUFFv07_limitCopy(void* dst, size_t dstCapacity, const void* src, size_t srcSize)ZBUFFv07_limitCopy4388,177433
size_t ZBUFFv07_decompressContinue(ZBUFFv07_DCtx* zbd,ZBUFFv07_decompressContinue4400,177703
size_t ZBUFFv07_recommendedDInSize(void)  { return ZSTDv07_BLOCKSIZE_ABSOLUTEMAX + ZSTDv07_blockHeaderSize /* block header size*/ ; }ZBUFFv07_recommendedDInSize4544,185026
size_t ZBUFFv07_recommendedDOutSize(void) { return ZSTDv07_BLOCKSIZE_ABSOLUTEMAX; }ZBUFFv07_recommendedDOutSize4545,185160

cpu.h,454
#define ZSTD_COMMON_CPU_HZSTD_COMMON_CPU_H12,399
    U32 f1c;f1c26,620
    U32 f1d;f1d27,633
    U32 f7b;f7b28,646
    U32 f7c;f7c29,659
} ZSTD_cpuid_t;ZSTD_cpuid_t30,672
MEM_STATIC ZSTD_cpuid_t ZSTD_cpuid(void) {ZSTD_cpuid32,689
#define X(X110,2682
#define C(C116,2979
#undef CC146,3440
#define D(D147,3449
#undef DD177,3861
#define B(B180,3906
#undef BB205,4317
#define C(C206,4326
#undef CC209,4404
#undef XX211,4414

zstd_errors.h,2650
#define ZSTD_ERRORS_H_398273423ZSTD_ERRORS_H_39827342312,418
#    define ZSTDERRORLIB_VISIBILITY ZSTDERRORLIB_VISIBILITY25,713
#    define ZSTDERRORLIB_VISIBILITYZSTDERRORLIB_VISIBILITY27,798
#  define ZSTDERRORLIB_API ZSTDERRORLIB_API31,903
#  define ZSTDERRORLIB_API ZSTDERRORLIB_API33,1031
#  define ZSTDERRORLIB_API ZSTDERRORLIB_API35,1235
  ZSTD_error_no_error = 0,ZSTD_error_no_error53,2017
  ZSTD_error_GENERIC  = 1,ZSTD_error_GENERIC54,2044
  ZSTD_error_prefix_unknown                = 10,ZSTD_error_prefix_unknown55,2071
  ZSTD_error_version_unsupported           = 12,ZSTD_error_version_unsupported56,2120
  ZSTD_error_frameParameter_unsupported    = 14,ZSTD_error_frameParameter_unsupported57,2169
  ZSTD_error_frameParameter_windowTooLarge = 16,ZSTD_error_frameParameter_windowTooLarge58,2218
  ZSTD_error_corruption_detected = 20,ZSTD_error_corruption_detected59,2267
  ZSTD_error_checksum_wrong      = 22,ZSTD_error_checksum_wrong60,2306
  ZSTD_error_dictionary_corrupted      = 30,ZSTD_error_dictionary_corrupted61,2345
  ZSTD_error_dictionary_wrong          = 32,ZSTD_error_dictionary_wrong62,2390
  ZSTD_error_dictionaryCreation_failed = 34,ZSTD_error_dictionaryCreation_failed63,2435
  ZSTD_error_parameter_unsupported   = 40,ZSTD_error_parameter_unsupported64,2480
  ZSTD_error_parameter_outOfBound    = 42,ZSTD_error_parameter_outOfBound65,2523
  ZSTD_error_tableLog_tooLarge       = 44,ZSTD_error_tableLog_tooLarge66,2566
  ZSTD_error_maxSymbolValue_tooLarge = 46,ZSTD_error_maxSymbolValue_tooLarge67,2609
  ZSTD_error_maxSymbolValue_tooSmall = 48,ZSTD_error_maxSymbolValue_tooSmall68,2652
  ZSTD_error_stage_wrong       = 60,ZSTD_error_stage_wrong69,2695
  ZSTD_error_init_missing      = 62,ZSTD_error_init_missing70,2732
  ZSTD_error_memory_allocation = 64,ZSTD_error_memory_allocation71,2769
  ZSTD_error_workSpace_tooSmall= 66,ZSTD_error_workSpace_tooSmall72,2806
  ZSTD_error_dstSize_tooSmall = 70,ZSTD_error_dstSize_tooSmall73,2843
  ZSTD_error_srcSize_wrong    = 72,ZSTD_error_srcSize_wrong74,2879
  ZSTD_error_dstBuffer_null   = 74,ZSTD_error_dstBuffer_null75,2915
  ZSTD_error_frameIndex_tooLarge = 100,ZSTD_error_frameIndex_tooLarge77,3051
  ZSTD_error_seekableIO          = 102,ZSTD_error_seekableIO78,3091
  ZSTD_error_dstBuffer_wrong     = 104,ZSTD_error_dstBuffer_wrong79,3131
  ZSTD_error_srcBuffer_wrong     = 105,ZSTD_error_srcBuffer_wrong80,3171
  ZSTD_error_maxCode = 120  /* never EVER use this value directly, it can change in future versions! Use ZSTD_isError() instead */ZSTD_error_maxCode81,3211
} ZSTD_ErrorCode;ZSTD_ErrorCode82,3342

zstd_v03.c,21620
#define MEM_H_MODULEMEM_H_MODULE62,2542
#  define MEM_STATIC MEM_STATIC79,2927
#  define MEM_STATIC MEM_STATIC81,3082
#  define MEM_STATIC MEM_STATIC83,3141
#  define MEM_STATIC MEM_STATIC85,3184
  typedef  uint8_t BYTE;BYTE98,3665
  typedef uint16_t U16;U1699,3690
  typedef  int16_t S16;S16100,3714
  typedef uint32_t U32;U32101,3738
  typedef  int32_t S32;S32102,3762
  typedef uint64_t U64;U64103,3786
  typedef  int64_t S64;S64104,3810
  typedef unsigned char       BYTE;BYTE106,3840
  typedef unsigned short      U16;U16107,3876
  typedef   signed short      S16;S16108,3911
  typedef unsigned int        U32;U32109,3946
  typedef   signed int        S32;S32110,3981
  typedef unsigned long long  U64;U64111,4016
  typedef   signed long long  S64;S64112,4051
#    define MEM_FORCE_MEMORY_ACCESS MEM_FORCE_MEMORY_ACCESS134,5538
#    define MEM_FORCE_MEMORY_ACCESS MEM_FORCE_MEMORY_ACCESS137,5801
MEM_STATIC unsigned MEM_32bits(void) { return sizeof(void*)==4; }MEM_32bits141,5856
MEM_STATIC unsigned MEM_64bits(void) { return sizeof(void*)==8; }MEM_64bits142,5922
MEM_STATIC unsigned MEM_isLittleEndian(void)MEM_isLittleEndian144,5989
MEM_STATIC U16 MEM_read16(const void* memPtr) { return *(const U16*) memPtr; }MEM_read16154,6358
MEM_STATIC U32 MEM_read32(const void* memPtr) { return *(const U32*) memPtr; }MEM_read32155,6437
MEM_STATIC U64 MEM_read64(const void* memPtr) { return *(const U64*) memPtr; }MEM_read64156,6516
MEM_STATIC void MEM_write16(void* memPtr, U16 value) { *(U16*)memPtr = value; }MEM_write16158,6596
typedef union { U16 u16; U32 u32; U64 u64; } __attribute__((packed)) unalign;u16164,6903
typedef union { U16 u16; U32 u32; U64 u64; } __attribute__((packed)) unalign;u32164,6903
typedef union { U16 u16; U32 u32; U64 u64; } __attribute__((packed)) unalign;u64164,6903
typedef union { U16 u16; U32 u32; U64 u64; } __attribute__((packed)) unalign;unalign164,6903
MEM_STATIC U16 MEM_read16(const void* ptr) { return ((const unalign*)ptr)->u16; }MEM_read16166,6982
MEM_STATIC U32 MEM_read32(const void* ptr) { return ((const unalign*)ptr)->u32; }MEM_read32167,7064
MEM_STATIC U64 MEM_read64(const void* ptr) { return ((const unalign*)ptr)->u64; }MEM_read64168,7146
MEM_STATIC void MEM_write16(void* memPtr, U16 value) { ((unalign*)memPtr)->u16 = value; }MEM_write16170,7229
MEM_STATIC U16 MEM_read16(const void* memPtr)MEM_read16177,7399
MEM_STATIC U32 MEM_read32(const void* memPtr)MEM_read32182,7510
MEM_STATIC U64 MEM_read64(const void* memPtr)MEM_read64187,7621
MEM_STATIC void MEM_write16(void* memPtr, U16 value)MEM_write16192,7732
MEM_STATIC U16 MEM_readLE16(const void* memPtr)MEM_readLE16201,7873
MEM_STATIC void MEM_writeLE16(void* memPtr, U16 val)MEM_writeLE16212,8097
MEM_STATIC U32 MEM_readLE24(const void* memPtr)MEM_readLE24226,8342
MEM_STATIC U32 MEM_readLE32(const void* memPtr)MEM_readLE32231,8463
MEM_STATIC U64 MEM_readLE64(const void* memPtr)MEM_readLE64242,8733
MEM_STATIC size_t MEM_readLEST(const void* memPtr)MEM_readLEST255,9097
#define BITSTREAM_H_MODULEBITSTREAM_H_MODULE307,11174
    size_t   bitContainer;bitContainer326,11633
    unsigned bitsConsumed;bitsConsumed327,11660
    const char* ptr;ptr328,11687
    const char* start;start329,11708
} BIT_DStream_t;BIT_DStream_t330,11731
typedef enum { BIT_DStream_unfinished = 0,BIT_DStream_unfinished332,11749
               BIT_DStream_endOfBuffer = 1,BIT_DStream_endOfBuffer333,11792
               BIT_DStream_completed = 2,BIT_DStream_completed334,11836
               BIT_DStream_overflow = 3 } BIT_DStream_status;  /* result of BIT_reloadDStream() */BIT_DStream_overflow335,11878
               BIT_DStream_overflow = 3 } BIT_DStream_status;  /* result of BIT_reloadDStream() */BIT_DStream_status335,11878
MEM_STATIC unsigned BIT_highbit32 (U32 val)BIT_highbit32356,12770
MEM_STATIC size_t BIT_initDStream(BIT_DStream_t* bitD, const void* srcBuffer, size_t srcSize)BIT_initDStream391,13902
MEM_STATIC size_t BIT_lookBits(BIT_DStream_t* bitD, U32 nbBits)BIT_lookBits435,15913
MEM_STATIC size_t BIT_lookBitsFast(BIT_DStream_t* bitD, U32 nbBits)BIT_lookBitsFast443,16223
MEM_STATIC void BIT_skipBits(BIT_DStream_t* bitD, U32 nbBits)BIT_skipBits449,16457
MEM_STATIC size_t BIT_readBits(BIT_DStream_t* bitD, U32 nbBits)BIT_readBits454,16558
MEM_STATIC size_t BIT_readBitsFast(BIT_DStream_t* bitD, U32 nbBits)BIT_readBitsFast463,16799
MEM_STATIC BIT_DStream_status BIT_reloadDStream(BIT_DStream_t* bitD)BIT_reloadDStream470,16973
MEM_STATIC unsigned BIT_endOfDStream(const BIT_DStream_t* DStream)BIT_endOfDStream505,18173
#define ERROR_H_MODULEERROR_H_MODULE549,20205
#  define ERR_STATIC ERR_STATIC560,20487
#  define ERR_STATIC ERR_STATIC562,20546
#  define ERR_STATIC ERR_STATIC564,20607
#  define ERR_STATIC ERR_STATIC566,20665
#define PREFIX(PREFIX573,20910
#define ERROR(ERROR575,20950
#define ERROR_LIST(ERROR_LIST577,20993
#define ERROR_GENERATE_ENUM(ERROR_GENERATE_ENUM584,21366
typedef enum { ERROR_LIST(ERROR_GENERATE_ENUM) } ERR_codes;  /* enum is exposed, to detect & handle specific errors; compare function result to -enum value */ERROR_LIST585,21406
typedef enum { ERROR_LIST(ERROR_GENERATE_ENUM) } ERR_codes;  /* enum is exposed, to detect & handle specific errors; compare function result to -enum value */ERR_codes585,21406
#define ERROR_CONVERTTOSTRING(ERROR_CONVERTTOSTRING587,21566
#define ERROR_GENERATE_STRING(ERROR_GENERATE_STRING588,21613
static const char* ERR_strings[] = { ERROR_LIST(ERROR_GENERATE_STRING) };ERR_strings589,21677
ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }ERR_isError591,21752
ERR_STATIC const char* ERR_getErrorName(size_t code)ERR_getErrorName593,21834
typedef unsigned FSE_CTable;   /* don't allocate that. It's just a way to be more restrictive than void* */FSE_CTable609,22219
typedef unsigned FSE_DTable;   /* don't allocate that. It's just a way to be more restrictive than void* */FSE_DTable610,22327
#define FSE_NCOUNTBOUND FSE_NCOUNTBOUND656,24427
#define FSE_BLOCKBOUND(FSE_BLOCKBOUND657,24455
#define FSE_COMPRESSBOUND(FSE_COMPRESSBOUND658,24503
#define FSE_CTABLE_SIZE_U32(FSE_CTABLE_SIZE_U32661,24722
#define FSE_DTABLE_SIZE_U32(FSE_DTABLE_SIZE_U32662,24833
    size_t      state;state680,25497
    const void* table;   /* precise table may vary, depending on U16 */table681,25520
} FSE_DState_t;FSE_DState_t682,25592
    U16 tableLog;tableLog706,26317
    U16 fastMode;fastMode707,26335
} FSE_DTableHeader;   /* sizeof U32 */FSE_DTableHeader708,26353
    unsigned short newState;newState712,26410
    unsigned char  symbol;symbol713,26439
    unsigned char  nbBits;nbBits714,26466
} FSE_decode_t;   /* size == U32 */FSE_decode_t715,26493
MEM_STATIC void FSE_initDState(FSE_DState_t* DStatePtr, BIT_DStream_t* bitD, const FSE_DTable* dt)FSE_initDState717,26530
MEM_STATIC BYTE FSE_decodeSymbol(FSE_DState_t* DStatePtr, BIT_DStream_t* bitD)FSE_decodeSymbol726,26828
MEM_STATIC BYTE FSE_decodeSymbolFast(FSE_DState_t* DStatePtr, BIT_DStream_t* bitD)FSE_decodeSymbolFast737,27192
MEM_STATIC unsigned FSE_endOfDState(const FSE_DState_t* DStatePtr)FSE_endOfDState748,27563
#define HUF_CTABLEBOUND HUF_CTABLEBOUND800,29733
#define HUF_BLOCKBOUND(HUF_BLOCKBOUND801,29761
#define HUF_COMPRESSBOUND(HUF_COMPRESSBOUND802,29882
#define HUF_DTABLE_SIZE(HUF_DTABLE_SIZE805,30050
#define HUF_CREATE_STATIC_DTABLEX2(HUF_CREATE_STATIC_DTABLEX2806,30176
#define HUF_CREATE_STATIC_DTABLEX4(HUF_CREATE_STATIC_DTABLEX4808,30312
#define HUF_CREATE_STATIC_DTABLEX6(HUF_CREATE_STATIC_DTABLEX6810,30446
#define ZSTD_VERSION_MAJOR ZSTD_VERSION_MAJOR871,32929
#define ZSTD_VERSION_MINOR ZSTD_VERSION_MINOR872,33002
#define ZSTD_VERSION_RELEASE ZSTD_VERSION_RELEASE873,33089
#define ZSTD_VERSION_NUMBER ZSTD_VERSION_NUMBER874,33168
typedef struct ZSTD_CCtx_s ZSTD_CCtx;   /* incomplete type */ZSTD_CCtx880,33382
typedef struct ZSTD_DCtx_s ZSTD_DCtx;ZSTD_DCtx931,35574
#define ZSTD_magicNumber ZSTD_magicNumber944,36166
#define FSE_MAX_MEMORY_USAGE FSE_MAX_MEMORY_USAGE994,38536
#define FSE_DEFAULT_MEMORY_USAGE FSE_DEFAULT_MEMORY_USAGE995,38568
#define FSE_MAX_SYMBOL_VALUE FSE_MAX_SYMBOL_VALUE1000,38710
#define FSE_FUNCTION_TYPE FSE_FUNCTION_TYPE1006,38913
#define FSE_FUNCTION_EXTENSIONFSE_FUNCTION_EXTENSION1007,38944
#  define FORCE_INLINE FORCE_INLINE1020,39360
#      define FORCE_INLINE FORCE_INLINE1027,39773
#      define FORCE_INLINE FORCE_INLINE1029,39855
#    define FORCE_INLINE FORCE_INLINE1032,39915
#define FSE_MAX_TABLELOG FSE_MAX_TABLELOG1047,40419
#define FSE_MAX_TABLESIZE FSE_MAX_TABLESIZE1048,40470
#define FSE_MAXTABLESIZE_MASK FSE_MAXTABLESIZE_MASK1049,40519
#define FSE_DEFAULT_TABLELOG FSE_DEFAULT_TABLELOG1050,40571
#define FSE_MIN_TABLELOG FSE_MIN_TABLELOG1051,40629
#define FSE_TABLELOG_ABSOLUTE_MAX FSE_TABLELOG_ABSOLUTE_MAX1053,40657
#define FSE_STATIC_ASSERT(FSE_STATIC_ASSERT1062,40975
typedef U32 DTable_max_t[FSE_DTABLE_SIZE_U32(FSE_MAX_TABLELOG)];DTable_max_t1068,41251
#define FSE_CAT(FSE_CAT1089,41836
#define FSE_FUNCTION_NAME(FSE_FUNCTION_NAME1090,41862
#define FSE_TYPE_NAME(FSE_TYPE_NAME1091,41906
#define FSE_DECODE_TYPE FSE_DECODE_TYPE1096,41974
static U32 FSE_tableStep(U32 tableSize) { return (tableSize>>1) + (tableSize>>3) + 3; }FSE_tableStep1098,42012
static size_t FSE_buildDTableFSE_buildDTable1100,42101
static unsigned FSE_isError(size_t code) { return ERR_isError(code); }FSE_isError1172,44462
static short FSE_abs(short a)FSE_abs1178,44699
static size_t FSE_readNCount (short* normalizedCounter, unsigned* maxSVPtr, unsigned* tableLogPtr,FSE_readNCount1183,44759
static size_t FSE_buildDTable_rle (FSE_DTable* dt, BYTE symbolValue)FSE_buildDTable_rle1299,48279
static size_t FSE_buildDTable_raw (FSE_DTable* dt, unsigned nbBits)FSE_buildDTable_raw1316,48642
FORCE_INLINE size_t FSE_decompress_usingDTable_generic(FSE_decompress_usingDTable_generic1342,49366
#define FSE_GETSYMBOL(FSE_GETSYMBOL1364,50033
static size_t FSE_decompress_usingDTable(void* dst, size_t originalSize,FSE_decompress_usingDTable1412,51740
static size_t FSE_decompress(void* dst, size_t maxDstSize, const void* cSrc, size_t cSrcSize)FSE_decompress1425,52242
#  define inline inline1495,55574
#  define inline inline1497,55606
#define HUF_STATIC_ASSERT(HUF_STATIC_ASSERT1511,56090
static unsigned HUF_isError(size_t code) { return ERR_isError(code); }HUF_isError1517,56325
#define HUF_ABSOLUTEMAX_TABLELOG HUF_ABSOLUTEMAX_TABLELOG1519,56397
#define HUF_MAX_TABLELOG HUF_MAX_TABLELOG1520,56516
#define HUF_DEFAULT_TABLELOG HUF_DEFAULT_TABLELOG1521,56657
#define HUF_MAX_SYMBOL_VALUE HUF_MAX_SYMBOL_VALUE1522,56752
typedef struct { BYTE byte; BYTE nbBits; } HUF_DEltX2;   /* single-symbol decoding */byte1532,57045
typedef struct { BYTE byte; BYTE nbBits; } HUF_DEltX2;   /* single-symbol decoding */nbBits1532,57045
typedef struct { BYTE byte; BYTE nbBits; } HUF_DEltX2;   /* single-symbol decoding */HUF_DEltX21532,57045
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUF_DEltX4;  /* double-symbols decoding */sequence1534,57132
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUF_DEltX4;  /* double-symbols decoding */nbBits1534,57132
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUF_DEltX4;  /* double-symbols decoding */length1534,57132
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUF_DEltX4;  /* double-symbols decoding */HUF_DEltX41534,57132
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;symbol1536,57235
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;weight1536,57235
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;sortedSymbol_t1536,57235
static size_t HUF_readStats(BYTE* huffWeight, size_t hwSize, U32* rankStats,HUF_readStats1543,57446
static size_t HUF_readDTableX2 (U16* DTable, const void* src, size_t srcSize)HUF_readDTableX21626,60355
static BYTE HUF_decodeSymbolX2(BIT_DStream_t* Dstream, const HUF_DEltX2* dt, const U32 dtLog)HUF_decodeSymbolX21674,62016
#define HUF_DECODE_SYMBOLX2_0(HUF_DECODE_SYMBOLX2_01682,62302
#define HUF_DECODE_SYMBOLX2_1(HUF_DECODE_SYMBOLX2_11685,62407
#define HUF_DECODE_SYMBOLX2_2(HUF_DECODE_SYMBOLX2_21689,62554
static inline size_t HUF_decodeStreamX2(BYTE* p, BIT_DStream_t* const bitDPtr, BYTE* const pEnd, const HUF_DEltX2* const dt, const U32 dtLog)HUF_decodeStreamX21693,62675
static size_t HUF_decompress4X2_usingDTable(HUF_decompress4X2_usingDTable1718,63474
static size_t HUF_decompress4X2 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress4X21815,67616
static void HUF_fillDTableX4Level2(HUF_DEltX4* DTable, U32 sizeLog, const U32 consumed,HUF_fillDTableX4Level21835,68227
typedef U32 rankVal_t[HUF_ABSOLUTEMAX_TABLELOG][HUF_ABSOLUTEMAX_TABLELOG + 1];rankVal_t1878,69701
static void HUF_fillDTableX4(HUF_DEltX4* DTable, const U32 targetLog,HUF_fillDTableX41880,69781
static size_t HUF_readDTableX4 (U32* DTable, const void* src, size_t srcSize)HUF_readDTableX41928,71582
static U32 HUF_decodeSymbolX4(void* op, BIT_DStream_t* DStream, const HUF_DEltX4* dt, const U32 dtLog)HUF_decodeSymbolX42015,74558
static U32 HUF_decodeLastSymbolX4(void* op, BIT_DStream_t* DStream, const HUF_DEltX4* dt, const U32 dtLog)HUF_decodeLastSymbolX42023,74846
#define HUF_DECODE_SYMBOLX4_0(HUF_DECODE_SYMBOLX4_02041,75579
#define HUF_DECODE_SYMBOLX4_1(HUF_DECODE_SYMBOLX4_12044,75687
#define HUF_DECODE_SYMBOLX4_2(HUF_DECODE_SYMBOLX4_22048,75849
static inline size_t HUF_decodeStreamX4(BYTE* p, BIT_DStream_t* bitDPtr, BYTE* const pEnd, const HUF_DEltX4* const dt, const U32 dtLog)HUF_decodeStreamX42052,75985
static size_t HUF_decompress4X4_usingDTable(HUF_decompress4X4_usingDTable2080,76840
static size_t HUF_decompress4X4 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress4X42177,80982
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;tableTime2196,81575
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;decode256Time2196,81575
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;algo_time_t2196,81575
static const algo_time_t algoTime[16 /* Quantization */][3 /* single, double, quad */] =algoTime2197,81641
typedef size_t (*decompressionAlgo)(void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize);decompressionAlgo2218,82795
static size_t HUF_decompress (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress2220,82895
#define ZSTD_MEMORY_USAGE ZSTD_MEMORY_USAGE2292,86419
#  define ZSTD_HEAPMODE ZSTD_HEAPMODE2301,86749
#  define ZSTD_LEGACY_SUPPORT ZSTD_LEGACY_SUPPORT2309,86925
#  define GCC_VERSION GCC_VERSION2333,87728
#define HASH_LOG HASH_LOG2340,87924
#define HASH_TABLESIZE HASH_TABLESIZE2341,87965
#define HASH_MASK HASH_MASK2342,88004
#define KNUTH KNUTH2344,88044
#define BIT7 BIT72346,88070
#define BIT6 BIT62347,88087
#define BIT5 BIT52348,88104
#define BIT4 BIT42349,88121
#define BIT1 BIT12350,88138
#define BIT0 BIT02351,88155
#define KB KB2353,88173
#define MB MB2354,88194
#define GB GB2355,88215
#define BLOCKSIZE BLOCKSIZE2357,88237
#define MIN_SEQUENCES_SIZE MIN_SEQUENCES_SIZE2358,88316
#define MIN_CBLOCK_SIZE MIN_CBLOCK_SIZE2359,88407
#define IS_RAW IS_RAW2360,88469
#define IS_RLE IS_RLE2361,88489
#define WORKPLACESIZE WORKPLACESIZE2363,88510
#define MINMATCH MINMATCH2364,88546
#define MLbits MLbits2365,88565
#define LLbits LLbits2366,88584
#define Offbits Offbits2367,88603
#define MaxML MaxML2368,88622
#define MaxLL MaxLL2369,88654
#define MaxOff MaxOff2370,88686
#define LitFSELog LitFSELog2371,88706
#define MLFSELog MLFSELog2372,88728
#define LLFSELog LLFSELog2373,88750
#define OffFSELog OffFSELog2374,88772
#define MAX(MAX2375,88794
#define MaxSeq MaxSeq2376,88829
#define LITERAL_NOENTROPY LITERAL_NOENTROPY2378,88863
#define COMMAND_NOENTROPY COMMAND_NOENTROPY2379,88892
#define ZSTD_CONTENTSIZE_ERROR ZSTD_CONTENTSIZE_ERROR2381,88939
static const size_t ZSTD_blockHeaderSize = 3;ZSTD_blockHeaderSize2383,88984
static const size_t ZSTD_frameHeaderSize = 4;ZSTD_frameHeaderSize2384,89030
static void   ZSTD_copy4(void* dst, const void* src) { memcpy(dst, src, 4); }ZSTD_copy42390,89218
static void   ZSTD_copy8(void* dst, const void* src) { memcpy(dst, src, 8); }ZSTD_copy82392,89297
#define COPY8(COPY82394,89376
static void ZSTD_wildcopy(void* dst, const void* src, ptrdiff_t length)ZSTD_wildcopy2397,89514
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_compressed2409,89838
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_raw2409,89838
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_rle2409,89838
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_end2409,89838
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;blockType_t2409,89838
    blockType_t blockType;blockType2413,89924
    U32 origSize;origSize2414,89951
} blockProperties_t;blockProperties_t2415,89969
    void* buffer;buffer2418,90008
    U32*  offsetStart;offsetStart2419,90026
    U32*  offset;offset2420,90049
    BYTE* offCodeStart;offCodeStart2421,90067
    BYTE* offCode;offCode2422,90091
    BYTE* litStart;litStart2423,90110
    BYTE* lit;lit2424,90130
    BYTE* litLengthStart;litLengthStart2425,90145
    BYTE* litLength;litLength2426,90171
    BYTE* matchLengthStart;matchLengthStart2427,90192
    BYTE* matchLength;matchLength2428,90220
    BYTE* dumpsStart;dumpsStart2429,90243
    BYTE* dumps;dumps2430,90265
} seqStore_t;seqStore_t2431,90282
static unsigned ZSTD_isError(size_t code) { return ERR_isError(code); }ZSTD_isError2439,90465
struct ZSTD_DCtx_sZSTD_DCtx_s2446,90696
    U32 LLTable[FSE_DTABLE_SIZE_U32(LLFSELog)];LLTable2448,90717
    U32 OffTable[FSE_DTABLE_SIZE_U32(OffFSELog)];OffTable2449,90765
    U32 MLTable[FSE_DTABLE_SIZE_U32(MLFSELog)];MLTable2450,90815
    void* previousDstEnd;previousDstEnd2451,90863
    void* base;base2452,90889
    size_t expected;expected2453,90905
    blockType_t bType;bType2454,90926
    U32 phase;phase2455,90949
    const BYTE* litPtr;litPtr2456,90964
    size_t litSize;litSize2457,90988
    BYTE litBuffer[BLOCKSIZE + 8 /* margin for wildcopy */];litBuffer2458,91008
static size_t ZSTD_getcBlockSize(const void* src, size_t srcSize, blockProperties_t* bpPtr)ZSTD_getcBlockSize2462,91128
static size_t ZSTD_copyUncompressedBlock(void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTD_copyUncompressedBlock2481,91672
static size_t ZSTD_decompressLiterals(void* dst, size_t* maxDstSizePtr,ZSTD_decompressLiterals2493,92016
static size_t ZSTD_decodeLiteralsBlock(void* ctx,ZSTD_decodeLiteralsBlock2513,92815
static size_t ZSTD_decodeSeqHeaders(int* nbSeq, const BYTE** dumpsPtr, size_t* dumpsLengthPtr,ZSTD_decodeSeqHeaders2565,94839
    size_t litLength;litLength2668,98343
    size_t offset;offset2669,98365
    size_t matchLength;matchLength2670,98384
} seq_t;seq_t2671,98408
    BIT_DStream_t DStream;DStream2674,98435
    FSE_DState_t stateLL;stateLL2675,98462
    FSE_DState_t stateOffb;stateOffb2676,98488
    FSE_DState_t stateML;stateML2677,98516
    size_t prevOffset;prevOffset2678,98542
    const BYTE* dumps;dumps2679,98565
    const BYTE* dumpsEnd;dumpsEnd2680,98588
} seqState_t;seqState_t2681,98614
static void ZSTD_decodeSequence(seq_t* seq, seqState_t* seqState)ZSTD_decodeSequence2684,98630
static size_t ZSTD_execSequence(BYTE* op,ZSTD_execSequence2748,101013
static size_t ZSTD_decompressSequences(ZSTD_decompressSequences2817,103689
static size_t ZSTD_decompressBlock(ZSTD_decompressBlock2890,106510
static size_t ZSTD_decompressDCtx(void* ctx, void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTD_decompressDCtx2908,107053
static size_t ZSTD_decompress(void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTD_decompress2965,108961
MEM_STATIC void ZSTD_errorFrameSizeInfoLegacy(size_t* cSize, unsigned long long* dBound, size_t ret)ZSTD_errorFrameSizeInfoLegacy2974,109254
void ZSTDv03_findFrameSizeInfoLegacy(const void *src, size_t srcSize, size_t* cSize, unsigned long long* dBound)ZSTDv03_findFrameSizeInfoLegacy2980,109416
static size_t ZSTD_resetDCtx(ZSTD_DCtx* dctx)ZSTD_resetDCtx3032,110954
static ZSTD_DCtx* ZSTD_createDCtx(void)ZSTD_createDCtx3041,111139
static size_t ZSTD_freeDCtx(ZSTD_DCtx* dctx)ZSTD_freeDCtx3049,111321
static size_t ZSTD_nextSrcSizeToDecompress(ZSTD_DCtx* dctx)ZSTD_nextSrcSizeToDecompress3055,111401
static size_t ZSTD_decompressContinue(ZSTD_DCtx* ctx, void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTD_decompressContinue3060,111493
unsigned ZSTDv03_isError(size_t code)ZSTDv03_isError3130,113423
size_t ZSTDv03_decompress( void* dst, size_t maxOriginalSize,ZSTDv03_decompress3135,113497
ZSTDv03_Dctx* ZSTDv03_createDCtx(void)ZSTDv03_createDCtx3141,113696
size_t ZSTDv03_freeDCtx(ZSTDv03_Dctx* dctx)ZSTDv03_freeDCtx3146,113785
size_t ZSTDv03_resetDCtx(ZSTDv03_Dctx* dctx)ZSTDv03_resetDCtx3151,113878
size_t ZSTDv03_nextSrcSizeToDecompress(ZSTDv03_Dctx* dctx)ZSTDv03_nextSrcSizeToDecompress3156,113973
size_t ZSTDv03_decompressContinue(ZSTDv03_Dctx* dctx, void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTDv03_decompressContinue3161,114096

pool.c,2613
typedef struct POOL_job_s {POOL_job_s29,882
    POOL_function function;function30,910
    void *opaque;opaque31,938
} POOL_job;POOL_job32,956
struct POOL_ctx_s {POOL_ctx_s34,969
    ZSTD_customMem customMem;customMem35,989
    ZSTD_pthread_t* threads;threads37,1055
    size_t threadCapacity;threadCapacity38,1084
    size_t threadLimit;threadLimit39,1111
    POOL_job *queue;queue42,1177
    size_t queueHead;queueHead43,1198
    size_t queueTail;queueTail44,1220
    size_t queueSize;queueSize45,1242
    size_t numThreadsBusy;numThreadsBusy48,1313
    int queueEmpty;queueEmpty50,1382
    ZSTD_pthread_mutex_t queueMutex;queueMutex53,1442
    ZSTD_pthread_cond_t queuePushCond;queuePushCond55,1554
    ZSTD_pthread_cond_t queuePopCond;queuePopCond57,1670
    int shutdown;shutdown59,1758
static void* POOL_thread(void* opaque) {POOL_thread67,1921
POOL_ctx* ZSTD_createThreadPool(size_t numThreads) {ZSTD_createThreadPool108,3635
POOL_ctx* POOL_create(size_t numThreads, size_t queueSize) {POOL_create112,3731
POOL_ctx* POOL_create_advanced(size_t numThreads, size_t queueSize,POOL_create_advanced116,3869
static void POOL_join(POOL_ctx* ctx) {POOL_join165,5728
void POOL_free(POOL_ctx *ctx) {POOL_free180,6254
void ZSTD_freeThreadPool (ZSTD_threadPool* pool) {ZSTD_freeThreadPool191,6630
size_t POOL_sizeof(POOL_ctx *ctx) {POOL_sizeof195,6704
static int POOL_resize_internal(POOL_ctx* ctx, size_t numThreads)POOL_resize_internal204,6966
int POOL_resize(POOL_ctx* ctx, size_t numThreads)POOL_resize233,8128
static int isQueueFull(POOL_ctx const* ctx) {isQueueFull250,8661
static void POOL_add_internal(POOL_ctx* ctx, POOL_function function, void *opaque)POOL_add_internal260,8927
void POOL_add(POOL_ctx* ctx, POOL_function function, void* opaque)POOL_add272,9290
int POOL_tryAdd(POOL_ctx* ctx, POOL_function function, void* opaque)POOL_tryAdd285,9723
struct POOL_ctx_s {POOL_ctx_s307,10307
    int dummy;dummy308,10327
static POOL_ctx g_poolCtx;g_poolCtx310,10345
POOL_ctx* POOL_create(size_t numThreads, size_t queueSize) {POOL_create312,10373
POOL_ctx* POOL_create_advanced(size_t numThreads, size_t queueSize, ZSTD_customMem customMem) {POOL_create_advanced316,10511
void POOL_free(POOL_ctx* ctx) {POOL_free323,10697
int POOL_resize(POOL_ctx* ctx, size_t numThreads) {POOL_resize328,10786
void POOL_add(POOL_ctx* ctx, POOL_function function, void* opaque) {POOL_add333,10888
int POOL_tryAdd(POOL_ctx* ctx, POOL_function function, void* opaque) {POOL_tryAdd338,10997
size_t POOL_sizeof(POOL_ctx* ctx) {POOL_sizeof344,11122

huf.h,2454
#define HUF_H_298734234HUF_H_29873423420,740
#  define HUF_PUBLIC_API HUF_PUBLIC_API31,1214
#  define HUF_PUBLIC_API HUF_PUBLIC_API33,1357
#  define HUF_PUBLIC_API HUF_PUBLIC_API35,1457
#  define HUF_PUBLIC_APIHUF_PUBLIC_API37,1622
#define HUF_BLOCKSIZE_MAX HUF_BLOCKSIZE_MAX72,3166
#define HUF_WORKSPACE_SIZE HUF_WORKSPACE_SIZE93,4303
#define HUF_WORKSPACE_SIZE_U32 HUF_WORKSPACE_SIZE_U3294,4348
#define HUF_H_HUF_STATIC_LINKING_ONLYHUF_H_HUF_STATIC_LINKING_ONLY110,5246
#define FSE_STATIC_LINKING_ONLYFSE_STATIC_LINKING_ONLY114,5341
#define HUF_TABLELOG_MAX HUF_TABLELOG_MAX119,5416
#define HUF_TABLELOG_DEFAULT HUF_TABLELOG_DEFAULT120,5565
#define HUF_SYMBOLVALUE_MAX HUF_SYMBOLVALUE_MAX121,5652
#define HUF_TABLELOG_ABSOLUTEMAX HUF_TABLELOG_ABSOLUTEMAX123,5686
#define HUF_CTABLEBOUND HUF_CTABLEBOUND133,6039
#define HUF_BLOCKBOUND(HUF_BLOCKBOUND134,6067
#define HUF_COMPRESSBOUND(HUF_COMPRESSBOUND135,6193
struct HUF_CElt_s {HUF_CElt_s139,6502
  U16  val;val140,6522
  BYTE nbBits;nbBits141,6534
typedef struct HUF_CElt_s HUF_CElt;   /* consider it an incomplete type */HUF_CElt143,6582
#define HUF_CTABLE_SIZE_U32(HUF_CTABLE_SIZE_U32144,6657
#define HUF_CTABLE_SIZE(HUF_CTABLE_SIZE145,6772
#define HUF_CREATE_STATIC_CTABLE(HUF_CREATE_STATIC_CTABLE146,6870
typedef U32 HUF_DTable;HUF_DTable150,7040
#define HUF_DTABLE_SIZE(HUF_DTABLE_SIZE151,7064
#define HUF_CREATE_STATIC_DTABLEX1(HUF_CREATE_STATIC_DTABLEX1152,7128
#define HUF_CREATE_STATIC_DTABLEX2(HUF_CREATE_STATIC_DTABLEX2154,7290
   HUF_repeat_none,  /**< Cannot use the previous table */HUF_repeat_none200,10581
   HUF_repeat_check, /**< Can use the previous table but it must be checked. Note : The previous table must have been constructed by HUF_compress{1, 4}X_repeat */HUF_repeat_check201,10640
   HUF_repeat_valid  /**< Can use the previous table and it is assumed to be valid */HUF_repeat_valid202,10803
 } HUF_repeat;HUF_repeat203,10889
#define HUF_CTABLE_WORKSPACE_SIZE_U32 HUF_CTABLE_WORKSPACE_SIZE_U32219,11906
#define HUF_CTABLE_WORKSPACE_SIZE HUF_CTABLE_WORKSPACE_SIZE220,11974
#define HUF_READ_STATS_WORKSPACE_SIZE_U32 HUF_READ_STATS_WORKSPACE_SIZE_U32239,12920
#define HUF_READ_STATS_WORKSPACE_SIZE HUF_READ_STATS_WORKSPACE_SIZE240,13014
#define HUF_DECOMPRESS_WORKSPACE_SIZE HUF_DECOMPRESS_WORKSPACE_SIZE281,14965
#define HUF_DECOMPRESS_WORKSPACE_SIZE_U32 HUF_DECOMPRESS_WORKSPACE_SIZE_U32282,15013

zstd_deps.h,753
#define ZSTD_DEPS_COMMONZSTD_DEPS_COMMON25,683
# define ZSTD_memcpy(ZSTD_memcpy32,809
# define ZSTD_memmove(ZSTD_memmove33,867
# define ZSTD_memset(ZSTD_memset34,927
# define ZSTD_memcpy(ZSTD_memcpy36,991
# define ZSTD_memmove(ZSTD_memmove37,1039
# define ZSTD_memset(ZSTD_memset38,1089
#define ZSTD_DEPS_MALLOCZSTD_DEPS_MALLOC50,1292
#define ZSTD_malloc(ZSTD_malloc54,1339
#define ZSTD_calloc(ZSTD_calloc55,1372
#define ZSTD_free(ZSTD_free56,1414
#define ZSTD_DEPS_MATH64ZSTD_DEPS_MATH6468,1660
#define ZSTD_div64(ZSTD_div6470,1686
#define ZSTD_DEPS_ASSERTZSTD_DEPS_ASSERT80,1895
#define ZSTD_DEPS_IOZSTD_DEPS_IO92,2089
#define ZSTD_DEBUG_PRINT(ZSTD_DEBUG_PRINT95,2130
#define ZSTD_DEPS_STDINTZSTD_DEPS_STDINT106,2385

zdict.c,4549
#define MINRATIO MINRATIO15,492
#define ZDICT_MAX_SAMPLES_SIZE ZDICT_MAX_SAMPLES_SIZE16,573
#define ZDICT_MIN_SAMPLES_SIZE ZDICT_MIN_SAMPLES_SIZE17,618
#define _FILE_OFFSET_BITS _FILE_OFFSET_BITS24,828
#  define _LARGEFILE_SOURCE_LARGEFILE_SOURCE26,962
#  define _LARGEFILE64_SOURCE_LARGEFILE64_SOURCE28,1085
#define HUF_STATIC_LINKING_ONLYHUF_STATIC_LINKING_ONLY42,1513
#  define ZDICT_STATIC_LINKING_ONLYZDICT_STATIC_LINKING_ONLY48,1757
#define KB KB57,1978
#define MB MB58,1999
#define GB GB59,2020
#define DICTLISTSIZE_DEFAULT DICTLISTSIZE_DEFAULT61,2042
#define NOISELENGTH NOISELENGTH63,2078
static const U32 g_selectivity_default = 9;g_selectivity_default65,2102
#undef  DISPLAYDISPLAY71,2249
#define DISPLAY(DISPLAY72,2265
#undef  DISPLAYLEVELDISPLAYLEVEL73,2346
#define DISPLAYLEVEL(DISPLAYLEVEL74,2367
static clock_t ZDICT_clockSpan(clock_t nPrevious) { return clock() - nPrevious; }ZDICT_clockSpan76,2524
static void ZDICT_printHex(const void* ptr, size_t length)ZDICT_printHex78,2607
unsigned ZDICT_isError(size_t errorCode) { return ERR_isError(errorCode); }ZDICT_isError93,3019
const char* ZDICT_getErrorName(size_t errorCode) { return ERR_getErrorName(errorCode); }ZDICT_getErrorName95,3096
unsigned ZDICT_getDictID(const void* dictBuffer, size_t dictSize)ZDICT_getDictID97,3186
size_t ZDICT_getDictHeaderSize(const void* dictBuffer, size_t dictSize)ZDICT_getDictHeaderSize104,3412
static unsigned ZDICT_NbCommonBytes (size_t val)ZDICT_NbCommonBytes128,4249
static size_t ZDICT_count(const void* pIn, const void* pMatch)ZDICT_count191,6840
    U32 pos;pos208,7333
    U32 length;length209,7346
    U32 savings;savings210,7362
} dictItem;dictItem211,7379
static void ZDICT_initDictItem(dictItem* d)ZDICT_initDictItem213,7392
#define LLIMIT LLIMIT221,7505
#define MINMATCHLENGTH MINMATCHLENGTH222,7574
static dictItem ZDICT_analyzePos(ZDICT_analyzePos223,7643
static int isIncluded(const void* in, const void* container, size_t length)isIncluded393,13478
static U32 ZDICT_tryMerge(dictItem* table, dictItem elt, U32 eltNbToSkip, const void* buffer)ZDICT_tryMerge410,13961
static void ZDICT_removeDictItem(dictItem* table, U32 id)ZDICT_removeDictItem469,16367
static void ZDICT_insertDictItem(dictItem* table, U32 maxSize, dictItem elt, const void* buffer)ZDICT_insertDictItem481,16669
static U32 ZDICT_dictSize(const dictItem* dictList)ZDICT_dictSize510,17496
static size_t ZDICT_trainBuffer_legacy(dictItem* dictList, U32 dictListSize,ZDICT_trainBuffer_legacy519,17678
#   undef  DISPLAYUPDATEDISPLAYUPDATE533,18479
#   define DISPLAYUPDATE(DISPLAYUPDATE534,18504
static void ZDICT_fillNoise(void* buffer, size_t length)ZDICT_fillNoise592,20995
    ZSTD_CDict* dict;    /* dictionary */dict607,21326
    ZSTD_CCtx* zc;     /* working context */zc608,21368
    void* workPlace;   /* must be ZSTD_BLOCKSIZE_MAX allocated */workPlace609,21413
} EStats_ress_t;EStats_ress_t610,21479
#define MAXREPOFFSET MAXREPOFFSET612,21497
static void ZDICT_countEStats(EStats_ress_t esr, const ZSTD_parameters* params,ZDICT_countEStats614,21524
static size_t ZDICT_totalSampleSize(const size_t* fileSizes, unsigned nbFiles)ZDICT_totalSampleSize669,23922
typedef struct { U32 offset; U32 count; } offsetCount_t;offset677,24113
typedef struct { U32 offset; U32 count; } offsetCount_t;count677,24113
typedef struct { U32 offset; U32 count; } offsetCount_t;offsetCount_t677,24113
static void ZDICT_insertSortCount(offsetCount_t table[ZSTD_REP_NUM+1], U32 val, U32 count)ZDICT_insertSortCount679,24171
static void ZDICT_flatLit(unsigned* countLit)ZDICT_flatLit697,24785
#define OFFCODE_MAX OFFCODE_MAX706,24959
static size_t ZDICT_analyzeEntropy(void*  dstBuffer, size_t maxDstSize,ZDICT_analyzeEntropy707,25020
size_t ZDICT_finalizeDictionary(void* dictBuffer, size_t dictBufferCapacity,ZDICT_finalizeDictionary887,32229
#define HBUFFSIZE HBUFFSIZE893,32557
static size_t ZDICT_addEntropyTablesFromBuffer_advanced(ZDICT_addEntropyTablesFromBuffer_advanced936,34498
size_t ZDICT_trainFromBuffer_unsafe_legacy(ZDICT_trainFromBuffer_unsafe_legacy979,36729
size_t ZDICT_trainFromBuffer_legacy(void* dictBuffer, size_t dictBufferCapacity,ZDICT_trainFromBuffer_legacy1085,42298
size_t ZDICT_trainFromBuffer(void* dictBuffer, size_t dictBufferCapacity,ZDICT_trainFromBuffer1108,43235
size_t ZDICT_addEntropyTablesFromBuffer(void* dictBuffer, size_t dictContentSize, size_t dictBufferCapacity,ZDICT_addEntropyTablesFromBuffer1126,44044

zstd_v05.h,2456
#define ZSTDv05_HZSTDv05_H12,404
typedef struct ZSTDv05_DCtx_s ZSTDv05_DCtx;ZSTDv05_DCtx61,2543
typedef enum { ZSTDv05_fast, ZSTDv05_greedy, ZSTDv05_lazy, ZSTDv05_lazy2, ZSTDv05_btlazy2, ZSTDv05_opt, ZSTDv05_btopt } ZSTDv05_strategy;ZSTDv05_fast85,3721
typedef enum { ZSTDv05_fast, ZSTDv05_greedy, ZSTDv05_lazy, ZSTDv05_lazy2, ZSTDv05_btlazy2, ZSTDv05_opt, ZSTDv05_btopt } ZSTDv05_strategy;ZSTDv05_greedy85,3721
typedef enum { ZSTDv05_fast, ZSTDv05_greedy, ZSTDv05_lazy, ZSTDv05_lazy2, ZSTDv05_btlazy2, ZSTDv05_opt, ZSTDv05_btopt } ZSTDv05_strategy;ZSTDv05_lazy85,3721
typedef enum { ZSTDv05_fast, ZSTDv05_greedy, ZSTDv05_lazy, ZSTDv05_lazy2, ZSTDv05_btlazy2, ZSTDv05_opt, ZSTDv05_btopt } ZSTDv05_strategy;ZSTDv05_lazy285,3721
typedef enum { ZSTDv05_fast, ZSTDv05_greedy, ZSTDv05_lazy, ZSTDv05_lazy2, ZSTDv05_btlazy2, ZSTDv05_opt, ZSTDv05_btopt } ZSTDv05_strategy;ZSTDv05_btlazy285,3721
typedef enum { ZSTDv05_fast, ZSTDv05_greedy, ZSTDv05_lazy, ZSTDv05_lazy2, ZSTDv05_btlazy2, ZSTDv05_opt, ZSTDv05_btopt } ZSTDv05_strategy;ZSTDv05_opt85,3721
typedef enum { ZSTDv05_fast, ZSTDv05_greedy, ZSTDv05_lazy, ZSTDv05_lazy2, ZSTDv05_btlazy2, ZSTDv05_opt, ZSTDv05_btopt } ZSTDv05_strategy;ZSTDv05_btopt85,3721
typedef enum { ZSTDv05_fast, ZSTDv05_greedy, ZSTDv05_lazy, ZSTDv05_lazy2, ZSTDv05_btlazy2, ZSTDv05_opt, ZSTDv05_btopt } ZSTDv05_strategy;ZSTDv05_strategy85,3721
    U64 srcSize;srcSize87,3876
    U32 windowLog;     /* the only useful information to retrieve */windowLog88,3893
    U32 contentLog; U32 hashLog; U32 searchLog; U32 searchLength; U32 targetLength; ZSTDv05_strategy strategy;contentLog89,3962
    U32 contentLog; U32 hashLog; U32 searchLog; U32 searchLength; U32 targetLength; ZSTDv05_strategy strategy;hashLog89,3962
    U32 contentLog; U32 hashLog; U32 searchLog; U32 searchLength; U32 targetLength; ZSTDv05_strategy strategy;searchLog89,3962
    U32 contentLog; U32 hashLog; U32 searchLog; U32 searchLength; U32 targetLength; ZSTDv05_strategy strategy;searchLength89,3962
    U32 contentLog; U32 hashLog; U32 searchLog; U32 searchLength; U32 targetLength; ZSTDv05_strategy strategy;targetLength89,3962
    U32 contentLog; U32 hashLog; U32 searchLog; U32 searchLength; U32 targetLength; ZSTDv05_strategy strategy;strategy89,3962
} ZSTDv05_parameters;ZSTDv05_parameters90,4073
typedef struct ZBUFFv05_DCtx_s ZBUFFv05_DCtx;ZBUFFv05_DCtx102,4610
#define ZSTDv05_MAGICNUMBER ZSTDv05_MAGICNUMBER153,7413

zstd_decompress.c,9076
#  define ZSTD_HEAPMODE ZSTD_HEAPMODE22,826
#  define ZSTD_LEGACY_SUPPORT ZSTD_LEGACY_SUPPORT30,983
#  define ZSTD_MAXWINDOWSIZE_DEFAULT ZSTD_MAXWINDOWSIZE_DEFAULT40,1284
#  define ZSTD_NO_FORWARD_PROGRESS_MAX ZSTD_NO_FORWARD_PROGRESS_MAX51,1648
#define FSE_STATIC_LINKING_ONLYFSE_STATIC_LINKING_ONLY61,1996
#define HUF_STATIC_LINKING_ONLYHUF_STATIC_LINKING_ONLY63,2045
size_t ZSTD_sizeof_DCtx (const ZSTD_DCtx* dctx)ZSTD_sizeof_DCtx78,2589
size_t ZSTD_estimateDCtxSize(void) { return sizeof(ZSTD_DCtx); }ZSTD_estimateDCtxSize86,2825
static size_t ZSTD_startingInputLength(ZSTD_format_e format)ZSTD_startingInputLength89,2892
static void ZSTD_DCtx_resetParameters(ZSTD_DCtx* dctx)ZSTD_DCtx_resetParameters97,3216
static void ZSTD_initDCtx_internal(ZSTD_DCtx* dctx)ZSTD_initDCtx_internal106,3508
ZSTD_DCtx* ZSTD_initStaticDCtx(void *workspace, size_t workspaceSize)ZSTD_initStaticDCtx130,4214
ZSTD_DCtx* ZSTD_createDCtx_advanced(ZSTD_customMem customMem)ZSTD_createDCtx_advanced143,4605
ZSTD_DCtx* ZSTD_createDCtx(void)ZSTD_createDCtx155,4969
static void ZSTD_clearDict(ZSTD_DCtx* dctx)ZSTD_clearDict161,5098
size_t ZSTD_freeDCtx(ZSTD_DCtx* dctx)ZSTD_freeDCtx169,5274
void ZSTD_copyDCtx(ZSTD_DCtx* dstDCtx, const ZSTD_DCtx* srcDCtx)ZSTD_copyDCtx187,5905
unsigned ZSTD_isFrame(const void* buffer, size_t size)ZSTD_isFrame203,6628
static size_t ZSTD_frameHeaderSize_internal(const void* src, size_t srcSize, ZSTD_format_e format)ZSTD_frameHeaderSize_internal221,7341
size_t ZSTD_frameHeaderSize(const void* src, size_t srcSize)ZSTD_frameHeaderSize240,8100
size_t ZSTD_getFrameHeader_advanced(ZSTD_frameHeader* zfhPtr, const void* src, size_t srcSize, ZSTD_format_e format)ZSTD_getFrameHeader_advanced252,8597
size_t ZSTD_getFrameHeader(ZSTD_frameHeader* zfhPtr, const void* src, size_t srcSize)ZSTD_getFrameHeader334,12326
unsigned long long ZSTD_getFrameContentSize(const void *src, size_t srcSize)ZSTD_getFrameContentSize345,12829
static size_t readSkippableFrameSize(void const* src, size_t srcSize)readSkippableFrameSize363,13443
unsigned long long ZSTD_findDecompressedSize(const void* src, size_t srcSize)ZSTD_findDecompressedSize385,14278
unsigned long long ZSTD_getDecompressedSize(const void* src, size_t srcSize)ZSTD_getDecompressedSize434,16117
static size_t ZSTD_decodeFrameHeader(ZSTD_DCtx* dctx, const void* src, size_t headerSize)ZSTD_decodeFrameHeader445,16593
static ZSTD_frameSizeInfo ZSTD_errorFrameSizeInfo(size_t ret)ZSTD_errorFrameSizeInfo462,17388
static ZSTD_frameSizeInfo ZSTD_findFrameSizeInfo(const void* src, size_t srcSize)ZSTD_findFrameSizeInfo470,17621
size_t ZSTD_findFrameCompressedSize(const void *src, size_t srcSize)ZSTD_findFrameCompressedSize541,20381
unsigned long long ZSTD_decompressBound(const void* src, size_t srcSize)ZSTD_decompressBound553,20848
size_t ZSTD_insertBlock(ZSTD_DCtx* dctx, const void* blockStart, size_t blockSize)ZSTD_insertBlock578,21842
static size_t ZSTD_copyRawBlock(void* dst, size_t dstCapacity,ZSTD_copyRawBlock587,22129
static size_t ZSTD_setRleBlock(void* dst, size_t dstCapacity,ZSTD_setRleBlock600,22523
static size_t ZSTD_decompressFrame(ZSTD_DCtx* dctx,ZSTD_decompressFrame618,23068
static size_t ZSTD_decompressMultiFrame(ZSTD_DCtx* dctx,ZSTD_decompressMultiFrame705,26426
size_t ZSTD_decompress_usingDict(ZSTD_DCtx* dctx,ZSTD_decompress_usingDict796,30269
static ZSTD_DDict const* ZSTD_getDDict(ZSTD_DCtx* dctx)ZSTD_getDDict805,30609
size_t ZSTD_decompressDCtx(ZSTD_DCtx* dctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize)ZSTD_decompressDCtx822,31009
size_t ZSTD_decompress(void* dst, size_t dstCapacity, const void* src, size_t srcSize)ZSTD_decompress828,31221
size_t ZSTD_nextSrcSizeToDecompress(ZSTD_DCtx* dctx) { return dctx->expected; }ZSTD_nextSrcSizeToDecompress849,31937
static size_t ZSTD_nextSrcSizeToDecompressWithInputSize(ZSTD_DCtx* dctx, size_t inputSize) {ZSTD_nextSrcSizeToDecompressWithInputSize861,32440
ZSTD_nextInputType_e ZSTD_nextInputType(ZSTD_DCtx* dctx) {ZSTD_nextInputType869,32775
static int ZSTD_isSkipFrame(ZSTD_DCtx* dctx) { return dctx->stage == ZSTDds_skipFrame; }ZSTD_isSkipFrame891,33412
size_t ZSTD_decompressContinue(ZSTD_DCtx* dctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize)ZSTD_decompressContinue897,33777
static size_t ZSTD_refDictContent(ZSTD_DCtx* dctx, const void* dict, size_t dictSize)ZSTD_refDictContent1051,40898
ZSTD_loadDEntropy(ZSTD_entropyDTables_t* entropy,ZSTD_loadDEntropy1068,41563
static size_t ZSTD_decompress_insertDictionary(ZSTD_DCtx* dctx, const void* dict, size_t dictSize)ZSTD_decompress_insertDictionary1155,46337
size_t ZSTD_decompressBegin(ZSTD_DCtx* dctx)ZSTD_decompressBegin1176,47171
size_t ZSTD_decompressBegin_usingDict(ZSTD_DCtx* dctx, const void* dict, size_t dictSize)ZSTD_decompressBegin_usingDict1199,48102
size_t ZSTD_decompressBegin_usingDDict(ZSTD_DCtx* dctx, const ZSTD_DDict* ddict)ZSTD_decompressBegin_usingDDict1212,48476
unsigned ZSTD_getDictID_fromDict(const void* dict, size_t dictSize)ZSTD_getDictID_fromDict1235,49435
unsigned ZSTD_getDictID_fromFrame(const void* src, size_t srcSize)ZSTD_getDictID_fromFrame1255,50458
size_t ZSTD_decompress_usingDDict(ZSTD_DCtx* dctx,ZSTD_decompress_usingDDict1267,50859
ZSTD_DStream* ZSTD_createDStream(void)ZSTD_createDStream1283,51440
ZSTD_DStream* ZSTD_initStaticDStream(void *workspace, size_t workspaceSize)ZSTD_initStaticDStream1289,51581
ZSTD_DStream* ZSTD_createDStream_advanced(ZSTD_customMem customMem)ZSTD_createDStream_advanced1294,51720
size_t ZSTD_freeDStream(ZSTD_DStream* zds)ZSTD_freeDStream1299,51841
size_t ZSTD_DStreamInSize(void)  { return ZSTD_BLOCKSIZE_MAX + ZSTD_blockHeaderSize; }ZSTD_DStreamInSize1307,51953
size_t ZSTD_DStreamOutSize(void) { return ZSTD_BLOCKSIZE_MAX; }ZSTD_DStreamOutSize1308,52040
size_t ZSTD_DCtx_loadDictionary_advanced(ZSTD_DCtx* dctx,ZSTD_DCtx_loadDictionary_advanced1310,52105
size_t ZSTD_DCtx_loadDictionary_byReference(ZSTD_DCtx* dctx, const void* dict, size_t dictSize)ZSTD_DCtx_loadDictionary_byReference1326,52842
size_t ZSTD_DCtx_loadDictionary(ZSTD_DCtx* dctx, const void* dict, size_t dictSize)ZSTD_DCtx_loadDictionary1331,53042
size_t ZSTD_DCtx_refPrefix_advanced(ZSTD_DCtx* dctx, const void* prefix, size_t prefixSize, ZSTD_dictContentType_e dictContentType)ZSTD_DCtx_refPrefix_advanced1336,53231
size_t ZSTD_DCtx_refPrefix(ZSTD_DCtx* dctx, const void* prefix, size_t prefixSize)ZSTD_DCtx_refPrefix1343,53538
size_t ZSTD_initDStream_usingDict(ZSTD_DStream* zds, const void* dict, size_t dictSize)ZSTD_initDStream_usingDict1352,53840
size_t ZSTD_initDStream(ZSTD_DStream* zds)ZSTD_initDStream1361,54217
size_t ZSTD_initDStream_usingDDict(ZSTD_DStream* dctx, const ZSTD_DDict* ddict)ZSTD_initDStream_usingDDict1370,54493
size_t ZSTD_resetDStream(ZSTD_DStream* dctx)ZSTD_resetDStream1380,54882
size_t ZSTD_DCtx_refDDict(ZSTD_DCtx* dctx, const ZSTD_DDict* ddict)ZSTD_DCtx_refDDict1387,55058
size_t ZSTD_DCtx_setMaxWindowSize(ZSTD_DCtx* dctx, size_t maxWindowSize)ZSTD_DCtx_setMaxWindowSize1401,55505
size_t ZSTD_DCtx_setFormat(ZSTD_DCtx* dctx, ZSTD_format_e format)ZSTD_DCtx_setFormat1413,56029
ZSTD_bounds ZSTD_dParam_getBounds(ZSTD_dParameter dParam)ZSTD_dParam_getBounds1418,56169
static int ZSTD_dParam_withinBounds(ZSTD_dParameter dParam, int value)ZSTD_dParam_withinBounds1448,57250
#define CHECK_DBOUNDS(CHECK_DBOUNDS1457,57538
size_t ZSTD_DCtx_getParameter(ZSTD_DCtx* dctx, ZSTD_dParameter param, int* value)ZSTD_DCtx_getParameter1461,57669
size_t ZSTD_DCtx_setParameter(ZSTD_DCtx* dctx, ZSTD_dParameter dParam, int value)ZSTD_DCtx_setParameter1481,58282
size_t ZSTD_DCtx_reset(ZSTD_DCtx* dctx, ZSTD_ResetDirective reset)ZSTD_DCtx_reset1507,59287
size_t ZSTD_sizeof_DStream(const ZSTD_DStream* dctx)ZSTD_sizeof_DStream1524,59809
size_t ZSTD_decodingBufferSize_min(unsigned long long windowSize, unsigned long long frameContentSize)ZSTD_decodingBufferSize_min1529,59902
size_t ZSTD_estimateDStreamSize(size_t windowSize)ZSTD_estimateDStreamSize1540,60453
size_t ZSTD_estimateDStreamSize_fromFrame(const void* src, size_t srcSize)ZSTD_estimateDStreamSize_fromFrame1548,60807
static int ZSTD_DCtx_isOverflow(ZSTD_DStream* zds, size_t const neededInBuffSize, size_t const neededOutBuffSize)ZSTD_DCtx_isOverflow1563,61417
static void ZSTD_DCtx_updateOversizedDuration(ZSTD_DStream* zds, size_t const neededInBuffSize, size_t const neededOutBuffSize)ZSTD_DCtx_updateOversizedDuration1568,61659
static int ZSTD_DCtx_isOversizedTooLong(ZSTD_DStream* zds)ZSTD_DCtx_isOversizedTooLong1576,61943
static size_t ZSTD_checkOutBuffer(ZSTD_DStream const* zds, ZSTD_outBuffer const* output)ZSTD_checkOutBuffer1582,62159
static size_t ZSTD_decompressContinueStream(ZSTD_decompressContinueStream1604,63239
size_t ZSTD_decompressStream(ZSTD_DStream* zds, ZSTD_outBuffer* output, ZSTD_inBuffer* input)ZSTD_decompressStream1633,64439
size_t ZSTD_decompressStream_simpleArgs (ZSTD_decompressStream_simpleArgs1918,79659

zstd_compress.c,21587
#define FSE_STATIC_LINKING_ONLY FSE_STATIC_LINKING_ONLY18,636
#define HUF_STATIC_LINKING_ONLYHUF_STATIC_LINKING_ONLY20,710
#  define ZSTD_COMPRESS_HEAPMODE ZSTD_COMPRESS_HEAPMODE42,1461
size_t ZSTD_compressBound(size_t srcSize) {ZSTD_compressBound56,1938
struct ZSTD_CDict_s {ZSTD_CDict_s64,2137
    const void* dictContent;dictContent65,2159
    size_t dictContentSize;dictContentSize66,2188
    ZSTD_dictContentType_e dictContentType; /* The dictContentType the CDict was created with */dictContentType67,2216
    U32* entropyWorkspace; /* entropy workspace of HUF_WORKSPACE_SIZE bytes */entropyWorkspace68,2313
    ZSTD_cwksp workspace;workspace69,2392
    ZSTD_matchState_t matchState;matchState70,2418
    ZSTD_compressedBlockState_t cBlockState;cBlockState71,2452
    ZSTD_customMem customMem;customMem72,2497
    U32 dictID;dictID73,2527
    int compressionLevel; /* 0 indicates that advanced API was used to select CDict params */compressionLevel74,2543
ZSTD_CCtx* ZSTD_createCCtx(void)ZSTD_createCCtx77,2688
static void ZSTD_initCCtx(ZSTD_CCtx* cctx, ZSTD_customMem memManager)ZSTD_initCCtx82,2781
ZSTD_CCtx* ZSTD_createCCtx_advanced(ZSTD_customMem customMem)ZSTD_createCCtx_advanced94,3139
ZSTD_CCtx* ZSTD_initStaticCCtx(void* workspace, size_t workspaceSize)ZSTD_initStaticCCtx106,3571
static void ZSTD_clearAllDicts(ZSTD_CCtx* cctx)ZSTD_clearAllDicts133,4905
static size_t ZSTD_sizeof_localDict(ZSTD_localDict dict)ZSTD_sizeof_localDict142,5219
static void ZSTD_freeCCtxContent(ZSTD_CCtx* cctx)ZSTD_freeCCtxContent149,5451
size_t ZSTD_freeCCtx(ZSTD_CCtx* cctx)ZSTD_freeCCtx160,5738
static size_t ZSTD_sizeof_mtctx(const ZSTD_CCtx* cctx)ZSTD_sizeof_mtctx176,6188
size_t ZSTD_sizeof_CCtx(const ZSTD_CCtx* cctx)ZSTD_sizeof_CCtx187,6360
size_t ZSTD_sizeof_CStream(const ZSTD_CStream* zcs)ZSTD_sizeof_CStream197,6718
const seqStore_t* ZSTD_getSeqStore(const ZSTD_CCtx* ctx) { return &(ctx->seqStore); }ZSTD_getSeqStore203,6873
static U32 ZSTD_CParams_shouldEnableLdm(const ZSTD_compressionParameters* const cParams) {ZSTD_CParams_shouldEnableLdm209,7117
static ZSTD_CCtx_params ZSTD_makeCCtxParamsFromCParams(ZSTD_makeCCtxParamsFromCParams213,7283
static ZSTD_CCtx_params* ZSTD_createCCtxParams_advanced(ZSTD_createCCtxParams_advanced234,8135
ZSTD_CCtx_params* ZSTD_createCCtxParams(void)ZSTD_createCCtxParams247,8578
size_t ZSTD_freeCCtxParams(ZSTD_CCtx_params* params)ZSTD_freeCCtxParams252,8690
size_t ZSTD_CCtxParams_reset(ZSTD_CCtx_params* params)ZSTD_CCtxParams_reset259,8848
size_t ZSTD_CCtxParams_init(ZSTD_CCtx_params* cctxParams, int compressionLevel) {ZSTD_CCtxParams_init264,8970
size_t ZSTD_CCtxParams_init_advanced(ZSTD_CCtx_params* cctxParams, ZSTD_parameters params)ZSTD_CCtxParams_init_advanced272,9280
static ZSTD_CCtx_params ZSTD_assignParamsToCCtxParams(ZSTD_assignParamsToCCtxParams286,9908
ZSTD_bounds ZSTD_cParam_getBounds(ZSTD_cParameter param)ZSTD_cParam_getBounds297,10338
static size_t ZSTD_cParam_clampBounds(ZSTD_cParameter cParam, int* value)ZSTD_cParam_clampBounds480,15654
#define BOUNDCHECK(BOUNDCHECK489,15994
static int ZSTD_isUpdateAuthorized(ZSTD_cParameter param)ZSTD_isUpdateAuthorized495,16163
size_t ZSTD_CCtx_setParameter(ZSTD_CCtx* cctx, ZSTD_cParameter param, int value)ZSTD_CCtx_setParameter537,17261
size_t ZSTD_CCtxParams_setParameter(ZSTD_CCtx_params* CCtxParams,ZSTD_CCtxParams_setParameter591,18961
size_t ZSTD_CCtx_getParameter(ZSTD_CCtx* cctx, ZSTD_cParameter param, int* value)ZSTD_CCtx_getParameter799,26812
size_t ZSTD_CCtxParams_getParameter(ZSTD_CCtxParams_getParameter804,26978
size_t ZSTD_CCtx_setParametersUsingCCtxParams(ZSTD_CCtx_setParametersUsingCCtxParams930,31026
ZSTDLIB_API size_t ZSTD_CCtx_setPledgedSrcSize(ZSTD_CCtx* cctx, unsigned long long pledgedSrcSize)ZSTD_CCtx_setPledgedSrcSize944,31550
static size_t ZSTD_initLocalDict(ZSTD_CCtx* cctx)ZSTD_initLocalDict966,32454
size_t ZSTD_CCtx_loadDictionary_advanced(ZSTD_CCtx_loadDictionary_advanced997,33359
ZSTDLIB_API size_t ZSTD_CCtx_loadDictionary_byReference(ZSTD_CCtx_loadDictionary_byReference1024,34556
ZSTDLIB_API size_t ZSTD_CCtx_loadDictionary(ZSTD_CCtx* cctx, const void* dict, size_t dictSize)ZSTD_CCtx_loadDictionary1031,34788
size_t ZSTD_CCtx_refCDict(ZSTD_CCtx* cctx, const ZSTD_CDict* cdict)ZSTD_CCtx_refCDict1038,35003
size_t ZSTD_CCtx_refThreadPool(ZSTD_CCtx* cctx, ZSTD_threadPool* pool)ZSTD_CCtx_refThreadPool1048,35344
size_t ZSTD_CCtx_refPrefix(ZSTD_CCtx* cctx, const void* prefix, size_t prefixSize)ZSTD_CCtx_refPrefix1056,35591
size_t ZSTD_CCtx_refPrefix_advanced(ZSTD_CCtx_refPrefix_advanced1061,35767
size_t ZSTD_CCtx_reset(ZSTD_CCtx* cctx, ZSTD_ResetDirective reset)ZSTD_CCtx_reset1077,36344
size_t ZSTD_checkCParams(ZSTD_compressionParameters cParams)ZSTD_checkCParams1098,37131
ZSTD_clampCParams(ZSTD_compressionParameters cParams)ZSTD_clampCParams1114,37746
#   define CLAMP_TYPE(CLAMP_TYPE1116,37802
#   define CLAMP(CLAMP1121,38112
U32 ZSTD_cycleLog(U32 hashLog, ZSTD_strategy strat)ZSTD_cycleLog1134,38628
static U32 ZSTD_dictAndWindowLog(U32 windowLog, U64 srcSize, U64 dictSize)ZSTD_dictAndWindowLog1148,39266
ZSTD_adjustCParams_internal(ZSTD_compressionParameters cPar,ZSTD_adjustCParams_internal1182,40812
ZSTD_adjustCParams(ZSTD_compressionParameters cPar,ZSTD_adjustCParams1230,42553
static void ZSTD_overrideCParams(ZSTD_overrideCParams1242,43243
ZSTD_compressionParameters ZSTD_getCParamsFromCCtxParams(ZSTD_getCParamsFromCCtxParams1255,43937
ZSTD_sizeof_matchState(const ZSTD_compressionParameters* const cParams,ZSTD_sizeof_matchState1271,44690
static size_t ZSTD_estimateCCtxSize_usingCCtxParams_internal(ZSTD_estimateCCtxSize_usingCCtxParams_internal1298,46140
size_t ZSTD_estimateCCtxSize_usingCCtxParams(const ZSTD_CCtx_params* params)ZSTD_estimateCCtxSize_usingCCtxParams1342,47982
size_t ZSTD_estimateCCtxSize_usingCParams(ZSTD_compressionParameters cParams)ZSTD_estimateCCtxSize_usingCParams1355,48661
static size_t ZSTD_estimateCCtxSize_internal(int compressionLevel)ZSTD_estimateCCtxSize_internal1361,48880
size_t ZSTD_estimateCCtxSize(int compressionLevel)ZSTD_estimateCCtxSize1367,49151
size_t ZSTD_estimateCStreamSize_usingCCtxParams(const ZSTD_CCtx_params* params)ZSTD_estimateCStreamSize_usingCCtxParams1378,49471
size_t ZSTD_estimateCStreamSize_usingCParams(ZSTD_compressionParameters cParams)ZSTD_estimateCStreamSize_usingCParams1397,50422
static size_t ZSTD_estimateCStreamSize_internal(int compressionLevel)ZSTD_estimateCStreamSize_internal1403,50647
size_t ZSTD_estimateCStreamSize(int compressionLevel)ZSTD_estimateCStreamSize1409,50924
ZSTD_frameProgression ZSTD_getFrameProgression(const ZSTD_CCtx* cctx)ZSTD_getFrameProgression1424,51447
size_t ZSTD_toFlushNow(ZSTD_CCtx* cctx)ZSTD_toFlushNow1448,52393
static void ZSTD_assertEqualCParams(ZSTD_compressionParameters cParams1,ZSTD_assertEqualCParams1459,52779
void ZSTD_reset_compressedBlockState(ZSTD_compressedBlockState_t* bs)ZSTD_reset_compressedBlockState1473,53367
static void ZSTD_invalidateMatchState(ZSTD_matchState_t* ms)ZSTD_invalidateMatchState1488,53911
    ZSTDcrp_makeClean,ZSTDcrp_makeClean1506,54557
    ZSTDcrp_leaveDirtyZSTDcrp_leaveDirty1507,54580
} ZSTD_compResetPolicy_e;ZSTD_compResetPolicy_e1508,54603
    ZSTDirp_continue,ZSTDirp_continue1516,54830
    ZSTDirp_resetZSTDirp_reset1517,54852
} ZSTD_indexResetPolicy_e;ZSTD_indexResetPolicy_e1518,54870
    ZSTD_resetTarget_CDict,ZSTD_resetTarget_CDict1521,54913
    ZSTD_resetTarget_CCtxZSTD_resetTarget_CCtx1522,54941
} ZSTD_resetTarget_e;ZSTD_resetTarget_e1523,54967
ZSTD_reset_matchState(ZSTD_matchState_t* ms,ZSTD_reset_matchState1526,55004
#define ZSTD_INDEXOVERFLOW_MARGIN ZSTD_INDEXOVERFLOW_MARGIN1592,58081
static int ZSTD_indexTooCloseToMax(ZSTD_window_t w)ZSTD_indexTooCloseToMax1593,58123
static size_t ZSTD_resetCCtx_internal(ZSTD_CCtx* zc,ZSTD_resetCCtx_internal1600,58367
void ZSTD_invalidateRepCodes(ZSTD_CCtx* cctx) {ZSTD_invalidateRepCodes1768,66482
static const size_t attachDictSizeCutoffs[ZSTD_STRATEGY_MAX+1] = {attachDictSizeCutoffs1778,66858
static int ZSTD_shouldAttachDict(const ZSTD_CDict* cdict,ZSTD_shouldAttachDict1791,67211
ZSTD_resetCCtx_byAttachingCDict(ZSTD_CCtx* cctx,ZSTD_resetCCtx_byAttachingCDict1807,67952
static size_t ZSTD_resetCCtx_byCopyingCDict(ZSTD_CCtx* cctx,ZSTD_resetCCtx_byCopyingCDict1862,70542
static size_t ZSTD_resetCCtx_usingCDict(ZSTD_CCtx* cctx,ZSTD_resetCCtx_usingCDict1928,73359
static size_t ZSTD_copyCCtx_internal(ZSTD_CCtx* dstCCtx,ZSTD_copyCCtx_internal1954,74494
size_t ZSTD_copyCCtx(ZSTD_CCtx* dstCCtx, const ZSTD_CCtx* srcCCtx, unsigned long long pledgedSrcSize)ZSTD_copyCCtx2020,77749
#define ZSTD_ROWSIZE ZSTD_ROWSIZE2034,78353
ZSTD_reduceTable_internal (U32* const table, U32 const size, U32 const reducerValue, int const preserveMark)ZSTD_reduceTable_internal2042,78719
static void ZSTD_reduceTable(U32* const table, U32 const size, U32 const reducerValue)ZSTD_reduceTable2076,80165
static void ZSTD_reduceTable_btlazy2(U32* const table, U32 const size, U32 const reducerValue)ZSTD_reduceTable_btlazy22081,80318
static void ZSTD_reduceIndex (ZSTD_matchState_t* ms, ZSTD_CCtx_params const* params, const U32 reducerValue)ZSTD_reduceIndex2088,80574
void ZSTD_seqToCodes(const seqStore_t* seqStorePtr)ZSTD_seqToCodes2115,81526
static int ZSTD_useTargetCBlockSize(const ZSTD_CCtx_params* cctxParams)ZSTD_useTargetCBlockSize2141,82669
ZSTD_entropyCompressSequences_internal(seqStore_t* seqStorePtr,ZSTD_entropyCompressSequences_internal2150,83009
ZSTD_entropyCompressSequences(seqStore_t* seqStorePtr,ZSTD_entropyCompressSequences2341,92897
ZSTD_blockCompressor ZSTD_selectBlockCompressor(ZSTD_strategy strat, ZSTD_dictMode_e dictMode)ZSTD_selectBlockCompressor2373,94500
static void ZSTD_storeLastLiterals(seqStore_t* seqStorePtr,ZSTD_storeLastLiterals2426,96696
void ZSTD_resetSeqStore(seqStore_t* ssPtr)ZSTD_resetSeqStore2433,96926
typedef enum { ZSTDbss_compress, ZSTDbss_noCompress } ZSTD_buildSeqStore_e;ZSTDbss_compress2440,97083
typedef enum { ZSTDbss_compress, ZSTDbss_noCompress } ZSTD_buildSeqStore_e;ZSTDbss_noCompress2440,97083
typedef enum { ZSTDbss_compress, ZSTDbss_noCompress } ZSTD_buildSeqStore_e;ZSTD_buildSeqStore_e2440,97083
static size_t ZSTD_buildSeqStore(ZSTD_CCtx* zc, const void* src, size_t srcSize)ZSTD_buildSeqStore2442,97160
static void ZSTD_copyBlockSequences(ZSTD_CCtx* zc)ZSTD_copyBlockSequences2519,101206
size_t ZSTD_generateSequences(ZSTD_CCtx* zc, ZSTD_Sequence* outSeqs,ZSTD_generateSequences2583,104065
size_t ZSTD_mergeBlockDelimiters(ZSTD_Sequence* sequences, size_t seqsSize) {ZSTD_mergeBlockDelimiters2603,104779
static int ZSTD_isRLE(const BYTE* src, size_t length) {ZSTD_isRLE2620,105334
static int ZSTD_maybeRLE(seqStore_t const* seqStore)ZSTD_maybeRLE2648,106312
static void ZSTD_confirmRepcodesAndEntropyTables(ZSTD_CCtx* zc)ZSTD_confirmRepcodesAndEntropyTables2656,106565
static size_t ZSTD_compressBlock_internal(ZSTD_CCtx* zc,ZSTD_compressBlock_internal2663,106802
static size_t ZSTD_compressBlock_targetCBlockSize_body(ZSTD_CCtx* zc,ZSTD_compressBlock_targetCBlockSize_body2732,109346
static size_t ZSTD_compressBlock_targetCBlockSize(ZSTD_CCtx* zc,ZSTD_compressBlock_targetCBlockSize2787,112087
static void ZSTD_overflowCorrectIfNeeded(ZSTD_matchState_t* ms,ZSTD_overflowCorrectIfNeeded2807,113117
static size_t ZSTD_compress_frameChunk (ZSTD_CCtx* cctx,ZSTD_compress_frameChunk2838,114665
static size_t ZSTD_writeFrameHeader(void* dst, size_t dstCapacity,ZSTD_writeFrameHeader2913,118067
size_t ZSTD_writeLastEmptyBlock(void* dst, size_t dstCapacity)ZSTD_writeLastEmptyBlock2962,120769
size_t ZSTD_referenceExternalSequences(ZSTD_CCtx* cctx, rawSeq* seq, size_t nbSeq)ZSTD_referenceExternalSequences2972,121166
static size_t ZSTD_compressContinue_internal (ZSTD_CCtx* cctx,ZSTD_compressContinue_internal2988,121717
size_t ZSTD_compressContinue (ZSTD_CCtx* cctx,ZSTD_compressContinue3048,124447
size_t ZSTD_getBlockSize(const ZSTD_CCtx* cctx)ZSTD_getBlockSize3057,124813
size_t ZSTD_compressBlock(ZSTD_CCtx* cctx, void* dst, size_t dstCapacity, const void* src, size_t srcSize)ZSTD_compressBlock3064,125049
static size_t ZSTD_loadDictionaryContent(ZSTD_matchState_t* ms,ZSTD_loadDictionaryContent3076,125583
static FSE_repeat ZSTD_dictNCountRepeat(short* normalizedCounter, unsigned dictMaxSymbolValue, unsigned maxSymbolValue)ZSTD_dictNCountRepeat3153,128468
size_t ZSTD_loadCEntropy(ZSTD_compressedBlockState_t* bs, void* workspace,ZSTD_loadCEntropy3167,128857
static size_t ZSTD_loadZstdDictionary(ZSTD_compressedBlockState_t* bs,ZSTD_loadZstdDictionary3268,133856
ZSTD_compress_insertDictionary(ZSTD_compressedBlockState_t* bs,ZSTD_compress_insertDictionary3301,135176
#define ZSTD_USE_CDICT_PARAMS_SRCSIZE_CUTOFF ZSTD_USE_CDICT_PARAMS_SRCSIZE_CUTOFF3338,136677
#define ZSTD_USE_CDICT_PARAMS_DICTSIZE_MULTIPLIER ZSTD_USE_CDICT_PARAMS_DICTSIZE_MULTIPLIER3339,136731
static size_t ZSTD_compressBegin_internal(ZSTD_CCtx* cctx,ZSTD_compressBegin_internal3343,136861
size_t ZSTD_compressBegin_advanced_internal(ZSTD_CCtx* cctx,ZSTD_compressBegin_advanced_internal3384,139114
size_t ZSTD_compressBegin_advanced(ZSTD_CCtx* cctx,ZSTD_compressBegin_advanced3404,140181
size_t ZSTD_compressBegin_usingDict(ZSTD_CCtx* cctx, const void* dict, size_t dictSize, int compressionLevel)ZSTD_compressBegin_usingDict3416,140791
size_t ZSTD_compressBegin(ZSTD_CCtx* cctx, int compressionLevel)ZSTD_compressBegin3426,141439
static size_t ZSTD_writeEpilogue(ZSTD_CCtx* cctx, void* dst, size_t dstCapacity)ZSTD_writeEpilogue3435,141694
size_t ZSTD_compressEnd (ZSTD_CCtx* cctx,ZSTD_compressEnd3474,143159
static size_t ZSTD_compress_internal (ZSTD_CCtx* cctx,ZSTD_compress_internal3499,144375
size_t ZSTD_compress_advanced (ZSTD_CCtx* cctx,ZSTD_compress_advanced3515,145139
size_t ZSTD_compress_advanced_internal(ZSTD_compress_advanced_internal3531,145779
size_t ZSTD_compress_usingDict(ZSTD_CCtx* cctx,ZSTD_compress_usingDict3545,146365
size_t ZSTD_compressCCtx(ZSTD_CCtx* cctx,ZSTD_compressCCtx3558,147116
size_t ZSTD_compress(void* dst, size_t dstCapacity,ZSTD_compress3568,147515
size_t ZSTD_estimateCDictSize_advanced(ZSTD_estimateCDictSize_advanced3592,148420
size_t ZSTD_estimateCDictSize(size_t dictSize, int compressionLevel)ZSTD_estimateCDictSize3604,148944
size_t ZSTD_sizeof_CDict(const ZSTD_CDict* cdict)ZSTD_sizeof_CDict3610,149247
static size_t ZSTD_initCDict_internal(ZSTD_initCDict_internal3619,149588
static ZSTD_CDict* ZSTD_createCDict_advanced_internal(size_t dictSize,ZSTD_createCDict_advanced_internal3674,151938
ZSTD_CDict* ZSTD_createCDict_advanced(const void* dictBuffer, size_t dictSize,ZSTD_createCDict_advanced3707,153231
ZSTDLIB_API ZSTD_CDict* ZSTD_createCDict_advanced2(ZSTD_createCDict_advanced23724,153950
ZSTD_CDict* ZSTD_createCDict(const void* dict, size_t dictSize, int compressionLevel)ZSTD_createCDict3771,155656
ZSTD_CDict* ZSTD_createCDict_byReference(const void* dict, size_t dictSize, int compressionLevel)ZSTD_createCDict_byReference3782,156255
size_t ZSTD_freeCDict(ZSTD_CDict* cdict)ZSTD_freeCDict3793,156839
const ZSTD_CDict* ZSTD_initStaticCDict(ZSTD_initStaticCDict3819,157934
ZSTD_compressionParameters ZSTD_getCParamsFromCDict(const ZSTD_CDict* cdict)ZSTD_getCParamsFromCDict3861,159742
unsigned ZSTD_getDictID_fromCDict(const ZSTD_CDict* cdict)ZSTD_getDictID_fromCDict3871,160167
size_t ZSTD_compressBegin_usingCDict_advanced(ZSTD_compressBegin_usingCDict_advanced3880,160363
size_t ZSTD_compressBegin_usingCDict(ZSTD_CCtx* cctx, const ZSTD_CDict* cdict)ZSTD_compressBegin_usingCDict3917,162396
size_t ZSTD_compress_usingCDict_advanced(ZSTD_CCtx* cctx,ZSTD_compress_usingCDict_advanced3924,162763
size_t ZSTD_compress_usingCDict(ZSTD_CCtx* cctx,ZSTD_compress_usingCDict3938,163543
ZSTD_CStream* ZSTD_createCStream(void)ZSTD_createCStream3953,164130
ZSTD_CStream* ZSTD_initStaticCStream(void *workspace, size_t workspaceSize)ZSTD_initStaticCStream3959,164271
ZSTD_CStream* ZSTD_createCStream_advanced(ZSTD_customMem customMem)ZSTD_createCStream_advanced3964,164410
size_t ZSTD_freeCStream(ZSTD_CStream* zcs)ZSTD_freeCStream3969,164576
size_t ZSTD_CStreamInSize(void)  { return ZSTD_BLOCKSIZE_MAX; }ZSTD_CStreamInSize3978,164715
size_t ZSTD_CStreamOutSize(void)ZSTD_CStreamOutSize3980,164780
static ZSTD_cParamMode_e ZSTD_getCParamMode(ZSTD_CDict const* cdict, ZSTD_CCtx_params const* params, U64 pledgedSrcSize)ZSTD_getCParamMode3985,164916
size_t ZSTD_resetCStream(ZSTD_CStream* zcs, unsigned long long pss)ZSTD_resetCStream3995,165270
size_t ZSTD_initCStream_internal(ZSTD_CStream* zcs,ZSTD_initCStream_internal4012,166082
size_t ZSTD_initCStream_usingCDict_advanced(ZSTD_CStream* zcs,ZSTD_initCStream_usingCDict_advanced4034,167058
size_t ZSTD_initCStream_usingCDict(ZSTD_CStream* zcs, const ZSTD_CDict* cdict)ZSTD_initCStream_usingCDict4048,167728
size_t ZSTD_initCStream_advanced(ZSTD_CStream* zcs,ZSTD_initCStream_advanced4061,168233
size_t ZSTD_initCStream_usingDict(ZSTD_CStream* zcs, const void* dict, size_t dictSize, int compressionLevel)ZSTD_initCStream_usingDict4079,169176
size_t ZSTD_initCStream_srcSize(ZSTD_CStream* zcs, int compressionLevel, unsigned long long pss)ZSTD_initCStream_srcSize4088,169602
size_t ZSTD_initCStream(ZSTD_CStream* zcs, int compressionLevel)ZSTD_initCStream4103,170365
static size_t ZSTD_nextInputSizeHint(const ZSTD_CCtx* cctx)ZSTD_nextInputSizeHint4114,170755
static size_t ZSTD_compressStream_generic(ZSTD_CStream* zcs,ZSTD_compressStream_generic4125,171153
static size_t ZSTD_nextInputSizeHint_MTorST(const ZSTD_CCtx* cctx)ZSTD_nextInputSizeHint_MTorST4292,179370
size_t ZSTD_compressStream(ZSTD_CStream* zcs, ZSTD_outBuffer* output, ZSTD_inBuffer* input)ZSTD_compressStream4304,179658
static void ZSTD_setBufferExpectations(ZSTD_CCtx* cctx, ZSTD_outBuffer const* output, ZSTD_inBuffer const* input)ZSTD_setBufferExpectations4313,180023
static size_t ZSTD_checkBufferStability(ZSTD_CCtx const* cctx,ZSTD_checkBufferStability4326,180493
static size_t ZSTD_CCtx_init_compressStream2(ZSTD_CCtx* cctx,ZSTD_CCtx_init_compressStream24346,181527
size_t ZSTD_compressStream2( ZSTD_CCtx* cctx,ZSTD_compressStream24421,185257
size_t ZSTD_compressStream2_simpleArgs (ZSTD_compressStream2_simpleArgs4490,188620
size_t ZSTD_compress2(ZSTD_CCtx* cctx,ZSTD_compress24505,189242
    U32 idx;             /* Index in array of ZSTD_Sequence */idx4536,190707
    U32 posInSequence;   /* Position within sequence at idx */posInSequence4537,190770
    size_t posInSrc;        /* Number of bytes given by sequences provided so far */posInSrc4538,190833
} ZSTD_sequencePosition;ZSTD_sequencePosition4539,190918
static size_t ZSTD_validateSequence(U32 offCode, U32 matchLength,ZSTD_validateSequence4542,191001
static U32 ZSTD_finalizeOffCode(U32 rawOffset, const U32 rep[ZSTD_REP_NUM], U32 ll0) {ZSTD_finalizeOffCode4558,192046
static size_t ZSTD_copySequencesToSeqStoreExplicitBlockDelim(ZSTD_CCtx* cctx, ZSTD_sequencePosition* seqPos,ZSTD_copySequencesToSeqStoreExplicitBlockDelim4581,192816
static size_t ZSTD_copySequencesToSeqStoreNoBlockDelim(ZSTD_CCtx* cctx, ZSTD_sequencePosition* seqPos,ZSTD_copySequencesToSeqStoreNoBlockDelim4646,196102
typedef size_t (*ZSTD_sequenceCopier) (ZSTD_CCtx* cctx, ZSTD_sequencePosition* seqPos,ZSTD_sequenceCopier4767,202762
static ZSTD_sequenceCopier ZSTD_selectSequenceCopier(ZSTD_sequenceFormat_e mode) {ZSTD_selectSequenceCopier4770,203017
static size_t ZSTD_compressSequences_internal(ZSTD_CCtx* cctx,ZSTD_compressSequences_internal4786,203681
size_t ZSTD_compressSequences(ZSTD_CCtx* const cctx, void* dst, size_t dstCapacity,ZSTD_compressSequences4897,208876
size_t ZSTD_flushStream(ZSTD_CStream* zcs, ZSTD_outBuffer* output)ZSTD_flushStream4942,210901
size_t ZSTD_endStream(ZSTD_CStream* zcs, ZSTD_outBuffer* output)ZSTD_endStream4949,211084
#define ZSTD_MAX_CLEVEL ZSTD_MAX_CLEVEL4967,211981
int ZSTD_maxCLevel(void) { return ZSTD_MAX_CLEVEL; }ZSTD_maxCLevel4968,212012
int ZSTD_minCLevel(void) { return (int)-ZSTD_TARGETLENGTH_MAX; }ZSTD_minCLevel4969,212065
static const ZSTD_compressionParameters ZSTD_defaultCParameters[4][ZSTD_MAX_CLEVEL+1] = {ZSTD_defaultCParameters4971,212131
static ZSTD_compressionParameters ZSTD_dedicatedDictSearch_getCParams(int const compressionLevel, size_t const dictSize)ZSTD_dedicatedDictSearch_getCParams5078,218303
static int ZSTD_dedicatedDictSearch_isSupported(ZSTD_dedicatedDictSearch_isSupported5099,218953
static void ZSTD_dedicatedDictSearch_revertCParams(ZSTD_dedicatedDictSearch_revertCParams5110,219356
static U64 ZSTD_getCParamRowSize(U64 srcSizeHint, size_t dictSize, ZSTD_cParamMode_e mode)ZSTD_getCParamRowSize5129,219844
static ZSTD_compressionParameters ZSTD_getCParams_internal(int compressionLevel, unsigned long long srcSizeHint, size_t dictSize, ZSTD_cParamMode_e mode)ZSTD_getCParams_internal5154,220784
ZSTD_compressionParameters ZSTD_getCParams(int compressionLevel, unsigned long long srcSizeHint, size_t dictSize)ZSTD_getCParams5181,222126
static ZSTD_parameters ZSTD_getParams_internal(int compressionLevel, unsigned long long srcSizeHint, size_t dictSize, ZSTD_cParamMode_e mode) {ZSTD_getParams_internal5191,222615
ZSTD_parameters ZSTD_getParams(int compressionLevel, unsigned long long srcSizeHint, size_t dictSize) {ZSTD_getParams5205,223317

zstd_double_fast.h,53
#define ZSTD_DOUBLE_FAST_HZSTD_DOUBLE_FAST_H12,413

zstd_lazy.c,3455
ZSTD_updateDUBT(ZSTD_matchState_t* ms,ZSTD_updateDUBT20,564
ZSTD_insertDUBT1(ZSTD_matchState_t* ms,ZSTD_insertDUBT164,2122
ZSTD_DUBT_findBetterDictMatch (ZSTD_DUBT_findBetterDictMatch153,6941
ZSTD_DUBT_findBestMatch(ZSTD_matchState_t* ms,ZSTD_DUBT_findBestMatch231,10929
ZSTD_BtFindBestMatch( ZSTD_matchState_t* ms,ZSTD_BtFindBestMatch381,18103
ZSTD_BtFindBestMatch_selectMLS (  ZSTD_matchState_t* ms,ZSTD_BtFindBestMatch_selectMLS395,18608
static size_t ZSTD_BtFindBestMatch_dictMatchState_selectMLS (ZSTD_BtFindBestMatch_dictMatchState_selectMLS410,19143
static size_t ZSTD_BtFindBestMatch_extDict_selectMLS (ZSTD_BtFindBestMatch_extDict_selectMLS426,19740
#define NEXT_IN_CHAIN(NEXT_IN_CHAIN446,20398
FORCE_INLINE_TEMPLATE U32 ZSTD_insertAndFindFirstIndex_internal(ZSTD_insertAndFindFirstIndex_internal450,20560
U32 ZSTD_insertAndFindFirstIndex(ZSTD_matchState_t* ms, const BYTE* ip) {ZSTD_insertAndFindFirstIndex474,21403
void ZSTD_dedicatedDictSearch_lazy_loadDictionary(ZSTD_matchState_t* ms, const BYTE* const ip)ZSTD_dedicatedDictSearch_lazy_loadDictionary479,21637
size_t ZSTD_HcFindBestMatch_generic (ZSTD_HcFindBestMatch_generic597,26477
FORCE_INLINE_TEMPLATE size_t ZSTD_HcFindBestMatch_selectMLS (ZSTD_HcFindBestMatch_selectMLS785,34787
static size_t ZSTD_HcFindBestMatch_dictMatchState_selectMLS (ZSTD_HcFindBestMatch_dictMatchState_selectMLS801,35384
static size_t ZSTD_HcFindBestMatch_dedicatedDictSearch_selectMLS (ZSTD_HcFindBestMatch_dedicatedDictSearch_selectMLS817,36005
FORCE_INLINE_TEMPLATE size_t ZSTD_HcFindBestMatch_extDict_selectMLS (ZSTD_HcFindBestMatch_extDict_selectMLS833,36646
typedef enum { search_hashChain, search_binaryTree } searchMethod_e;search_hashChain852,37357
typedef enum { search_hashChain, search_binaryTree } searchMethod_e;search_binaryTree852,37357
typedef enum { search_hashChain, search_binaryTree } searchMethod_e;searchMethod_e852,37357
ZSTD_compressBlock_lazy_generic(ZSTD_compressBlock_lazy_generic855,37456
size_t ZSTD_compressBlock_btlazy2(ZSTD_compressBlock_btlazy21123,50381
size_t ZSTD_compressBlock_lazy2(ZSTD_compressBlock_lazy21130,50650
size_t ZSTD_compressBlock_lazy(ZSTD_compressBlock_lazy1137,50916
size_t ZSTD_compressBlock_greedy(ZSTD_compressBlock_greedy1144,51181
size_t ZSTD_compressBlock_btlazy2_dictMatchState(ZSTD_compressBlock_btlazy2_dictMatchState1151,51448
size_t ZSTD_compressBlock_lazy2_dictMatchState(ZSTD_compressBlock_lazy2_dictMatchState1158,51740
size_t ZSTD_compressBlock_lazy_dictMatchState(ZSTD_compressBlock_lazy_dictMatchState1165,52029
size_t ZSTD_compressBlock_greedy_dictMatchState(ZSTD_compressBlock_greedy_dictMatchState1172,52317
size_t ZSTD_compressBlock_lazy2_dedicatedDictSearch(ZSTD_compressBlock_lazy2_dedicatedDictSearch1180,52608
size_t ZSTD_compressBlock_lazy_dedicatedDictSearch(ZSTD_compressBlock_lazy_dedicatedDictSearch1187,52907
size_t ZSTD_compressBlock_greedy_dedicatedDictSearch(ZSTD_compressBlock_greedy_dedicatedDictSearch1194,53205
size_t ZSTD_compressBlock_lazy_extDict_generic(ZSTD_compressBlock_lazy_extDict_generic1203,53528
size_t ZSTD_compressBlock_greedy_extDict(ZSTD_compressBlock_greedy_extDict1383,62311
size_t ZSTD_compressBlock_lazy_extDict(ZSTD_compressBlock_lazy_extDict1390,62581
size_t ZSTD_compressBlock_lazy2_extDict(ZSTD_compressBlock_lazy2_extDict1398,62850
size_t ZSTD_compressBlock_btlazy2_extDict(ZSTD_compressBlock_btlazy2_extDict1406,63120

mem.h,5077
#define MEM_H_MODULEMEM_H_MODULE12,407
#  define MEM_STATIC MEM_STATIC35,1029
#  define MEM_STATIC MEM_STATIC37,1193
#  define MEM_STATIC MEM_STATIC39,1252
#  define MEM_STATIC MEM_STATIC41,1295
  typedef   uint8_t BYTE;BYTE53,1806
  typedef  uint16_t U16;U1654,1832
  typedef   int16_t S16;S1655,1857
  typedef  uint32_t U32;U3256,1882
  typedef   int32_t S32;S3257,1907
  typedef  uint64_t U64;U6458,1932
  typedef   int64_t S64;S6459,1957
  typedef unsigned char      BYTE;BYTE65,2104
  typedef unsigned short      U16;U1669,2241
  typedef   signed short      S16;S1670,2276
  typedef unsigned int        U32;U3274,2415
  typedef   signed int        S32;S3275,2450
  typedef unsigned long long  U64;U6478,2624
  typedef   signed long long  S64;S6479,2659
#    define MEM_FORCE_MEMORY_ACCESS MEM_FORCE_MEMORY_ACCESS147,5923
#    define MEM_FORCE_MEMORY_ACCESS MEM_FORCE_MEMORY_ACCESS149,6039
MEM_STATIC unsigned MEM_32bits(void) { return sizeof(size_t)==4; }MEM_32bits153,6094
MEM_STATIC unsigned MEM_64bits(void) { return sizeof(size_t)==8; }MEM_64bits154,6161
MEM_STATIC unsigned MEM_isLittleEndian(void)MEM_isLittleEndian156,6229
MEM_STATIC U16 MEM_read16(const void* memPtr) { return *(const U16*) memPtr; }MEM_read16166,6608
MEM_STATIC U32 MEM_read32(const void* memPtr) { return *(const U32*) memPtr; }MEM_read32167,6687
MEM_STATIC U64 MEM_read64(const void* memPtr) { return *(const U64*) memPtr; }MEM_read64168,6766
MEM_STATIC size_t MEM_readST(const void* memPtr) { return *(const size_t*) memPtr; }MEM_readST169,6845
MEM_STATIC void MEM_write16(void* memPtr, U16 value) { *(U16*)memPtr = value; }MEM_write16171,6931
MEM_STATIC void MEM_write32(void* memPtr, U32 value) { *(U32*)memPtr = value; }MEM_write32172,7011
MEM_STATIC void MEM_write64(void* memPtr, U64 value) { *(U64*)memPtr = value; }MEM_write64173,7091
    typedef struct { U16 v; } unalign16;v181,7499
    typedef struct { U16 v; } unalign16;unalign16181,7499
    typedef struct { U32 v; } unalign32;v182,7540
    typedef struct { U32 v; } unalign32;unalign32182,7540
    typedef struct { U64 v; } unalign64;v183,7581
    typedef struct { U64 v; } unalign64;unalign64183,7581
    typedef struct { size_t v; } unalignArch;v184,7622
    typedef struct { size_t v; } unalignArch;unalignArch184,7622
MEM_STATIC U16 MEM_read16(const void* ptr) { return ((const unalign16*)ptr)->v; }MEM_read16193,7973
MEM_STATIC U32 MEM_read32(const void* ptr) { return ((const unalign32*)ptr)->v; }MEM_read32194,8055
MEM_STATIC U64 MEM_read64(const void* ptr) { return ((const unalign64*)ptr)->v; }MEM_read64195,8137
MEM_STATIC size_t MEM_readST(const void* ptr) { return ((const unalignArch*)ptr)->v; }MEM_readST196,8219
MEM_STATIC void MEM_write16(void* memPtr, U16 value) { ((unalign16*)memPtr)->v = value; }MEM_write16198,8307
MEM_STATIC void MEM_write32(void* memPtr, U32 value) { ((unalign32*)memPtr)->v = value; }MEM_write32199,8397
MEM_STATIC void MEM_write64(void* memPtr, U64 value) { ((unalign64*)memPtr)->v = value; }MEM_write64200,8487
MEM_STATIC U16 MEM_read16(const void* memPtr)MEM_read16207,8657
MEM_STATIC U32 MEM_read32(const void* memPtr)MEM_read32212,8773
MEM_STATIC U64 MEM_read64(const void* memPtr)MEM_read64217,8889
MEM_STATIC size_t MEM_readST(const void* memPtr)MEM_readST222,9005
MEM_STATIC void MEM_write16(void* memPtr, U16 value)MEM_write16227,9127
MEM_STATIC void MEM_write32(void* memPtr, U32 value)MEM_write32232,9233
MEM_STATIC void MEM_write64(void* memPtr, U64 value)MEM_write64237,9339
MEM_STATIC U32 MEM_swap32(U32 in)MEM_swap32244,9483
MEM_STATIC U64 MEM_swap64(U64 in)MEM_swap64259,9945
MEM_STATIC size_t MEM_swapST(size_t in)MEM_swapST278,10652
MEM_STATIC U16 MEM_readLE16(const void* memPtr)MEM_readLE16288,10847
MEM_STATIC void MEM_writeLE16(void* memPtr, U16 val)MEM_writeLE16298,11067
MEM_STATIC U32 MEM_readLE24(const void* memPtr)MEM_readLE24309,11300
MEM_STATIC void MEM_writeLE24(void* memPtr, U32 val)MEM_writeLE24314,11421
MEM_STATIC U32 MEM_readLE32(const void* memPtr)MEM_readLE32320,11558
MEM_STATIC void MEM_writeLE32(void* memPtr, U32 val32)MEM_writeLE32328,11732
MEM_STATIC U64 MEM_readLE64(const void* memPtr)MEM_readLE64336,11915
MEM_STATIC void MEM_writeLE64(void* memPtr, U64 val64)MEM_writeLE64344,12089
MEM_STATIC size_t MEM_readLEST(const void* memPtr)MEM_readLEST352,12272
MEM_STATIC void MEM_writeLEST(void* memPtr, size_t val)MEM_writeLEST360,12449
MEM_STATIC U32 MEM_readBE32(const void* memPtr)MEM_readBE32370,12651
MEM_STATIC void MEM_writeBE32(void* memPtr, U32 val32)MEM_writeBE32378,12825
MEM_STATIC U64 MEM_readBE64(const void* memPtr)MEM_readBE64386,13008
MEM_STATIC void MEM_writeBE64(void* memPtr, U64 val64)MEM_writeBE64394,13182
MEM_STATIC size_t MEM_readBEST(const void* memPtr)MEM_readBEST402,13365
MEM_STATIC void MEM_writeBEST(void* memPtr, size_t val)MEM_writeBEST410,13542
MEM_STATIC void MEM_check(void) { DEBUG_STATIC_ASSERT((sizeof(size_t)==4) || (sizeof(size_t)==8)); }MEM_check419,13765

zstdmt_compress.h,406
 #define ZSTDMT_COMPRESS_HZSTDMT_COMPRESS_H12,413
#define ZSTD_STATIC_LINKING_ONLY ZSTD_STATIC_LINKING_ONLY30,943
#  define ZSTDMT_NBWORKERS_MAX ZSTDMT_NBWORKERS_MAX36,1137
#  define ZSTDMT_JOBSIZE_MIN ZSTDMT_JOBSIZE_MIN39,1206
#define ZSTDMT_JOBLOG_MAX ZSTDMT_JOBLOG_MAX41,1249
#define ZSTDMT_JOBSIZE_MAX ZSTDMT_JOBSIZE_MAX42,1302
typedef struct ZSTDMT_CCtx_s ZSTDMT_CCtx;ZSTDMT_CCtx51,1650

threading.c,806
int g_ZSTD_threading_useless_symbol;g_ZSTD_threading_useless_symbol21,641
static unsigned __stdcall worker(void *arg)worker38,945
int ZSTD_pthread_create(ZSTD_pthread_t* thread, const void* unused,ZSTD_pthread_create45,1120
int ZSTD_pthread_join(ZSTD_pthread_t thread, void **value_ptr)ZSTD_pthread_join59,1487
#define ZSTD_DEPS_NEED_MALLOCZSTD_DEPS_NEED_MALLOC81,1981
int ZSTD_pthread_mutex_init(ZSTD_pthread_mutex_t* mutex, pthread_mutexattr_t const* attr)ZSTD_pthread_mutex_init84,2035
int ZSTD_pthread_mutex_destroy(ZSTD_pthread_mutex_t* mutex)ZSTD_pthread_mutex_destroy92,2279
int ZSTD_pthread_cond_init(ZSTD_pthread_cond_t* cond, pthread_condattr_t const* attr)ZSTD_pthread_cond_init103,2493
int ZSTD_pthread_cond_destroy(ZSTD_pthread_cond_t* cond)ZSTD_pthread_cond_destroy111,2727

cover.h,912
#define ZDICT_STATIC_LINKING_ONLYZDICT_STATIC_LINKING_ONLY20,670
typedef struct COVER_best_s {COVER_best_s32,976
  ZSTD_pthread_mutex_t mutex;mutex33,1006
  ZSTD_pthread_cond_t cond;cond34,1036
  size_t liveJobs;liveJobs35,1064
  void *dict;dict36,1083
  size_t dictSize;dictSize37,1097
  ZDICT_cover_params_t parameters;parameters38,1116
  size_t compressedSize;compressedSize39,1151
} COVER_best_t;COVER_best_t40,1176
  U32 begin;begin46,1293
  U32 end;end47,1306
  U32 score;score48,1317
} COVER_segment_t;COVER_segment_t49,1330
  U32 num;num55,1418
  U32 size;size56,1429
} COVER_epoch_info_t;COVER_epoch_info_t57,1441
typedef struct COVER_dictSelection {COVER_dictSelection62,1526
  BYTE* dictContent;dictContent63,1563
  size_t dictSize;dictSize64,1584
  size_t totalCompressedSize;totalCompressedSize65,1603
} COVER_dictSelection_t;COVER_dictSelection_t66,1633

zstd.h,19570
#define ZSTD_H_235446ZSTD_H_23544615,454
#    define ZSTDLIB_VISIBILITY ZSTDLIB_VISIBILITY25,725
#    define ZSTDLIB_VISIBILITYZSTDLIB_VISIBILITY27,805
#  define ZSTDLIB_API ZSTDLIB_API31,905
#  define ZSTDLIB_API ZSTDLIB_API33,1023
#  define ZSTDLIB_API ZSTDLIB_API35,1217
#define ZSTD_VERSION_MAJOR ZSTD_VERSION_MAJOR73,2941
#define ZSTD_VERSION_MINOR ZSTD_VERSION_MINOR74,2973
#define ZSTD_VERSION_RELEASE ZSTD_VERSION_RELEASE75,3005
#define ZSTD_VERSION_NUMBER ZSTD_VERSION_NUMBER76,3037
#define ZSTD_LIB_VERSION ZSTD_LIB_VERSION82,3312
#define ZSTD_QUOTE(ZSTD_QUOTE83,3396
#define ZSTD_EXPAND_AND_QUOTE(ZSTD_EXPAND_AND_QUOTE84,3425
#define ZSTD_VERSION_STRING ZSTD_VERSION_STRING85,3476
#  define ZSTD_CLEVEL_DEFAULT ZSTD_CLEVEL_DEFAULT95,3826
#define ZSTD_MAGICNUMBER ZSTD_MAGICNUMBER103,4066
#define ZSTD_MAGIC_DICTIONARY ZSTD_MAGIC_DICTIONARY104,4141
#define ZSTD_MAGIC_SKIPPABLE_START ZSTD_MAGIC_SKIPPABLE_START105,4216
#define ZSTD_MAGIC_SKIPPABLE_MASK ZSTD_MAGIC_SKIPPABLE_MASK106,4360
#define ZSTD_BLOCKSIZELOG_MAX ZSTD_BLOCKSIZELOG_MAX108,4408
#define ZSTD_BLOCKSIZE_MAX ZSTD_BLOCKSIZE_MAX109,4442
#define ZSTD_CONTENTSIZE_UNKNOWN ZSTD_CONTENTSIZE_UNKNOWN157,7609
#define ZSTD_CONTENTSIZE_ERROR ZSTD_CONTENTSIZE_ERROR158,7653
#define ZSTD_COMPRESSBOUND(ZSTD_COMPRESSBOUND179,8777
typedef struct ZSTD_CCtx_s ZSTD_CCtx;ZSTD_CCtx200,10212
typedef struct ZSTD_DCtx_s ZSTD_DCtx;ZSTD_DCtx223,11272
typedef enum { ZSTD_fast=1,ZSTD_fast256,12618
               ZSTD_dfast=2,ZSTD_dfast257,12646
               ZSTD_greedy=3,ZSTD_greedy258,12675
               ZSTD_lazy=4,ZSTD_lazy259,12705
               ZSTD_lazy2=5,ZSTD_lazy2260,12733
               ZSTD_btlazy2=6,ZSTD_btlazy2261,12762
               ZSTD_btopt=7,ZSTD_btopt262,12793
               ZSTD_btultra=8,ZSTD_btultra263,12822
               ZSTD_btultra2=9ZSTD_btultra2264,12853
} ZSTD_strategy;ZSTD_strategy267,13035
    ZSTD_c_compressionLevel=100, /* Set compression parameters according to pre-defined cLevel table.ZSTD_c_compressionLevel276,13311
    ZSTD_c_windowLog=101,    /* Maximum allowed back-reference distance, expressed as power of 2.ZSTD_c_windowLog289,14480
    ZSTD_c_hashLog=102,      /* Size of the initial probe table, as a power of 2.ZSTD_c_hashLog297,15197
    ZSTD_c_chainLog=103,     /* Size of the multi-probe search table, as a power of 2.ZSTD_c_chainLog303,15702
    ZSTD_c_searchLog=104,    /* Number of search attempts, as a power of 2.ZSTD_c_searchLog311,16374
    ZSTD_c_minMatch=105,     /* Minimum size of searched matches.ZSTD_c_minMatch315,16713
    ZSTD_c_targetLength=106, /* Impact of this field depends on strategy.ZSTD_c_targetLength323,17479
    ZSTD_c_strategy=107,     /* See ZSTD_strategy enum definition.ZSTD_c_strategy331,18102
    ZSTD_c_enableLongDistanceMatching=160, /* Enable long distance matching.ZSTD_c_enableLongDistanceMatching337,18459
    ZSTD_c_ldmHashLog=161,   /* Size of the table for long distance matching, as a power of 2.ZSTD_c_ldmHashLog345,19224
    ZSTD_c_ldmMinMatch=162,  /* Minimum match size for long distance matcher.ZSTD_c_ldmMinMatch351,19717
    ZSTD_c_ldmBucketSizeLog=163, /* Log size of each bucket in the LDM hash table for collision resolution.ZSTD_c_ldmBucketSizeLog355,20085
    ZSTD_c_ldmHashRateLog=164, /* Frequency of inserting/looking up entries into the LDM hash table.ZSTD_c_ldmHashRateLog359,20473
    ZSTD_c_contentSizeFlag=200, /* Content size will be written into frame header _whenever known_ (default:1)ZSTD_c_contentSizeFlag367,21098
    ZSTD_c_checksumFlag=201, /* A 32-bits checksum of content is written at end of frame (default:0) */ZSTD_c_checksumFlag371,21518
    ZSTD_c_dictIDFlag=202,   /* When applicable, dictionary's ID is written into frame header (default:1) */ZSTD_c_dictIDFlag372,21622
    ZSTD_c_nbWorkers=400,    /* Select how many threads will be spawned to compress in parallel.ZSTD_c_nbWorkers380,22218
    ZSTD_c_jobSize=401,      /* Size of a compression job. This value is enforced only when nbWorkers >= 1.ZSTD_c_jobSize389,23272
    ZSTD_c_overlapLog=402,   /* Control the overlap size, as a fraction of window size.ZSTD_c_overlapLog394,23839
     ZSTD_c_experimentalParam1=500,ZSTD_c_experimentalParam1426,25787
     ZSTD_c_experimentalParam2=10,ZSTD_c_experimentalParam2427,25823
     ZSTD_c_experimentalParam3=1000,ZSTD_c_experimentalParam3428,25858
     ZSTD_c_experimentalParam4=1001,ZSTD_c_experimentalParam4429,25895
     ZSTD_c_experimentalParam5=1002,ZSTD_c_experimentalParam5430,25932
     ZSTD_c_experimentalParam6=1003,ZSTD_c_experimentalParam6431,25969
     ZSTD_c_experimentalParam7=1004,ZSTD_c_experimentalParam7432,26006
     ZSTD_c_experimentalParam8=1005,ZSTD_c_experimentalParam8433,26043
     ZSTD_c_experimentalParam9=1006,ZSTD_c_experimentalParam9434,26080
     ZSTD_c_experimentalParam10=1007,ZSTD_c_experimentalParam10435,26117
     ZSTD_c_experimentalParam11=1008,ZSTD_c_experimentalParam11436,26155
     ZSTD_c_experimentalParam12=1009ZSTD_c_experimentalParam12437,26193
} ZSTD_cParameter;ZSTD_cParameter438,26230
    size_t error;error441,26267
    int lowerBound;lowerBound442,26285
    int upperBound;upperBound443,26305
} ZSTD_bounds;ZSTD_bounds444,26325
    ZSTD_reset_session_only = 1,ZSTD_reset_session_only486,28879
    ZSTD_reset_parameters = 2,ZSTD_reset_parameters487,28912
    ZSTD_reset_session_and_parameters = 3ZSTD_reset_session_and_parameters488,28943
} ZSTD_ResetDirective;ZSTD_ResetDirective489,28985
    ZSTD_d_windowLogMax=100, /* Select a size limit (in power of 2) beyond whichZSTD_d_windowLogMax536,31524
     ZSTD_d_experimentalParam1=1000,ZSTD_d_experimentalParam1552,32582
     ZSTD_d_experimentalParam2=1001,ZSTD_d_experimentalParam2553,32619
     ZSTD_d_experimentalParam3=1002ZSTD_d_experimentalParam3554,32656
} ZSTD_dParameter;ZSTD_dParameter556,32693
typedef struct ZSTD_inBuffer_s {ZSTD_inBuffer_s589,34159
  const void* src;    /**< start of input buffer */src590,34192
  size_t size;        /**< size of input buffer */size591,34244
  size_t pos;         /**< position where reading stopped. Will be updated. Necessarily 0 <= pos <= size */pos592,34295
} ZSTD_inBuffer;ZSTD_inBuffer593,34403
typedef struct ZSTD_outBuffer_s {ZSTD_outBuffer_s595,34421
  void*  dst;         /**< start of output buffer */dst596,34455
  size_t size;        /**< size of output buffer */size597,34508
  size_t pos;         /**< position where writing stopped. Will be updated. Necessarily 0 <= pos <= size */pos598,34560
} ZSTD_outBuffer;ZSTD_outBuffer599,34668
typedef ZSTD_CCtx ZSTD_CStream;  /**< CCtx and CStream are now effectively same object (>= v1.3.0) */ZSTD_CStream664,38824
    ZSTD_e_continue=0, /* collect more data, encoder decides when to output compressed result, for optimal compression ratio */ZSTD_e_continue672,39264
    ZSTD_e_flush=1,    /* flush any data provided so far,ZSTD_e_flush673,39392
    ZSTD_e_end=2       /* flush any remaining data _and_ close current frame.ZSTD_e_end677,39803
} ZSTD_EndDirective;ZSTD_EndDirective682,40305
typedef ZSTD_DCtx ZSTD_DStream;  /**< DCtx and DStream are now effectively same object (>= v1.3.0) */ZSTD_DStream785,47159
typedef struct ZSTD_CDict_s ZSTD_CDict;ZSTD_CDict837,49832
typedef struct ZSTD_DDict_s ZSTD_DDict;ZSTD_DDict869,51784
#define ZSTD_H_ZSTD_STATIC_LINKING_ONLYZSTD_H_ZSTD_STATIC_LINKING_ONLY1054,62995
#define ZSTD_FRAMEHEADERSIZE_PREFIX(ZSTD_FRAMEHEADERSIZE_PREFIX1066,63689
#define ZSTD_FRAMEHEADERSIZE_MIN(ZSTD_FRAMEHEADERSIZE_MIN1067,63831
#define ZSTD_FRAMEHEADERSIZE_MAX ZSTD_FRAMEHEADERSIZE_MAX1068,63910
#define ZSTD_SKIPPABLEHEADERSIZE ZSTD_SKIPPABLEHEADERSIZE1069,63992
#define ZSTD_WINDOWLOG_MAX_32 ZSTD_WINDOWLOG_MAX_321072,64066
#define ZSTD_WINDOWLOG_MAX_64 ZSTD_WINDOWLOG_MAX_641073,64102
#define ZSTD_WINDOWLOG_MAX ZSTD_WINDOWLOG_MAX1074,64138
#define ZSTD_WINDOWLOG_MIN ZSTD_WINDOWLOG_MIN1075,64246
#define ZSTD_HASHLOG_MAX ZSTD_HASHLOG_MAX1076,64282
#define ZSTD_HASHLOG_MIN ZSTD_HASHLOG_MIN1077,64367
#define ZSTD_CHAINLOG_MAX_32 ZSTD_CHAINLOG_MAX_321078,64403
#define ZSTD_CHAINLOG_MAX_64 ZSTD_CHAINLOG_MAX_641079,64439
#define ZSTD_CHAINLOG_MAX ZSTD_CHAINLOG_MAX1080,64475
#define ZSTD_CHAINLOG_MIN ZSTD_CHAINLOG_MIN1081,64581
#define ZSTD_SEARCHLOG_MAX ZSTD_SEARCHLOG_MAX1082,64631
#define ZSTD_SEARCHLOG_MIN ZSTD_SEARCHLOG_MIN1083,64686
#define ZSTD_MINMATCH_MAX ZSTD_MINMATCH_MAX1084,64722
#define ZSTD_MINMATCH_MIN ZSTD_MINMATCH_MIN1085,64820
#define ZSTD_TARGETLENGTH_MAX ZSTD_TARGETLENGTH_MAX1086,64921
#define ZSTD_TARGETLENGTH_MIN ZSTD_TARGETLENGTH_MIN1087,64973
#define ZSTD_STRATEGY_MIN ZSTD_STRATEGY_MIN1088,65094
#define ZSTD_STRATEGY_MAX ZSTD_STRATEGY_MAX1089,65137
#define ZSTD_OVERLAPLOG_MIN ZSTD_OVERLAPLOG_MIN1092,65186
#define ZSTD_OVERLAPLOG_MAX ZSTD_OVERLAPLOG_MAX1093,65222
#define ZSTD_WINDOWLOG_LIMIT_DEFAULT ZSTD_WINDOWLOG_LIMIT_DEFAULT1095,65259
#define ZSTD_LDM_HASHLOG_MIN ZSTD_LDM_HASHLOG_MIN1103,65897
#define ZSTD_LDM_HASHLOG_MAX ZSTD_LDM_HASHLOG_MAX1104,65948
#define ZSTD_LDM_MINMATCH_MIN ZSTD_LDM_MINMATCH_MIN1105,65999
#define ZSTD_LDM_MINMATCH_MAX ZSTD_LDM_MINMATCH_MAX1106,66038
#define ZSTD_LDM_BUCKETSIZELOG_MIN ZSTD_LDM_BUCKETSIZELOG_MIN1107,66077
#define ZSTD_LDM_BUCKETSIZELOG_MAX ZSTD_LDM_BUCKETSIZELOG_MAX1108,66116
#define ZSTD_LDM_HASHRATELOG_MIN ZSTD_LDM_HASHRATELOG_MIN1109,66155
#define ZSTD_LDM_HASHRATELOG_MAX ZSTD_LDM_HASHRATELOG_MAX1110,66194
#define ZSTD_TARGETCBLOCKSIZE_MIN ZSTD_TARGETCBLOCKSIZE_MIN1113,66300
#define ZSTD_TARGETCBLOCKSIZE_MAX ZSTD_TARGETCBLOCKSIZE_MAX1114,66339
#define ZSTD_SRCSIZEHINT_MIN ZSTD_SRCSIZEHINT_MIN1115,66394
#define ZSTD_SRCSIZEHINT_MAX ZSTD_SRCSIZEHINT_MAX1116,66432
#define ZSTD_HASHLOG3_MAX ZSTD_HASHLOG3_MAX1119,66492
typedef struct ZSTD_CCtx_params_s ZSTD_CCtx_params;ZSTD_CCtx_params1124,66565
    unsigned int offset;      /* The offset of the match. (NOT the same as the offset code)offset1127,66635
    unsigned int litLength;   /* Literal length of the sequence. */litLength1132,66940
    unsigned int matchLength; /* Match length of the sequence. */matchLength1133,67008
    unsigned int rep;         /* Represents which repeat offset is represented by the field 'offset'.rep1139,67344
} ZSTD_Sequence;ZSTD_Sequence1161,68978
    unsigned windowLog;       /**< largest match distance : larger == more compression, more memory needed during decompression */windowLog1164,69013
    unsigned chainLog;        /**< fully searched segment : larger == more compression, slower, more memory (useless for fast) */chainLog1165,69144
    unsigned hashLog;         /**< dispatch table : larger == faster, more memory */hashLog1166,69274
    unsigned searchLog;       /**< nb of searches : larger == more compression, slower */searchLog1167,69359
    unsigned minMatch;        /**< match length searched : larger == faster decompression, sometimes less compression */minMatch1168,69449
    unsigned targetLength;    /**< acceptable match size for optimal parser (only) : larger == more compression, slower */targetLength1169,69570
    ZSTD_strategy strategy;   /**< see ZSTD_strategy definition above */strategy1170,69693
} ZSTD_compressionParameters;ZSTD_compressionParameters1171,69766
    int contentSizeFlag; /**< 1: content size will be in frame header (when known) */contentSizeFlag1174,69814
    int checksumFlag;    /**< 1: generate a 32-bits checksum using XXH64 algorithm at end of frame, for error detection */checksumFlag1175,69900
    int noDictIDFlag;    /**< 1: no dictID will be saved into frame header (dictID is only useful for dictionary compression) */noDictIDFlag1176,70023
} ZSTD_frameParameters;ZSTD_frameParameters1177,70152
    ZSTD_compressionParameters cParams;cParams1180,70194
    ZSTD_frameParameters fParams;fParams1181,70234
} ZSTD_parameters;ZSTD_parameters1182,70268
    ZSTD_dct_auto = 0,       /* dictionary is "full" when starting with ZSTD_MAGIC_DICTIONARY, otherwise it is "rawContent" */ZSTD_dct_auto1185,70303
    ZSTD_dct_rawContent = 1, /* ensures dictionary is always loaded as rawContent, even if it starts with ZSTD_MAGIC_DICTIONARY */ZSTD_dct_rawContent1186,70430
    ZSTD_dct_fullDict = 2    /* refuses to load a dictionary if it does not respect Zstandard's specification, starting with ZSTD_MAGIC_DICTIONARY */ZSTD_dct_fullDict1187,70561
} ZSTD_dictContentType_e;ZSTD_dictContentType_e1188,70711
    ZSTD_dlm_byCopy = 0,  /**< Copy dictionary content internally */ZSTD_dlm_byCopy1191,70753
    ZSTD_dlm_byRef = 1    /**< Reference dictionary content -- the dictionary buffer must outlive its users. */ZSTD_dlm_byRef1192,70822
} ZSTD_dictLoadMethod_e;ZSTD_dictLoadMethod_e1193,70934
    ZSTD_f_zstd1 = 0,           /* zstd frame format, specified in zstd_compression_format.md (default) */ZSTD_f_zstd11196,70975
    ZSTD_f_zstd1_magicless = 1  /* Variant of zstd frame format, without initial 4-bytes magic number.ZSTD_f_zstd1_magicless1197,71082
} ZSTD_format_e;ZSTD_format_e1200,71382
    ZSTD_d_validateChecksum = 0,ZSTD_d_validateChecksum1204,71477
    ZSTD_d_ignoreChecksum = 1ZSTD_d_ignoreChecksum1205,71510
} ZSTD_forceIgnoreChecksum_e;ZSTD_forceIgnoreChecksum_e1206,71540
    ZSTD_dictDefaultAttach = 0, /* Use the default heuristic. */ZSTD_dictDefaultAttach1241,73491
    ZSTD_dictForceAttach   = 1, /* Never copy the dictionary. */ZSTD_dictForceAttach1242,73556
    ZSTD_dictForceCopy     = 2, /* Always copy the dictionary. */ZSTD_dictForceCopy1243,73621
    ZSTD_dictForceLoad     = 3  /* Always reload the dictionary */ZSTD_dictForceLoad1244,73687
} ZSTD_dictAttachPref_e;ZSTD_dictAttachPref_e1245,73754
  ZSTD_lcm_auto = 0,          /**< Automatically determine the compression mode based on the compression level.ZSTD_lcm_auto1248,73795
  ZSTD_lcm_huffman = 1,       /**< Always attempt Huffman compression. Uncompressed literals will still beZSTD_lcm_huffman1251,74082
  ZSTD_lcm_uncompressed = 2   /**< Always emit uncompressed literals. */ZSTD_lcm_uncompressed1253,74277
} ZSTD_literalCompressionMode_e;ZSTD_literalCompressionMode_e1254,74350
  ZSTD_sf_noBlockDelimiters = 0,         /* Representation of ZSTD_Sequence has no block delimiters, sequences only */ZSTD_sf_noBlockDelimiters1306,77452
  ZSTD_sf_explicitBlockDelimiters = 1    /* Representation of ZSTD_Sequence contains explicit block delimiters */ZSTD_sf_explicitBlockDelimiters1307,77571
} ZSTD_sequenceFormat_e;ZSTD_sequenceFormat_e1308,77685
typedef void* (*ZSTD_allocFunction) (void* opaque, size_t size);ZSTD_allocFunction1481,88774
typedef void  (*ZSTD_freeFunction) (void* opaque, void* address);ZSTD_freeFunction1482,88839
typedef struct { ZSTD_allocFunction customAlloc; ZSTD_freeFunction customFree; void* opaque; } ZSTD_customMem;customAlloc1483,88905
typedef struct { ZSTD_allocFunction customAlloc; ZSTD_freeFunction customFree; void* opaque; } ZSTD_customMem;customFree1483,88905
typedef struct { ZSTD_allocFunction customAlloc; ZSTD_freeFunction customFree; void* opaque; } ZSTD_customMem;opaque1483,88905
typedef struct { ZSTD_allocFunction customAlloc; ZSTD_freeFunction customFree; void* opaque; } ZSTD_customMem;ZSTD_customMem1483,88905
ZSTD_customMem const ZSTD_defaultCMem = { NULL, NULL, NULL };  /**< this constant defers to stdlib's functions */ZSTD_defaultCMem1488,89074
typedef struct POOL_ctx_s ZSTD_threadPool;ZSTD_threadPool1511,90525
 #define ZSTD_c_rsyncable ZSTD_c_rsyncable1629,97377
#define ZSTD_c_format ZSTD_c_format1634,97558
#define ZSTD_c_forceMaxWindow ZSTD_c_forceMaxWindow1638,97729
#define ZSTD_c_forceAttachDict ZSTD_c_forceAttachDict1644,98014
#define ZSTD_c_literalCompressionMode ZSTD_c_literalCompressionMode1650,98265
#define ZSTD_c_targetCBlockSize ZSTD_c_targetCBlockSize1655,98505
#define ZSTD_c_srcSizeHint ZSTD_c_srcSizeHint1661,98803
#define ZSTD_c_enableDedicatedDictSearch ZSTD_c_enableDedicatedDictSearch1717,101523
#define ZSTD_c_stableInBuffer ZSTD_c_stableInBuffer1750,103318
#define ZSTD_c_stableOutBuffer ZSTD_c_stableOutBuffer1770,104288
#define ZSTD_c_blockDelimiters ZSTD_c_blockDelimiters1781,104736
#define ZSTD_c_validateSequences ZSTD_c_validateSequences1798,105451
#define ZSTD_d_format ZSTD_d_format1942,112775
#define ZSTD_d_stableOutBuffer ZSTD_d_stableOutBuffer1973,114498
#define ZSTD_d_forceIgnoreChecksum ZSTD_d_forceIgnoreChecksum1984,114953
    unsigned long long ingested;   /* nb input bytes read and buffered */ingested2119,121673
    unsigned long long consumed;   /* nb input bytes actually compressed */consumed2120,121747
    unsigned long long produced;   /* nb of compressed bytes generated and buffered */produced2121,121823
    unsigned long long flushed;    /* nb of compressed bytes flushed : not provided; can be tracked from caller side */flushed2122,121910
    unsigned currentJobID;         /* MT only : latest started job nb */currentJobID2123,122030
    unsigned nbActiveWorkers;      /* MT only : nb of workers actively compressing at probe time */nbActiveWorkers2124,122103
} ZSTD_frameProgression;ZSTD_frameProgression2125,122203
typedef enum { ZSTD_frame, ZSTD_skippableFrame } ZSTD_frameType_e;ZSTD_frame2311,133483
typedef enum { ZSTD_frame, ZSTD_skippableFrame } ZSTD_frameType_e;ZSTD_skippableFrame2311,133483
typedef enum { ZSTD_frame, ZSTD_skippableFrame } ZSTD_frameType_e;ZSTD_frameType_e2311,133483
    unsigned long long frameContentSize; /* if == ZSTD_CONTENTSIZE_UNKNOWN, it means this field is not available. 0 means "empty" */frameContentSize2313,133567
    unsigned long long windowSize;       /* can be very large, up to <= frameContentSize */windowSize2314,133700
    unsigned blockSizeMax;blockSizeMax2315,133792
    ZSTD_frameType_e frameType;          /* if == ZSTD_skippableFrame, frameContentSize is the size of skippable content */frameType2316,133819
    unsigned headerSize;headerSize2317,133943
    unsigned dictID;dictID2318,133968
    unsigned checksumFlag;checksumFlag2319,133989
} ZSTD_frameHeader;ZSTD_frameHeader2320,134016
typedef enum { ZSTDnit_frameHeader, ZSTDnit_blockHeader, ZSTDnit_block, ZSTDnit_lastBlock, ZSTDnit_checksum, ZSTDnit_skippableFrame } ZSTD_nextInputType_e;ZSTDnit_frameHeader2343,135484
typedef enum { ZSTDnit_frameHeader, ZSTDnit_blockHeader, ZSTDnit_block, ZSTDnit_lastBlock, ZSTDnit_checksum, ZSTDnit_skippableFrame } ZSTD_nextInputType_e;ZSTDnit_blockHeader2343,135484
typedef enum { ZSTDnit_frameHeader, ZSTDnit_blockHeader, ZSTDnit_block, ZSTDnit_lastBlock, ZSTDnit_checksum, ZSTDnit_skippableFrame } ZSTD_nextInputType_e;ZSTDnit_block2343,135484
typedef enum { ZSTDnit_frameHeader, ZSTDnit_blockHeader, ZSTDnit_block, ZSTDnit_lastBlock, ZSTDnit_checksum, ZSTDnit_skippableFrame } ZSTD_nextInputType_e;ZSTDnit_lastBlock2343,135484
typedef enum { ZSTDnit_frameHeader, ZSTDnit_blockHeader, ZSTDnit_block, ZSTDnit_lastBlock, ZSTDnit_checksum, ZSTDnit_skippableFrame } ZSTD_nextInputType_e;ZSTDnit_checksum2343,135484
typedef enum { ZSTDnit_frameHeader, ZSTDnit_blockHeader, ZSTDnit_block, ZSTDnit_lastBlock, ZSTDnit_checksum, ZSTDnit_skippableFrame } ZSTD_nextInputType_e;ZSTDnit_skippableFrame2343,135484
typedef enum { ZSTDnit_frameHeader, ZSTDnit_blockHeader, ZSTDnit_block, ZSTDnit_lastBlock, ZSTDnit_checksum, ZSTDnit_skippableFrame } ZSTD_nextInputType_e;ZSTD_nextInputType_e2343,135484

zstd_common.c,963
#define ZSTD_DEPS_NEED_MALLOCZSTD_DEPS_NEED_MALLOC16,486
unsigned ZSTD_versionNumber(void) { return ZSTD_VERSION_NUMBER; }ZSTD_versionNumber25,751
const char* ZSTD_versionString(void) { return ZSTD_VERSION_STRING; }ZSTD_versionString27,818
#undef ZSTD_isError ZSTD_isError33,1002
unsigned ZSTD_isError(size_t code) { return ERR_isError(code); }ZSTD_isError37,1174
const char* ZSTD_getErrorName(size_t code) { return ERR_getErrorName(code); }ZSTD_getErrorName41,1344
ZSTD_ErrorCode ZSTD_getErrorCode(size_t code) { return ERR_getErrorCode(code); }ZSTD_getErrorCode45,1521
const char* ZSTD_getErrorString(ZSTD_ErrorCode code) { return ERR_getErrorString(code); }ZSTD_getErrorString49,1675
void* ZSTD_customMalloc(size_t size, ZSTD_customMem customMem)ZSTD_customMalloc56,1920
void* ZSTD_customCalloc(size_t size, ZSTD_customMem customMem)ZSTD_customCalloc63,2111
void ZSTD_customFree(void* ptr, ZSTD_customMem customMem)ZSTD_customFree75,2507

zstd_compress_superblock.h,65
#define ZSTD_COMPRESS_ADVANCED_HZSTD_COMPRESS_ADVANCED_H12,419

fse.h,5212
#define FSE_HFSE_H20,735
#  define FSE_PUBLIC_API FSE_PUBLIC_API33,1143
#  define FSE_PUBLIC_API FSE_PUBLIC_API35,1286
#  define FSE_PUBLIC_API FSE_PUBLIC_API37,1386
#  define FSE_PUBLIC_APIFSE_PUBLIC_API39,1564
#define FSE_VERSION_MAJOR FSE_VERSION_MAJOR43,1627
#define FSE_VERSION_MINOR FSE_VERSION_MINOR44,1658
#define FSE_VERSION_RELEASE FSE_VERSION_RELEASE45,1689
#define FSE_LIB_VERSION FSE_LIB_VERSION47,1721
#define FSE_QUOTE(FSE_QUOTE48,1801
#define FSE_EXPAND_AND_QUOTE(FSE_EXPAND_AND_QUOTE49,1829
#define FSE_VERSION_STRING FSE_VERSION_STRING50,1878
#define FSE_VERSION_NUMBER FSE_VERSION_NUMBER52,1944
typedef unsigned FSE_CTable;   /* don't allocate that. It's only meant to be more restrictive than void* */FSE_CTable166,7987
typedef unsigned FSE_DTable;   /* don't allocate that. It's just a way to be more restrictive than void* */FSE_DTable246,12817
#define FSE_H_FSE_STATIC_LINKING_ONLYFSE_H_FSE_STATIC_LINKING_ONLY293,15560
#define FSE_NCOUNTBOUND FSE_NCOUNTBOUND303,15784
#define FSE_BLOCKBOUND(FSE_BLOCKBOUND304,15812
#define FSE_COMPRESSBOUND(FSE_COMPRESSBOUND305,15921
#define FSE_CTABLE_SIZE_U32(FSE_CTABLE_SIZE_U32308,16164
#define FSE_DTABLE_SIZE_U32(FSE_DTABLE_SIZE_U32309,16279
#define FSE_CTABLE_SIZE(FSE_CTABLE_SIZE312,16461
#define FSE_DTABLE_SIZE(FSE_DTABLE_SIZE313,16588
#define FSE_COMPRESS_WKSP_SIZE_U32(FSE_COMPRESS_WKSP_SIZE_U32327,17224
#define FSE_BUILD_CTABLE_WORKSPACE_SIZE_U32(FSE_BUILD_CTABLE_WORKSPACE_SIZE_U32340,18111
#define FSE_BUILD_CTABLE_WORKSPACE_SIZE(FSE_BUILD_CTABLE_WORKSPACE_SIZE341,18229
#define FSE_BUILD_DTABLE_WKSP_SIZE(FSE_BUILD_DTABLE_WKSP_SIZE344,18534
#define FSE_BUILD_DTABLE_WKSP_SIZE_U32(FSE_BUILD_DTABLE_WKSP_SIZE_U32345,18665
#define FSE_DECOMPRESS_WKSP_SIZE_U32(FSE_DECOMPRESS_WKSP_SIZE_U32355,19464
#define FSE_DECOMPRESS_WKSP_SIZE(FSE_DECOMPRESS_WKSP_SIZE356,19627
   FSE_repeat_none,  /**< Cannot use the previous table */FSE_repeat_none364,20357
   FSE_repeat_check, /**< Can use the previous table but it must be checked */FSE_repeat_check365,20416
   FSE_repeat_valid  /**< Can use the previous table and it is assumed to be valid */FSE_repeat_valid366,20495
 } FSE_repeat;FSE_repeat367,20581
    ptrdiff_t   value;value377,20881
    const void* stateTable;stateTable378,20904
    const void* symbolTT;symbolTT379,20932
    unsigned    stateLog;stateLog380,20958
} FSE_CState_t;FSE_CState_t381,20984
    size_t      state;state437,23383
    const void* table;   /* precise table may vary, depending on U16 */table438,23406
} FSE_DState_t;FSE_DState_t439,23478
    int deltaFindState;deltaFindState509,26748
    U32 deltaNbBits;deltaNbBits510,26772
} FSE_symbolCompressionTransform; /* total 8 bytes */FSE_symbolCompressionTransform511,26793
MEM_STATIC void FSE_initCState(FSE_CState_t* statePtr, const FSE_CTable* ct)FSE_initCState513,26848
MEM_STATIC void FSE_initCState2(FSE_CState_t* statePtr, const FSE_CTable* ct, U32 symbol)FSE_initCState2528,27429
MEM_STATIC void FSE_encodeSymbol(BIT_CStream_t* bitC, FSE_CState_t* statePtr, unsigned symbol)FSE_encodeSymbol539,27995
MEM_STATIC void FSE_flushCState(BIT_CStream_t* bitC, const FSE_CState_t* statePtr)FSE_flushCState548,28514
MEM_STATIC U32 FSE_getMaxNbBits(const void* symbolTTPtr, U32 symbolValue)FSE_getMaxNbBits560,29022
MEM_STATIC U32 FSE_bitCost(const void* symbolTTPtr, U32 tableLog, U32 symbolValue, U32 accuracyLog)FSE_bitCost570,29537
    U16 tableLog;tableLog591,30609
    U16 fastMode;fastMode592,30627
} FSE_DTableHeader;   /* sizeof U32 */FSE_DTableHeader593,30645
    unsigned short newState;newState597,30702
    unsigned char  symbol;symbol598,30731
    unsigned char  nbBits;nbBits599,30758
} FSE_decode_t;   /* size == U32 */FSE_decode_t600,30785
MEM_STATIC void FSE_initDState(FSE_DState_t* DStatePtr, BIT_DStream_t* bitD, const FSE_DTable* dt)FSE_initDState602,30822
MEM_STATIC BYTE FSE_peekSymbol(const FSE_DState_t* DStatePtr)FSE_peekSymbol611,31148
MEM_STATIC void FSE_updateState(FSE_DState_t* DStatePtr, BIT_DStream_t* bitD)FSE_updateState617,31332
MEM_STATIC BYTE FSE_decodeSymbol(FSE_DState_t* DStatePtr, BIT_DStream_t* bitD)FSE_decodeSymbol625,31648
MEM_STATIC BYTE FSE_decodeSymbolFast(FSE_DState_t* DStatePtr, BIT_DStream_t* bitD)FSE_decodeSymbolFast638,32115
MEM_STATIC unsigned FSE_endOfDState(const FSE_DState_t* DStatePtr)FSE_endOfDState649,32498
#  define FSE_MAX_MEMORY_USAGE FSE_MAX_MEMORY_USAGE667,33142
#  define FSE_DEFAULT_MEMORY_USAGE FSE_DEFAULT_MEMORY_USAGE670,33216
#  define FSE_MAX_SYMBOL_VALUE FSE_MAX_SYMBOL_VALUE680,33525
#define FSE_FUNCTION_TYPE FSE_FUNCTION_TYPE686,33736
#define FSE_FUNCTION_EXTENSIONFSE_FUNCTION_EXTENSION687,33767
#define FSE_DECODE_TYPE FSE_DECODE_TYPE688,33798
#define FSE_MAX_TABLELOG FSE_MAX_TABLELOG697,34022
#define FSE_MAX_TABLESIZE FSE_MAX_TABLESIZE698,34073
#define FSE_MAXTABLESIZE_MASK FSE_MAXTABLESIZE_MASK699,34122
#define FSE_DEFAULT_TABLELOG FSE_DEFAULT_TABLELOG700,34174
#define FSE_MIN_TABLELOG FSE_MIN_TABLELOG701,34232
#define FSE_TABLELOG_ABSOLUTE_MAX FSE_TABLELOG_ABSOLUTE_MAX703,34260
#define FSE_TABLESTEP(FSE_TABLESTEP708,34427

zstd_ddict.h,41
#define ZSTD_DDICT_HZSTD_DDICT_H13,408

zstd_v04.c,25715
#define MEM_H_MODULEMEM_H_MODULE26,797
#  define MEM_STATIC MEM_STATIC41,1137
#  define MEM_STATIC MEM_STATIC43,1292
#  define MEM_STATIC MEM_STATIC45,1351
#  define MEM_STATIC MEM_STATIC47,1394
  typedef  uint8_t BYTE;BYTE60,1875
  typedef uint16_t U16;U1661,1900
  typedef  int16_t S16;S1662,1924
  typedef uint32_t U32;U3263,1948
  typedef  int32_t S32;S3264,1972
  typedef uint64_t U64;U6465,1996
  typedef  int64_t S64;S6466,2020
  typedef unsigned char       BYTE;BYTE68,2050
  typedef unsigned short      U16;U1669,2086
  typedef   signed short      S16;S1670,2121
  typedef unsigned int        U32;U3271,2156
  typedef   signed int        S32;S3272,2191
  typedef unsigned long long  U64;U6473,2226
  typedef   signed long long  S64;S6474,2261
#  define assert(assert83,2430
#    define MEM_FORCE_MEMORY_ACCESS MEM_FORCE_MEMORY_ACCESS105,3920
#    define MEM_FORCE_MEMORY_ACCESS MEM_FORCE_MEMORY_ACCESS108,4183
MEM_STATIC unsigned MEM_32bits(void) { return sizeof(void*)==4; }MEM_32bits112,4238
MEM_STATIC unsigned MEM_64bits(void) { return sizeof(void*)==8; }MEM_64bits113,4304
MEM_STATIC unsigned MEM_isLittleEndian(void)MEM_isLittleEndian115,4371
MEM_STATIC U16 MEM_read16(const void* memPtr) { return *(const U16*) memPtr; }MEM_read16125,4740
MEM_STATIC U32 MEM_read32(const void* memPtr) { return *(const U32*) memPtr; }MEM_read32126,4819
MEM_STATIC U64 MEM_read64(const void* memPtr) { return *(const U64*) memPtr; }MEM_read64127,4898
MEM_STATIC void MEM_write16(void* memPtr, U16 value) { *(U16*)memPtr = value; }MEM_write16129,4978
typedef union { U16 u16; U32 u32; U64 u64; } __attribute__((packed)) unalign;u16135,5285
typedef union { U16 u16; U32 u32; U64 u64; } __attribute__((packed)) unalign;u32135,5285
typedef union { U16 u16; U32 u32; U64 u64; } __attribute__((packed)) unalign;u64135,5285
typedef union { U16 u16; U32 u32; U64 u64; } __attribute__((packed)) unalign;unalign135,5285
MEM_STATIC U16 MEM_read16(const void* ptr) { return ((const unalign*)ptr)->u16; }MEM_read16137,5364
MEM_STATIC U32 MEM_read32(const void* ptr) { return ((const unalign*)ptr)->u32; }MEM_read32138,5446
MEM_STATIC U64 MEM_read64(const void* ptr) { return ((const unalign*)ptr)->u64; }MEM_read64139,5528
MEM_STATIC void MEM_write16(void* memPtr, U16 value) { ((unalign*)memPtr)->u16 = value; }MEM_write16141,5611
MEM_STATIC U16 MEM_read16(const void* memPtr)MEM_read16148,5781
MEM_STATIC U32 MEM_read32(const void* memPtr)MEM_read32153,5892
MEM_STATIC U64 MEM_read64(const void* memPtr)MEM_read64158,6003
MEM_STATIC void MEM_write16(void* memPtr, U16 value)MEM_write16163,6114
MEM_STATIC U16 MEM_readLE16(const void* memPtr)MEM_readLE16171,6254
MEM_STATIC void MEM_writeLE16(void* memPtr, U16 val)MEM_writeLE16182,6478
MEM_STATIC U32 MEM_readLE24(const void* memPtr)MEM_readLE24196,6723
MEM_STATIC U32 MEM_readLE32(const void* memPtr)MEM_readLE32201,6844
MEM_STATIC U64 MEM_readLE64(const void* memPtr)MEM_readLE64213,7115
MEM_STATIC size_t MEM_readLEST(const void* memPtr)MEM_readLEST226,7479
#define ZSTD_STATIC_HZSTD_STATIC_H246,7828
#define ZSTD_WINDOWLOG_ABSOLUTEMIN ZSTD_WINDOWLOG_ABSOLUTEMIN252,7943
typedef enum { ZSTD_fast, ZSTD_greedy, ZSTD_lazy, ZSTD_lazy2, ZSTD_btlazy2 } ZSTD_strategy;ZSTD_fast255,8013
typedef enum { ZSTD_fast, ZSTD_greedy, ZSTD_lazy, ZSTD_lazy2, ZSTD_btlazy2 } ZSTD_strategy;ZSTD_greedy255,8013
typedef enum { ZSTD_fast, ZSTD_greedy, ZSTD_lazy, ZSTD_lazy2, ZSTD_btlazy2 } ZSTD_strategy;ZSTD_lazy255,8013
typedef enum { ZSTD_fast, ZSTD_greedy, ZSTD_lazy, ZSTD_lazy2, ZSTD_btlazy2 } ZSTD_strategy;ZSTD_lazy2255,8013
typedef enum { ZSTD_fast, ZSTD_greedy, ZSTD_lazy, ZSTD_lazy2, ZSTD_btlazy2 } ZSTD_strategy;ZSTD_btlazy2255,8013
typedef enum { ZSTD_fast, ZSTD_greedy, ZSTD_lazy, ZSTD_lazy2, ZSTD_btlazy2 } ZSTD_strategy;ZSTD_strategy255,8013
    U64 srcSize;       /* optional : tells how much bytes are present in the frame. Use 0 if not known. */srcSize259,8123
    U32 windowLog;     /* largest match distance : larger == more compression, more memory needed during decompression */windowLog260,8230
    U32 contentLog;    /* full search segment : larger == more compression, slower, more memory (useless for fast) */contentLog261,8352
    U32 hashLog;       /* dispatch table : larger == more memory, faster */hashLog262,8470
    U32 searchLog;     /* nb of searches : larger == more compression, slower */searchLog263,8546
    U32 searchLength;  /* size of matches : larger == faster decompression, sometimes less compression */searchLength264,8627
    ZSTD_strategy strategy;strategy265,8733
} ZSTD_parameters;ZSTD_parameters266,8761
typedef ZSTDv04_Dctx ZSTD_DCtx;ZSTD_DCtx268,8781
#define ZSTD_CCOMMON_H_MODULEZSTD_CCOMMON_H_MODULE334,11965
#define MIN(MIN339,12095
#define MAX(MAX340,12134
#define ZSTD_MAGICNUMBER ZSTD_MAGICNUMBER346,12277
#define KB KB348,12327
#define MB MB349,12348
#define GB GB350,12369
#define BLOCKSIZE BLOCKSIZE352,12391
static const size_t ZSTD_blockHeaderSize = 3;ZSTD_blockHeaderSize354,12471
static const size_t ZSTD_frameHeaderSize_min = 5;ZSTD_frameHeaderSize_min355,12517
#define ZSTD_frameHeaderSize_max ZSTD_frameHeaderSize_max356,12567
#define BIT7 BIT7358,12647
#define BIT6 BIT6359,12664
#define BIT5 BIT5360,12681
#define BIT4 BIT4361,12698
#define BIT1 BIT1362,12715
#define BIT0 BIT0363,12732
#define IS_RAW IS_RAW365,12750
#define IS_RLE IS_RLE366,12770
#define MINMATCH MINMATCH368,12791
#define REPCODE_STARTVALUE REPCODE_STARTVALUE369,12810
#define MLbits MLbits371,12840
#define LLbits LLbits372,12859
#define Offbits Offbits373,12878
#define MaxML MaxML374,12897
#define MaxLL MaxLL375,12930
#define MaxOff MaxOff376,12963
#define MLFSELog MLFSELog377,12996
#define LLFSELog LLFSELog378,13018
#define OffFSELog OffFSELog379,13040
#define MaxSeq MaxSeq380,13062
#define MIN_SEQUENCES_SIZE MIN_SEQUENCES_SIZE382,13096
#define MIN_CBLOCK_SIZE MIN_CBLOCK_SIZE383,13187
#define ZSTD_CONTENTSIZE_ERROR ZSTD_CONTENTSIZE_ERROR385,13250
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_compressed387,13295
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_raw387,13295
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_rle387,13295
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;bt_end387,13295
typedef enum { bt_compressed, bt_raw, bt_rle, bt_end } blockType_t;blockType_t387,13295
static void ZSTD_copy8(void* dst, const void* src) { memcpy(dst, src, 8); }ZSTD_copy8393,13501
#define COPY8(COPY8395,13578
static void ZSTD_wildcopy(void* dst, const void* src, ptrdiff_t length)ZSTD_wildcopy398,13716
#define FSE_HFSE_H415,14154
typedef unsigned FSE_DTable;   /* don't allocate that. It's just a way to be more restrictive than void* */FSE_DTable489,16828
#define BITSTREAM_H_MODULEBITSTREAM_H_MODULE578,21222
    size_t   bitContainer;bitContainer596,21680
    unsigned bitsConsumed;bitsConsumed597,21707
    const char* ptr;ptr598,21734
    const char* start;start599,21755
} BIT_DStream_t;BIT_DStream_t600,21778
typedef enum { BIT_DStream_unfinished = 0,BIT_DStream_unfinished602,21796
               BIT_DStream_endOfBuffer = 1,BIT_DStream_endOfBuffer603,21839
               BIT_DStream_completed = 2,BIT_DStream_completed604,21883
               BIT_DStream_overflow = 3 } BIT_DStream_status;  /* result of BIT_reloadDStream() */BIT_DStream_overflow605,21925
               BIT_DStream_overflow = 3 } BIT_DStream_status;  /* result of BIT_reloadDStream() */BIT_DStream_status605,21925
MEM_STATIC unsigned BIT_highbit32 (U32 val)BIT_highbit32627,22818
MEM_STATIC size_t BIT_initDStream(BIT_DStream_t* bitD, const void* srcBuffer, size_t srcSize)BIT_initDStream661,23949
MEM_STATIC size_t BIT_lookBits(BIT_DStream_t* bitD, U32 nbBits)BIT_lookBits700,25850
MEM_STATIC size_t BIT_lookBitsFast(BIT_DStream_t* bitD, U32 nbBits)BIT_lookBitsFast708,26160
MEM_STATIC void BIT_skipBits(BIT_DStream_t* bitD, U32 nbBits)BIT_skipBits714,26394
MEM_STATIC size_t BIT_readBits(BIT_DStream_t* bitD, U32 nbBits)BIT_readBits719,26495
MEM_STATIC size_t BIT_readBitsFast(BIT_DStream_t* bitD, U32 nbBits)BIT_readBitsFast728,26736
MEM_STATIC BIT_DStream_status BIT_reloadDStream(BIT_DStream_t* bitD)BIT_reloadDStream735,26910
MEM_STATIC unsigned BIT_endOfDStream(const BIT_DStream_t* DStream)BIT_endOfDStream770,28110
#define FSE_STATIC_HFSE_STATIC_H818,30192
#define FSE_NCOUNTBOUND FSE_NCOUNTBOUND829,30397
#define FSE_BLOCKBOUND(FSE_BLOCKBOUND830,30425
#define FSE_COMPRESSBOUND(FSE_COMPRESSBOUND831,30473
#define FSE_CTABLE_SIZE_U32(FSE_CTABLE_SIZE_U32834,30703
#define FSE_DTABLE_SIZE_U32(FSE_DTABLE_SIZE_U32835,30814
    size_t      state;state854,31483
    const void* table;   /* precise table may vary, depending on U16 */table855,31506
} FSE_DState_t;FSE_DState_t856,31578
    U16 tableLog;tableLog879,32307
    U16 fastMode;fastMode880,32325
} FSE_DTableHeader;   /* sizeof U32 */FSE_DTableHeader881,32343
    unsigned short newState;newState885,32400
    unsigned char  symbol;symbol886,32429
    unsigned char  nbBits;nbBits887,32456
} FSE_decode_t;   /* size == U32 */FSE_decode_t888,32483
MEM_STATIC void FSE_initDState(FSE_DState_t* DStatePtr, BIT_DStream_t* bitD, const FSE_DTable* dt)FSE_initDState890,32520
MEM_STATIC BYTE FSE_decodeSymbol(FSE_DState_t* DStatePtr, BIT_DStream_t* bitD)FSE_decodeSymbol899,32818
MEM_STATIC BYTE FSE_decodeSymbolFast(FSE_DState_t* DStatePtr, BIT_DStream_t* bitD)FSE_decodeSymbolFast910,33182
MEM_STATIC unsigned FSE_endOfDState(const FSE_DState_t* DStatePtr)FSE_endOfDState921,33553
#define FSE_MAX_MEMORY_USAGE FSE_MAX_MEMORY_USAGE977,36008
#define FSE_DEFAULT_MEMORY_USAGE FSE_DEFAULT_MEMORY_USAGE978,36040
#define FSE_MAX_SYMBOL_VALUE FSE_MAX_SYMBOL_VALUE983,36182
#define FSE_FUNCTION_TYPE FSE_FUNCTION_TYPE989,36385
#define FSE_FUNCTION_EXTENSIONFSE_FUNCTION_EXTENSION990,36416
#define FSE_DECODE_TYPE FSE_DECODE_TYPE991,36447
#  define FORCE_INLINE FORCE_INLINE1000,36716
#      define FORCE_INLINE FORCE_INLINE1007,37129
#      define FORCE_INLINE FORCE_INLINE1009,37211
#    define FORCE_INLINE FORCE_INLINE1012,37271
#define FSE_MAX_TABLELOG FSE_MAX_TABLELOG1028,37781
#define FSE_MAX_TABLESIZE FSE_MAX_TABLESIZE1029,37832
#define FSE_MAXTABLESIZE_MASK FSE_MAXTABLESIZE_MASK1030,37881
#define FSE_DEFAULT_TABLELOG FSE_DEFAULT_TABLELOG1031,37933
#define FSE_MIN_TABLELOG FSE_MIN_TABLELOG1032,37991
#define FSE_TABLELOG_ABSOLUTE_MAX FSE_TABLELOG_ABSOLUTE_MAX1034,38019
#define FSE_STATIC_ASSERT(FSE_STATIC_ASSERT1043,38337
typedef U32 DTable_max_t[FSE_DTABLE_SIZE_U32(FSE_MAX_TABLELOG)];DTable_max_t1049,38613
#define FSE_CAT(FSE_CAT1070,39198
#define FSE_FUNCTION_NAME(FSE_FUNCTION_NAME1071,39224
#define FSE_TYPE_NAME(FSE_TYPE_NAME1072,39268
static U32 FSE_tableStep(U32 tableSize) { return (tableSize>>1) + (tableSize>>3) + 3; }FSE_tableStep1074,39309
static size_t FSE_buildDTable(FSE_DTable* dt, const short* normalizedCounter, unsigned maxSymbolValue, unsigned tableLog)FSE_buildDTable1077,39399
static unsigned FSE_isError(size_t code) { return ERR_isError(code); }FSE_isError1149,42018
static short FSE_abs(short a)FSE_abs1155,42255
static size_t FSE_readNCount (short* normalizedCounter, unsigned* maxSVPtr, unsigned* tableLogPtr,FSE_readNCount1160,42315
static size_t FSE_buildDTable_rle (FSE_DTable* dt, BYTE symbolValue)FSE_buildDTable_rle1276,45835
static size_t FSE_buildDTable_raw (FSE_DTable* dt, unsigned nbBits)FSE_buildDTable_raw1294,46218
FORCE_INLINE size_t FSE_decompress_usingDTable_generic(FSE_decompress_usingDTable_generic1321,46962
#define FSE_GETSYMBOL(FSE_GETSYMBOL1343,47629
static size_t FSE_decompress_usingDTable(void* dst, size_t originalSize,FSE_decompress_usingDTable1391,49336
static size_t FSE_decompress(void* dst, size_t maxDstSize, const void* cSrc, size_t cSrcSize)FSE_decompress1407,49882
#define HUFF0_HHUFF0_H1473,52832
#define HUFF0_STATIC_HHUFF0_STATIC_H1551,55932
#define HUF_DTABLE_SIZE(HUF_DTABLE_SIZE1563,56163
#define HUF_CREATE_STATIC_DTABLEX2(HUF_CREATE_STATIC_DTABLEX21564,56289
#define HUF_CREATE_STATIC_DTABLEX4(HUF_CREATE_STATIC_DTABLEX41566,56425
#define HUF_CREATE_STATIC_DTABLEX6(HUF_CREATE_STATIC_DTABLEX61568,56559
#  define inline inline1643,60021
#  define inline inline1645,60053
#define HUF_ABSOLUTEMAX_TABLELOG HUF_ABSOLUTEMAX_TABLELOG1665,60677
#define HUF_MAX_TABLELOG HUF_MAX_TABLELOG1666,60796
#define HUF_DEFAULT_TABLELOG HUF_DEFAULT_TABLELOG1667,60937
#define HUF_MAX_SYMBOL_VALUE HUF_MAX_SYMBOL_VALUE1668,61032
static unsigned HUF_isError(size_t code) { return ERR_isError(code); }HUF_isError1677,61319
#define HUF_STATIC_ASSERT(HUF_STATIC_ASSERT1678,61390
typedef struct { BYTE byte; BYTE nbBits; } HUF_DEltX2;   /* single-symbol decoding */byte1685,61675
typedef struct { BYTE byte; BYTE nbBits; } HUF_DEltX2;   /* single-symbol decoding */nbBits1685,61675
typedef struct { BYTE byte; BYTE nbBits; } HUF_DEltX2;   /* single-symbol decoding */HUF_DEltX21685,61675
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUF_DEltX4;  /* double-symbols decoding */sequence1687,61762
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUF_DEltX4;  /* double-symbols decoding */nbBits1687,61762
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUF_DEltX4;  /* double-symbols decoding */length1687,61762
typedef struct { U16 sequence; BYTE nbBits; BYTE length; } HUF_DEltX4;  /* double-symbols decoding */HUF_DEltX41687,61762
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;symbol1689,61865
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;weight1689,61865
typedef struct { BYTE symbol; BYTE weight; } sortedSymbol_t;sortedSymbol_t1689,61865
static size_t HUF_readStats(BYTE* huffWeight, size_t hwSize, U32* rankStats,HUF_readStats1696,62076
static size_t HUF_readDTableX2 (U16* DTable, const void* src, size_t srcSize)HUF_readDTableX21779,64985
static BYTE HUF_decodeSymbolX2(BIT_DStream_t* Dstream, const HUF_DEltX2* dt, const U32 dtLog)HUF_decodeSymbolX21826,66608
#define HUF_DECODE_SYMBOLX2_0(HUF_DECODE_SYMBOLX2_01834,66894
#define HUF_DECODE_SYMBOLX2_1(HUF_DECODE_SYMBOLX2_11837,66999
#define HUF_DECODE_SYMBOLX2_2(HUF_DECODE_SYMBOLX2_21841,67146
static inline size_t HUF_decodeStreamX2(BYTE* p, BIT_DStream_t* const bitDPtr, BYTE* const pEnd, const HUF_DEltX2* const dt, const U32 dtLog)HUF_decodeStreamX21845,67267
static size_t HUF_decompress4X2_usingDTable(HUF_decompress4X2_usingDTable1870,68066
static size_t HUF_decompress4X2 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress4X21966,72217
static void HUF_fillDTableX4Level2(HUF_DEltX4* DTable, U32 sizeLog, const U32 consumed,HUF_fillDTableX4Level21986,72828
typedef U32 rankVal_t[HUF_ABSOLUTEMAX_TABLELOG][HUF_ABSOLUTEMAX_TABLELOG + 1];rankVal_t2029,74302
static void HUF_fillDTableX4(HUF_DEltX4* DTable, const U32 targetLog,HUF_fillDTableX42031,74382
static size_t HUF_readDTableX4 (U32* DTable, const void* src, size_t srcSize)HUF_readDTableX42079,76183
static U32 HUF_decodeSymbolX4(void* op, BIT_DStream_t* DStream, const HUF_DEltX4* dt, const U32 dtLog)HUF_decodeSymbolX42165,79115
static U32 HUF_decodeLastSymbolX4(void* op, BIT_DStream_t* DStream, const HUF_DEltX4* dt, const U32 dtLog)HUF_decodeLastSymbolX42173,79403
#define HUF_DECODE_SYMBOLX4_0(HUF_DECODE_SYMBOLX4_02191,80136
#define HUF_DECODE_SYMBOLX4_1(HUF_DECODE_SYMBOLX4_12194,80244
#define HUF_DECODE_SYMBOLX4_2(HUF_DECODE_SYMBOLX4_22198,80406
static inline size_t HUF_decodeStreamX4(BYTE* p, BIT_DStream_t* bitDPtr, BYTE* const pEnd, const HUF_DEltX4* const dt, const U32 dtLog)HUF_decodeStreamX42202,80542
static size_t HUF_decompress4X4_usingDTable(HUF_decompress4X4_usingDTable2228,81395
static size_t HUF_decompress4X4 (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress4X42324,85546
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;tableTime2343,86139
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;decode256Time2343,86139
typedef struct { U32 tableTime; U32 decode256Time; } algo_time_t;algo_time_t2343,86139
static const algo_time_t algoTime[16 /* Quantization */][3 /* single, double, quad */] =algoTime2344,86205
typedef size_t (*decompressionAlgo)(void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize);decompressionAlgo2365,87359
static size_t HUF_decompress (void* dst, size_t dstSize, const void* cSrc, size_t cSrcSize)HUF_decompress2367,87459
#  define ZSTD_HEAPMODE ZSTD_HEAPMODE2445,90988
    blockType_t blockType;blockType2472,91829
    U32 origSize;origSize2473,91856
} blockProperties_t;blockProperties_t2474,91874
static void ZSTD_copy4(void* dst, const void* src) { memcpy(dst, src, 4); }ZSTD_copy42480,92037
static unsigned ZSTD_isError(size_t code) { return ERR_isError(code); }ZSTD_isError2489,92283
typedef enum { ZSTDds_getFrameHeaderSize, ZSTDds_decodeFrameHeader,ZSTDds_getFrameHeaderSize2495,92510
typedef enum { ZSTDds_getFrameHeaderSize, ZSTDds_decodeFrameHeader,ZSTDds_decodeFrameHeader2495,92510
               ZSTDds_decodeBlockHeader, ZSTDds_decompressBlock } ZSTD_dStage;ZSTDds_decodeBlockHeader2496,92578
               ZSTDds_decodeBlockHeader, ZSTDds_decompressBlock } ZSTD_dStage;ZSTDds_decompressBlock2496,92578
               ZSTDds_decodeBlockHeader, ZSTDds_decompressBlock } ZSTD_dStage;ZSTD_dStage2496,92578
struct ZSTDv04_Dctx_sZSTDv04_Dctx_s2498,92658
    U32 LLTable[FSE_DTABLE_SIZE_U32(LLFSELog)];LLTable2500,92682
    U32 OffTable[FSE_DTABLE_SIZE_U32(OffFSELog)];OffTable2501,92730
    U32 MLTable[FSE_DTABLE_SIZE_U32(MLFSELog)];MLTable2502,92780
    const void* previousDstEnd;previousDstEnd2503,92828
    const void* base;base2504,92860
    const void* vBase;vBase2505,92882
    const void* dictEnd;dictEnd2506,92905
    size_t expected;expected2507,92930
    size_t headerSize;headerSize2508,92951
    ZSTD_parameters params;params2509,92974
    blockType_t bType;bType2510,93002
    ZSTD_dStage stage;stage2511,93025
    const BYTE* litPtr;litPtr2512,93048
    size_t litSize;litSize2513,93072
    BYTE litBuffer[BLOCKSIZE + 8 /* margin for wildcopy */];litBuffer2514,93092
    BYTE headerBuffer[ZSTD_frameHeaderSize_max];headerBuffer2515,93153
static size_t ZSTD_resetDCtx(ZSTD_DCtx* dctx)ZSTD_resetDCtx2518,93259
static ZSTD_DCtx* ZSTD_createDCtx(void)ZSTD_createDCtx2529,93522
static size_t ZSTD_freeDCtx(ZSTD_DCtx* dctx)ZSTD_freeDCtx2537,93704
static size_t ZSTD_decodeFrameHeader_Part1(ZSTD_DCtx* zc, const void* src, size_t srcSize)ZSTD_decodeFrameHeader_Part12551,94149
static size_t ZSTD_getFrameParams(ZSTD_parameters* params, const void* src, size_t srcSize)ZSTD_getFrameParams2562,94523
static size_t ZSTD_decodeFrameHeader_Part2(ZSTD_DCtx* zc, const void* src, size_t srcSize)ZSTD_decodeFrameHeader_Part22578,95285
static size_t ZSTD_getcBlockSize(const void* src, size_t srcSize, blockProperties_t* bpPtr)ZSTD_getcBlockSize2588,95644
static size_t ZSTD_copyRawBlock(void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTD_copyRawBlock2607,96188
static size_t ZSTD_decompressLiterals(void* dst, size_t* maxDstSizePtr,ZSTD_decompressLiterals2619,96523
static size_t ZSTD_decodeLiteralsBlock(ZSTD_DCtx* dctx,ZSTD_decodeLiteralsBlock2639,97323
static size_t ZSTD_decodeSeqHeaders(int* nbSeq, const BYTE** dumpsPtr, size_t* dumpsLengthPtr,ZSTD_decodeSeqHeaders2691,99438
    size_t litLength;litLength2794,102941
    size_t offset;offset2795,102963
    size_t matchLength;matchLength2796,102982
} seq_t;seq_t2797,103006
    BIT_DStream_t DStream;DStream2800,103033
    FSE_DState_t stateLL;stateLL2801,103060
    FSE_DState_t stateOffb;stateOffb2802,103086
    FSE_DState_t stateML;stateML2803,103114
    size_t prevOffset;prevOffset2804,103140
    const BYTE* dumps;dumps2805,103163
    const BYTE* dumpsEnd;dumpsEnd2806,103186
} seqState_t;seqState_t2807,103212
static void ZSTD_decodeSequence(seq_t* seq, seqState_t* seqState)ZSTD_decodeSequence2810,103228
static size_t ZSTD_execSequence(BYTE* op,ZSTD_execSequence2869,105593
static size_t ZSTD_decompressSequences(ZSTD_decompressSequences2954,108758
static void ZSTD_checkContinuity(ZSTD_DCtx* dctx, const void* dst)ZSTD_checkContinuity3028,111627
static size_t ZSTD_decompressBlock_internal(ZSTD_DCtx* dctx,ZSTD_decompressBlock_internal3040,111988
static size_t ZSTD_decompress_usingDict(ZSTD_DCtx* ctx,ZSTD_decompress_usingDict3060,112598
static void ZSTD_errorFrameSizeInfoLegacy(size_t* cSize, unsigned long long* dBound, size_t ret)ZSTD_errorFrameSizeInfoLegacy3141,115431
void ZSTDv04_findFrameSizeInfoLegacy(const void *src, size_t srcSize, size_t* cSize, unsigned long long* dBound)ZSTDv04_findFrameSizeInfoLegacy3147,115589
static size_t ZSTD_nextSrcSizeToDecompress(ZSTD_DCtx* dctx)ZSTD_nextSrcSizeToDecompress3195,117066
static size_t ZSTD_decompressContinue(ZSTD_DCtx* ctx, void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTD_decompressContinue3200,117158
static void ZSTD_decompress_insertDictionary(ZSTD_DCtx* ctx, const void* dict, size_t dictSize)ZSTD_decompress_insertDictionary3276,120042
typedef enum { ZBUFFds_init, ZBUFFds_readHeader, ZBUFFds_loadHeader, ZBUFFds_decodeHeader,ZBUFFds_init3351,123843
typedef enum { ZBUFFds_init, ZBUFFds_readHeader, ZBUFFds_loadHeader, ZBUFFds_decodeHeader,ZBUFFds_readHeader3351,123843
typedef enum { ZBUFFds_init, ZBUFFds_readHeader, ZBUFFds_loadHeader, ZBUFFds_decodeHeader,ZBUFFds_loadHeader3351,123843
typedef enum { ZBUFFds_init, ZBUFFds_readHeader, ZBUFFds_loadHeader, ZBUFFds_decodeHeader,ZBUFFds_decodeHeader3351,123843
               ZBUFFds_read, ZBUFFds_load, ZBUFFds_flush } ZBUFF_dStage;ZBUFFds_read3352,123934
               ZBUFFds_read, ZBUFFds_load, ZBUFFds_flush } ZBUFF_dStage;ZBUFFds_load3352,123934
               ZBUFFds_read, ZBUFFds_load, ZBUFFds_flush } ZBUFF_dStage;ZBUFFds_flush3352,123934
               ZBUFFds_read, ZBUFFds_load, ZBUFFds_flush } ZBUFF_dStage;ZBUFF_dStage3352,123934
#define ZSTD_frameHeaderSize_max ZSTD_frameHeaderSize_max3356,124043
struct ZBUFFv04_DCtx_s {ZBUFFv04_DCtx_s3357,124126
    ZSTD_DCtx* zc;zc3358,124151
    ZSTD_parameters params;params3359,124170
    char* inBuff;inBuff3360,124198
    size_t inBuffSize;inBuffSize3361,124216
    size_t inPos;inPos3362,124239
    char* outBuff;outBuff3363,124257
    size_t outBuffSize;outBuffSize3364,124276
    size_t outStart;outStart3365,124300
    size_t outEnd;outEnd3366,124321
    size_t hPos;hPos3367,124340
    const char* dict;dict3368,124357
    size_t dictSize;dictSize3369,124379
    ZBUFF_dStage stage;stage3370,124400
    unsigned char headerBuffer[ZSTD_frameHeaderSize_max];headerBuffer3371,124424
typedef ZBUFFv04_DCtx ZBUFF_DCtx;ZBUFF_DCtx3374,124543
static ZBUFF_DCtx* ZBUFF_createDCtx(void)ZBUFF_createDCtx3377,124579
static size_t ZBUFF_freeDCtx(ZBUFF_DCtx* zbc)ZBUFF_freeDCtx3387,124835
static size_t ZBUFF_decompressInit(ZBUFF_DCtx* zbc)ZBUFF_decompressInit3400,125079
static size_t ZBUFF_decompressWithDictionary(ZBUFF_DCtx* zbc, const void* src, size_t srcSize)ZBUFF_decompressWithDictionary3408,125288
static size_t ZBUFF_limitCopy(void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZBUFF_limitCopy3415,125465
static size_t ZBUFF_decompressContinue(ZBUFF_DCtx* zbc, void* dst, size_t* maxDstSizePtr, const void* src, size_t* srcSizePtr)ZBUFF_decompressContinue3426,125719
unsigned ZBUFFv04_isError(size_t errorCode) { return ERR_isError(errorCode); }ZBUFFv04_isError3591,133119
const char* ZBUFFv04_getErrorName(size_t errorCode) { return ERR_getErrorName(errorCode); }ZBUFFv04_getErrorName3592,133198
size_t ZBUFFv04_recommendedDInSize()  { return BLOCKSIZE + 3; }ZBUFFv04_recommendedDInSize3594,133291
size_t ZBUFFv04_recommendedDOutSize() { return BLOCKSIZE; }ZBUFFv04_recommendedDOutSize3595,133355
size_t ZSTDv04_decompressDCtx(ZSTD_DCtx* dctx, void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTDv04_decompressDCtx3603,133529
size_t ZSTDv04_decompress(void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTDv04_decompress3608,133728
size_t ZSTDv04_resetDCtx(ZSTDv04_Dctx* dctx) { return ZSTD_resetDCtx(dctx); }ZSTDv04_resetDCtx3623,134217
size_t ZSTDv04_nextSrcSizeToDecompress(ZSTDv04_Dctx* dctx)ZSTDv04_nextSrcSizeToDecompress3625,134296
size_t ZSTDv04_decompressContinue(ZSTDv04_Dctx* dctx, void* dst, size_t maxDstSize, const void* src, size_t srcSize)ZSTDv04_decompressContinue3630,134407
ZBUFFv04_DCtx* ZBUFFv04_createDCtx(void) { return ZBUFF_createDCtx(); }ZBUFFv04_createDCtx3637,134604
size_t ZBUFFv04_freeDCtx(ZBUFFv04_DCtx* dctx) { return ZBUFF_freeDCtx(dctx); }ZBUFFv04_freeDCtx3638,134676
size_t ZBUFFv04_decompressInit(ZBUFFv04_DCtx* dctx) { return ZBUFF_decompressInit(dctx); }ZBUFFv04_decompressInit3640,134756
size_t ZBUFFv04_decompressWithDictionary(ZBUFFv04_DCtx* dctx, const void* src, size_t srcSize)ZBUFFv04_decompressWithDictionary3641,134847
size_t ZBUFFv04_decompressContinue(ZBUFFv04_DCtx* dctx, void* dst, size_t* maxDstSizePtr, const void* src, size_t* srcSizePtr)ZBUFFv04_decompressContinue3644,135006
ZSTD_DCtx* ZSTDv04_createDCtx(void) { return ZSTD_createDCtx(); }ZSTDv04_createDCtx3650,135266
size_t ZSTDv04_freeDCtx(ZSTD_DCtx* dctx) { return ZSTD_freeDCtx(dctx); }ZSTDv04_freeDCtx3651,135332

divsufsort.h,45
#define _DIVSUFSORT_H _DIVSUFSORT_H28,1211

zstd_compress_literals.c,435
size_t ZSTD_noCompressLiterals (void* dst, size_t dstCapacity, const void* src, size_t srcSize)ZSTD_noCompressLiterals16,524
size_t ZSTD_compressRleLiteralsBlock (void* dst, size_t dstCapacity, const void* src, size_t srcSize)ZSTD_compressRleLiteralsBlock43,1460
size_t ZSTD_compressLiterals (ZSTD_hufCTables_t const* prevHuf,ZSTD_compressLiterals70,2388
#   define COMPRESS_LITERALS_SIZE_MIN COMPRESS_LITERALS_SIZE_MIN95,3545

zbuff_compress.c,1118
#define ZBUFF_STATIC_LINKING_ONLYZBUFF_STATIC_LINKING_ONLY16,486
ZBUFF_CCtx* ZBUFF_createCCtx(void)ZBUFF_createCCtx53,2803
ZBUFF_CCtx* ZBUFF_createCCtx_advanced(ZSTD_customMem customMem)ZBUFF_createCCtx_advanced58,2876
size_t ZBUFF_freeCCtx(ZBUFF_CCtx* zbc)ZBUFF_freeCCtx63,2996
size_t ZBUFF_compressInit_advanced(ZBUFF_CCtx* zbc,ZBUFF_compressInit_advanced71,3115
size_t ZBUFF_compressInitDictionary(ZBUFF_CCtx* zbc, const void* dict, size_t dictSize, int compressionLevel)ZBUFF_compressInitDictionary80,3530
size_t ZBUFF_compressInit(ZBUFF_CCtx* zbc, int compressionLevel)ZBUFF_compressInit85,3723
size_t ZBUFF_compressContinue(ZBUFF_CCtx* zbc,ZBUFF_compressContinue93,3883
size_t ZBUFF_compressFlush(ZBUFF_CCtx* zbc, void* dst, size_t* dstCapacityPtr)ZBUFF_compressFlush116,4465
size_t ZBUFF_compressEnd(ZBUFF_CCtx* zbc, void* dst, size_t* dstCapacityPtr)ZBUFF_compressEnd129,4777
size_t ZBUFF_recommendedCInSize(void)  { return ZSTD_CStreamInSize(); }ZBUFF_recommendedCInSize146,5186
size_t ZBUFF_recommendedCOutSize(void) { return ZSTD_CStreamOutSize(); }ZBUFF_recommendedCOutSize147,5258

zstd_v02.h,181
#define ZSTD_V02_H_4174539423ZSTD_V02_H_417453942312,416
typedef struct ZSTDv02_Dctx_s ZSTDv02_Dctx;ZSTDv02_Dctx60,2402
#define ZSTDv02_magicNumber ZSTDv02_magicNumber86,3588

zstd_internal.h,7346
#define ZSTD_CCOMMON_H_MODULEZSTD_CCOMMON_H_MODULE12,416
#define ZSTD_STATIC_LINKING_ONLYZSTD_STATIC_LINKING_ONLY29,999
#define FSE_STATIC_LINKING_ONLYFSE_STATIC_LINKING_ONLY31,1050
#define HUF_STATIC_LINKING_ONLYHUF_STATIC_LINKING_ONLY33,1099
#  define XXH_STATIC_LINKING_ONLY XXH_STATIC_LINKING_ONLY36,1180
#define ZSTD_STATIC_ASSERT(ZSTD_STATIC_ASSERT45,1394
#define ZSTD_isError ZSTD_isError46,1447
#define FSE_isError FSE_isError47,1501
#define HUF_isError HUF_isError48,1534
#undef MINMIN54,1668
#undef MAXMAX55,1679
#define MIN(MIN56,1690
#define MAX(MAX57,1729
void _force_has_format_string(const char *format, ...) {_force_has_format_string69,2200
#define _FORCE_HAS_FORMAT_STRING(_FORCE_HAS_FORMAT_STRING79,2467
#define RETURN_ERROR_IF(RETURN_ERROR_IF91,2814
#define RETURN_ERROR(RETURN_ERROR106,3253
#define FORWARD_IF_ERROR(FORWARD_IF_ERROR121,3715
#define ZSTD_OPT_NUM ZSTD_OPT_NUM138,4237
#define ZSTD_REP_NUM ZSTD_REP_NUM140,4270
#define ZSTD_REP_MOVE ZSTD_REP_MOVE141,4339
static UNUSED_ATTR const U32 repStartValue[ZSTD_REP_NUM] = { 1, 4, 8 };repStartValue142,4382
#define KB KB144,4455
#define MB MB145,4476
#define GB GB146,4497
#define BIT7 BIT7148,4519
#define BIT6 BIT6149,4536
#define BIT5 BIT5150,4553
#define BIT4 BIT4151,4570
#define BIT1 BIT1152,4587
#define BIT0 BIT0153,4604
#define ZSTD_WINDOWLOG_ABSOLUTEMIN ZSTD_WINDOWLOG_ABSOLUTEMIN155,4622
static UNUSED_ATTR const size_t ZSTD_fcs_fieldSize[4] = { 0, 2, 4, 8 };ZSTD_fcs_fieldSize156,4660
static UNUSED_ATTR const size_t ZSTD_did_fieldSize[4] = { 0, 1, 2, 4 };ZSTD_did_fieldSize157,4732
#define ZSTD_FRAMEIDSIZE ZSTD_FRAMEIDSIZE159,4805
#define ZSTD_BLOCKHEADERSIZE ZSTD_BLOCKHEADERSIZE161,4859
static UNUSED_ATTR const size_t ZSTD_blockHeaderSize = ZSTD_BLOCKHEADERSIZE;ZSTD_blockHeaderSize162,4996
typedef enum { bt_raw, bt_rle, bt_compressed, bt_reserved } blockType_e;bt_raw163,5073
typedef enum { bt_raw, bt_rle, bt_compressed, bt_reserved } blockType_e;bt_rle163,5073
typedef enum { bt_raw, bt_rle, bt_compressed, bt_reserved } blockType_e;bt_compressed163,5073
typedef enum { bt_raw, bt_rle, bt_compressed, bt_reserved } blockType_e;bt_reserved163,5073
typedef enum { bt_raw, bt_rle, bt_compressed, bt_reserved } blockType_e;blockType_e163,5073
#define ZSTD_FRAMECHECKSUMSIZE ZSTD_FRAMECHECKSUMSIZE165,5147
#define MIN_SEQUENCES_SIZE MIN_SEQUENCES_SIZE167,5181
#define MIN_CBLOCK_SIZE MIN_CBLOCK_SIZE168,5225
#define HufLog HufLog170,5353
typedef enum { set_basic, set_rle, set_compressed, set_repeat } symbolEncodingType_e;set_basic171,5371
typedef enum { set_basic, set_rle, set_compressed, set_repeat } symbolEncodingType_e;set_rle171,5371
typedef enum { set_basic, set_rle, set_compressed, set_repeat } symbolEncodingType_e;set_compressed171,5371
typedef enum { set_basic, set_rle, set_compressed, set_repeat } symbolEncodingType_e;set_repeat171,5371
typedef enum { set_basic, set_rle, set_compressed, set_repeat } symbolEncodingType_e;symbolEncodingType_e171,5371
#define LONGNBSEQ LONGNBSEQ173,5458
#define MINMATCH MINMATCH175,5484
#define Litbits Litbits177,5504
#define MaxLit MaxLit178,5523
#define MaxML MaxML179,5557
#define MaxLL MaxLL180,5576
#define DefaultMaxOff DefaultMaxOff181,5595
#define MaxOff MaxOff182,5620
#define MaxSeq MaxSeq183,5639
#define MLFSELog MLFSELog184,5714
#define LLFSELog LLFSELog185,5736
#define OffFSELog OffFSELog186,5758
#define MaxFSELog MaxFSELog187,5780
#define ZSTD_MAX_HUF_HEADER_SIZE ZSTD_MAX_HUF_HEADER_SIZE189,5840
#define ZSTD_MAX_FSE_HEADERS_SIZE ZSTD_MAX_FSE_HEADERS_SIZE191,5983
static UNUSED_ATTR const U32 LL_bits[MaxLL+1] = {LL_bits193,6105
static UNUSED_ATTR const S16 LL_defaultNorm[MaxLL+1] = {LL_defaultNorm200,6290
#define LL_DEFAULTNORMLOG LL_DEFAULTNORMLOG207,6482
static UNUSED_ATTR const U32 LL_defaultNormLog = LL_DEFAULTNORMLOG;LL_defaultNormLog208,6539
static UNUSED_ATTR const U32 ML_bits[MaxML+1] = {ML_bits210,6608
static UNUSED_ATTR const S16 ML_defaultNorm[MaxML+1] = {ML_defaultNorm219,6854
#define ML_DEFAULTNORMLOG ML_DEFAULTNORMLOG228,7107
static UNUSED_ATTR const U32 ML_defaultNormLog = ML_DEFAULTNORMLOG;ML_defaultNormLog229,7164
static UNUSED_ATTR const S16 OF_defaultNorm[DefaultMaxOff+1] = {OF_defaultNorm231,7233
#define OF_DEFAULTNORMLOG OF_DEFAULTNORMLOG237,7407
static UNUSED_ATTR const U32 OF_defaultNormLog = OF_DEFAULTNORMLOG;OF_defaultNormLog238,7464
static void ZSTD_copy8(void* dst, const void* src) {ZSTD_copy8244,7672
#define COPY8(COPY8252,7885
static void ZSTD_copy16(void* dst, const void* src) {ZSTD_copy16253,7937
#define COPY16(COPY16260,8153
#define WILDCOPY_OVERLENGTH WILDCOPY_OVERLENGTH262,8210
#define WILDCOPY_VECLEN WILDCOPY_VECLEN263,8241
    ZSTD_no_overlap,ZSTD_no_overlap266,8284
    ZSTD_overlap_src_before_dstZSTD_overlap_src_before_dst267,8305
} ZSTD_overlap_e;ZSTD_overlap_e269,8377
void ZSTD_wildcopy(void* dst, const void* src, ptrdiff_t length, ZSTD_overlap_e const ovtype)ZSTD_wildcopy279,8891
MEM_STATIC size_t ZSTD_limitCopy(void* dst, size_t dstCapacity, const void* src, size_t srcSize)ZSTD_limitCopy320,10194
#define ZSTD_WORKSPACETOOLARGE_FACTOR ZSTD_WORKSPACETOOLARGE_FACTOR330,10516
#define ZSTD_WORKSPACETOOLARGE_MAXDURATION ZSTD_WORKSPACETOOLARGE_MAXDURATION337,10824
    ZSTD_bm_buffered = 0,  /* Buffer the input/output */ZSTD_bm_buffered341,10957
    ZSTD_bm_stable = 1     /* ZSTD_inBuffer/ZSTD_outBuffer is stable */ZSTD_bm_stable342,11014
} ZSTD_bufferMode_e;ZSTD_bufferMode_e343,11086
typedef struct seqDef_s {seqDef_s349,11227
    U32 offset;         /* Offset code of the sequence */offset350,11253
    U16 litLength;litLength351,11311
    U16 matchLength;matchLength352,11330
} seqDef;seqDef353,11351
    seqDef* sequencesStart;sequencesStart356,11379
    seqDef* sequences;      /* ptr to end of sequences */sequences357,11407
    BYTE* litStart;litStart358,11465
    BYTE* lit;              /* ptr to end of literals */lit359,11485
    BYTE* llCode;llCode360,11542
    BYTE* mlCode;mlCode361,11560
    BYTE* ofCode;ofCode362,11578
    size_t maxNbSeq;maxNbSeq363,11596
    size_t maxNbLit;maxNbLit364,11617
    U32   longLengthID;   /* 0 == no longLength; 1 == Represent the long literal; 2 == Represent the long match; */longLengthID370,11916
    U32   longLengthPos;  /* Index of the sequence to apply long length modification to */longLengthPos371,12032
} seqStore_t;seqStore_t372,12123
    U32 litLength;litLength375,12155
    U32 matchLength;matchLength376,12174
} ZSTD_sequenceLength;ZSTD_sequenceLength377,12195
MEM_STATIC ZSTD_sequenceLength ZSTD_getSequenceLength(seqStore_t const* seqStore, seqDef const* seq)ZSTD_getSequenceLength383,12416
    size_t compressedSize;compressedSize406,13266
    unsigned long long decompressedBound;decompressedBound407,13293
} ZSTD_frameSizeInfo;   /* decompress & legacy */ZSTD_frameSizeInfo408,13335
MEM_STATIC U32 ZSTD_highbit32(U32 val)   /* compress, dictBuilder, decodeCorpus */ZSTD_highbit32419,13844
    blockType_e blockType;blockType456,15114
    U32 lastBlock;lastBlock457,15141
    U32 origSize;origSize458,15160
} blockProperties_t;   /* declared here for decompress and fullbench */blockProperties_t459,15178

huf_compress.c,5259
#define FSE_STATIC_LINKING_ONLY FSE_STATIC_LINKING_ONLY30,1305
#define HUF_STATIC_LINKING_ONLYHUF_STATIC_LINKING_ONLY32,1423
#define HUF_isError HUF_isError40,1653
#define HUF_STATIC_ASSERT(HUF_STATIC_ASSERT41,1685
unsigned HUF_optimalTableLog(unsigned maxTableLog, size_t srcSize, unsigned maxSymbolValue)HUF_optimalTableLog47,1927
#define MAX_FSE_TABLELOG_FOR_HUFF_HEADER MAX_FSE_TABLELOG_FOR_HUFF_HEADER61,2492
static size_t HUF_compressWeights (void* dst, size_t dstSize, const void* weightTable, size_t wtSize)HUF_compressWeights62,2535
size_t HUF_writeCTable (void* dst, size_t maxDstSize,HUF_writeCTable108,4421
size_t HUF_readCTable (HUF_CElt* CTable, unsigned* maxSymbolValuePtr, const void* src, size_t srcSize, unsigned* hasZeroWeights)HUF_readCTable144,5983
U32 HUF_getNbBits(const void* symbolTable, U32 symbolValue)HUF_getNbBits193,7985
typedef struct nodeElt_s {nodeElt_s201,8195
    U32 count;count202,8222
    U16 parent;parent203,8237
    BYTE byte;byte204,8253
    BYTE nbBits;nbBits205,8268
} nodeElt;nodeElt206,8285
static U32 HUF_setMaxHeight(nodeElt* huffNode, U32 lastNonNull, U32 maxNbBits)HUF_setMaxHeight228,9343
    U32 base;base351,15566
    U32 curr;curr352,15580
} rankPos;rankPos353,15594
typedef nodeElt huffNodeTable[HUF_CTABLE_WORKSPACE_SIZE_U32];huffNodeTable355,15606
#define RANK_POSITION_TABLE_SIZE RANK_POSITION_TABLE_SIZE357,15669
  huffNodeTable huffNodeTbl;huffNodeTbl360,15723
  rankPos rankPosition[RANK_POSITION_TABLE_SIZE];rankPosition361,15752
} HUF_buildCTable_wksp_tables;HUF_buildCTable_wksp_tables362,15802
static void HUF_sort(nodeElt* huffNode, const unsigned* count, U32 maxSymbolValue, rankPos* rankPosition)HUF_sort374,16332
#define STARTNODE STARTNODE417,18132
static int HUF_buildTree(nodeElt* huffNode, U32 maxSymbolValue)HUF_buildTree426,18520
static void HUF_buildCTableFromTree(HUF_CElt* CTable, nodeElt const* huffNode, int nonNullRank, U32 maxSymbolValue, U32 maxNbBits)HUF_buildCTableFromTree472,20388
size_t HUF_buildCTable_wksp (HUF_CElt* tree, const unsigned* count, U32 maxSymbolValue, U32 maxNbBits, void* workSpace, size_t wkspSize)HUF_buildCTable_wksp494,21340
size_t HUF_estimateCompressedSize(const HUF_CElt* CTable, const unsigned* count, unsigned maxSymbolValue)HUF_estimateCompressedSize525,22619
int HUF_validateCTable(const HUF_CElt* CTable, const unsigned* count, unsigned maxSymbolValue) {HUF_validateCTable535,22890
size_t HUF_compressBound(size_t size) { return HUF_COMPRESSBOUND(size); }HUF_compressBound544,23134
HUF_encodeSymbol(BIT_CStream_t* bitCPtr, U32 symbol, const HUF_CElt* CTable)HUF_encodeSymbol547,23236
#define HUF_FLUSHBITS(HUF_FLUSHBITS552,23391
#define HUF_FLUSHBITS_1(HUF_FLUSHBITS_1554,23435
#define HUF_FLUSHBITS_2(HUF_FLUSHBITS_2557,23557
HUF_compress1X_usingCTable_internal_body(void* dst, size_t dstSize,HUF_compress1X_usingCTable_internal_body561,23708
HUF_compress1X_usingCTable_internal_bmi2(void* dst, size_t dstSize,HUF_compress1X_usingCTable_internal_bmi2610,25289
HUF_compress1X_usingCTable_internal_default(void* dst, size_t dstSize,HUF_compress1X_usingCTable_internal_default618,25592
HUF_compress1X_usingCTable_internal(void* dst, size_t dstSize,HUF_compress1X_usingCTable_internal626,25904
HUF_compress1X_usingCTable_internal(void* dst, size_t dstSize,HUF_compress1X_usingCTable_internal639,26333
size_t HUF_compress1X_usingCTable(void* dst, size_t dstSize, const void* src, size_t srcSize, const HUF_CElt* CTable)HUF_compress1X_usingCTable649,26647
HUF_compress4X_usingCTable_internal(void* dst, size_t dstSize,HUF_compress4X_usingCTable_internal656,26883
size_t HUF_compress4X_usingCTable(void* dst, size_t dstSize, const void* src, size_t srcSize, const HUF_CElt* CTable)HUF_compress4X_usingCTable708,28706
typedef enum { HUF_singleStream, HUF_fourStreams } HUF_nbStreams_e;HUF_singleStream713,28927
typedef enum { HUF_singleStream, HUF_fourStreams } HUF_nbStreams_e;HUF_fourStreams713,28927
typedef enum { HUF_singleStream, HUF_fourStreams } HUF_nbStreams_e;HUF_nbStreams_e713,28927
static size_t HUF_compressCTable_internal(HUF_compressCTable_internal715,28996
    unsigned count[HUF_SYMBOLVALUE_MAX + 1];count733,29809
    HUF_CElt CTable[HUF_SYMBOLVALUE_MAX + 1];CTable734,29854
    HUF_buildCTable_wksp_tables buildCTable_wksp;buildCTable_wksp735,29900
} HUF_compress_tables_t;HUF_compress_tables_t736,29950
HUF_compress_internal (void* dst, size_t dstSize,HUF_compress_internal742,30160
size_t HUF_compress1X_wksp (void* dst, size_t dstSize,HUF_compress1X_wksp831,34636
size_t HUF_compress1X_repeat (void* dst, size_t dstSize,HUF_compress1X_repeat842,35124
size_t HUF_compress4X_wksp (void* dst, size_t dstSize,HUF_compress4X_wksp857,35833
size_t HUF_compress4X_repeat (void* dst, size_t dstSize,HUF_compress4X_repeat871,36434
size_t HUF_buildCTable (HUF_CElt* tree, const unsigned* count, unsigned maxSymbolValue, unsigned maxNbBits)HUF_buildCTable888,37184
size_t HUF_compress1X (void* dst, size_t dstSize,HUF_compress1X894,37444
size_t HUF_compress2 (void* dst, size_t dstSize,HUF_compress2902,37772
size_t HUF_compress (void* dst, size_t maxDstSize, const void* src, size_t srcSize)HUF_compress910,38097

zstd_opt.c,4035
#define ZSTD_LITFREQ_ADD ZSTD_LITFREQ_ADD16,486
#define ZSTD_FREQ_DIV ZSTD_FREQ_DIV17,598
#define ZSTD_MAX_PRICE ZSTD_MAX_PRICE18,692
#define ZSTD_PREDEF_THRESHOLD ZSTD_PREDEF_THRESHOLD20,728
#  define BITCOST_ACCURACY BITCOST_ACCURACY32,1233
#  define BITCOST_MULTIPLIER BITCOST_MULTIPLIER33,1262
#  define WEIGHT(WEIGHT34,1315
#  define BITCOST_ACCURACY BITCOST_ACCURACY36,1421
#  define BITCOST_MULTIPLIER BITCOST_MULTIPLIER37,1450
#  define WEIGHT(WEIGHT38,1503
MEM_STATIC U32 ZSTD_bitWeight(U32 stat)ZSTD_bitWeight41,1591
MEM_STATIC U32 ZSTD_fracWeight(U32 rawStat)ZSTD_fracWeight46,1694
MEM_STATIC double ZSTD_fCost(U32 price)ZSTD_fCost61,2145
static int ZSTD_compressedLiterals(optState_t const* const optPtr)ZSTD_compressedLiterals67,2248
static void ZSTD_setBasePrices(optState_t* optPtr, int optLevel)ZSTD_setBasePrices72,2388
static U32 ZSTD_downscaleStat(unsigned* table, U32 lastEltIndex, int malus)ZSTD_downscaleStat85,2933
ZSTD_rescaleFreqs(optState_t* const optPtr,ZSTD_rescaleFreqs104,3643
static U32 ZSTD_rawLiteralsCost(const BYTE* const literals, U32 const litLength,ZSTD_rawLiteralsCost215,8510
static U32 ZSTD_litLengthPrice(U32 const litLength, const optState_t* const optPtr, int optLevel)ZSTD_litLengthPrice240,9470
ZSTD_getMatchPrice(U32 const offset,ZSTD_getMatchPrice257,10210
static void ZSTD_updateStats(optState_t* const optPtr,ZSTD_updateStats288,11548
MEM_STATIC U32 ZSTD_readMINMATCH(const void* memPtr, U32 length)ZSTD_readMINMATCH325,12698
static U32 ZSTD_insertAndFindFirstIndexHash3 (ZSTD_matchState_t* ms,ZSTD_insertAndFindFirstIndexHash3341,13111
static U32 ZSTD_insertBt1(ZSTD_insertBt1369,14002
void ZSTD_updateTree_internal(ZSTD_updateTree_internal483,19441
void ZSTD_updateTree(ZSTD_matchState_t* ms, const BYTE* ip, const BYTE* iend) {ZSTD_updateTree504,20211
U32 ZSTD_insertBtAndGetAllMatches (ZSTD_insertBtAndGetAllMatches509,20395
FORCE_INLINE_TEMPLATE U32 ZSTD_BtGetAllMatches (ZSTD_BtGetAllMatches742,33986
    rawSeqStore_t seqStore;         /* External match candidates store for this block */seqStore773,35576
    U32 startPosInBlock;            /* Start position of the current match candidate */startPosInBlock774,35665
    U32 endPosInBlock;              /* End position of the current match candidate */endPosInBlock775,35753
    U32 offset;                     /* Offset of the match candidate */offset776,35839
} ZSTD_optLdm_t;ZSTD_optLdm_t777,35911
static void ZSTD_optLdm_skipRawSeqStoreBytes(rawSeqStore_t* rawSeqStore, size_t nbBytes) {ZSTD_optLdm_skipRawSeqStoreBytes782,36072
static void ZSTD_opt_getNextMatchAndUpdateSeqStore(ZSTD_optLdm_t* optLdm, U32 currPosInBlock,ZSTD_opt_getNextMatchAndUpdateSeqStore803,36909
static void ZSTD_optLdm_maybeAddMatch(ZSTD_match_t* matches, U32* nbMatches,ZSTD_optLdm_maybeAddMatch856,39499
static void ZSTD_optLdm_processMatchCandidate(ZSTD_optLdm_t* optLdm, ZSTD_match_t* matches, U32* nbMatches,ZSTD_optLdm_processMatchCandidate882,40789
static U32 ZSTD_totalLen(ZSTD_optimal_t sol)ZSTD_totalLen907,41929
ZSTD_compressBlock_opt_generic(ZSTD_matchState_t* ms,ZSTD_compressBlock_opt_generic930,42363
size_t ZSTD_compressBlock_btopt(ZSTD_compressBlock_btopt1214,57063
static U32 ZSTD_upscaleStat(unsigned* table, U32 lastEltIndex, int bonus)ZSTD_upscaleStat1224,57399
MEM_STATIC void ZSTD_upscaleStats(optState_t* optPtr)ZSTD_upscaleStats1237,57712
ZSTD_initStats_ultra(ZSTD_matchState_t* ms,ZSTD_initStats_ultra1252,58380
size_t ZSTD_compressBlock_btultra(ZSTD_compressBlock_btultra1279,59559
size_t ZSTD_compressBlock_btultra2(ZSTD_compressBlock_btultra21287,59891
size_t ZSTD_compressBlock_btopt_dictMatchState(ZSTD_compressBlock_btopt_dictMatchState1315,61264
size_t ZSTD_compressBlock_btultra_dictMatchState(ZSTD_compressBlock_btultra_dictMatchState1322,61547
size_t ZSTD_compressBlock_btopt_extDict(ZSTD_compressBlock_btopt_extDict1329,61832
size_t ZSTD_compressBlock_btultra_extDict(ZSTD_compressBlock_btultra_extDict1336,62101

zstd_legacy.h,1076
#define ZSTD_LEGACY_HZSTD_LEGACY_H12,408
#  undef ZSTD_LEGACY_SUPPORTZSTD_LEGACY_SUPPORT26,807
#  define ZSTD_LEGACY_SUPPORT ZSTD_LEGACY_SUPPORT27,836
MEM_STATIC unsigned ZSTD_isLegacy(const void* src, size_t srcSize)ZSTD_isLegacy56,1442
MEM_STATIC unsigned long long ZSTD_getDecompressedSize_legacy(const void* src, size_t srcSize)ZSTD_getDecompressedSize_legacy89,2253
MEM_STATIC size_t ZSTD_decompressLegacy(ZSTD_decompressLegacy121,3324
MEM_STATIC ZSTD_frameSizeInfo ZSTD_findFrameSizeInfoLegacy(const void *src, size_t srcSize)ZSTD_findFrameSizeInfoLegacy181,5543
MEM_STATIC size_t ZSTD_findFrameCompressedSizeLegacy(const void *src, size_t srcSize)ZSTD_findFrameCompressedSizeLegacy248,7802
MEM_STATIC size_t ZSTD_freeLegacyStreamContext(void* legacyContext, U32 version)ZSTD_freeLegacyStreamContext254,8017
MEM_STATIC size_t ZSTD_initLegacyStream(void** legacyContext, U32 prevVersion, U32 newVersion,ZSTD_initLegacyStream280,8733
MEM_STATIC size_t ZSTD_decompressLegacyStream(void* legacyContext, U32 version,ZSTD_decompressLegacyStream339,10805

zstd_compress_sequences.h,236
#define ZSTD_COMPRESS_SEQUENCES_HZSTD_COMPRESS_SEQUENCES_H12,420
    ZSTD_defaultDisallowed = 0,ZSTD_defaultDisallowed18,586
    ZSTD_defaultAllowed = 1ZSTD_defaultAllowed19,618
} ZSTD_defaultPolicy_e;ZSTD_defaultPolicy_e20,646

zstd_decompress_block.c,5284
#define FSE_STATIC_LINKING_ONLYFSE_STATIC_LINKING_ONLY21,816
#define HUF_STATIC_LINKING_ONLYHUF_STATIC_LINKING_ONLY23,865
static void ZSTD_copy4(void* dst, const void* src) { ZSTD_memcpy(dst, src, 4); }ZSTD_copy447,1740
size_t ZSTD_getcBlockSize(const void* src, size_t srcSize,ZSTD_getcBlockSize56,2071
size_t ZSTD_decodeLiteralsBlock(ZSTD_DCtx* dctx,ZSTD_decodeLiteralsBlock79,2985
static const ZSTD_seqSymbol LL_defaultDTable[(1<<LL_DEFAULTNORMLOG)+1] = {LL_defaultDTable247,10622
static const ZSTD_seqSymbol OF_defaultDTable[(1<<OF_DEFAULTNORMLOG)+1] = {OF_defaultDTable285,12439
static const ZSTD_seqSymbol ML_defaultDTable[(1<<ML_DEFAULTNORMLOG)+1] = {ML_defaultDTable308,13535
static void ZSTD_buildSeqTable_rle(ZSTD_seqSymbol* dt, U32 baseValue, U32 nbAddBits)ZSTD_buildSeqTable_rle346,15265
void ZSTD_buildFSETable_body(ZSTD_seqSymbol* dt,ZSTD_buildFSETable_body368,15900
static void ZSTD_buildFSETable_body_default(ZSTD_seqSymbol* dt,ZSTD_buildFSETable_body_default488,20824
TARGET_ATTRIBUTE("bmi2") static void ZSTD_buildFSETable_body_bmi2(ZSTD_seqSymbol* dt,ZSTD_buildFSETable_body_bmi2498,21237
void ZSTD_buildFSETable(ZSTD_seqSymbol* dt,ZSTD_buildFSETable508,21662
static size_t ZSTD_buildSeqTable(ZSTD_seqSymbol* DTableSpace, const ZSTD_seqSymbol** DTablePtr,ZSTD_buildSeqTable529,22392
size_t ZSTD_decodeSeqHeaders(ZSTD_DCtx* dctx, int* nbSeqPtr,ZSTD_decodeSeqHeaders577,24498
    size_t litLength;litLength658,28240
    size_t matchLength;matchLength659,28262
    size_t offset;offset660,28286
    const BYTE* match;match661,28305
} seq_t;seq_t662,28328
    size_t state;state665,28355
    const ZSTD_seqSymbol* table;table666,28373
} ZSTD_fseState;ZSTD_fseState667,28406
    BIT_DStream_t DStream;DStream670,28441
    ZSTD_fseState stateLL;stateLL671,28468
    ZSTD_fseState stateOffb;stateOffb672,28495
    ZSTD_fseState stateML;stateML673,28524
    size_t prevOffset[ZSTD_REP_NUM];prevOffset674,28551
    const BYTE* prefixStart;prefixStart675,28588
    const BYTE* dictEnd;dictEnd676,28617
    size_t pos;pos677,28642
} seqState_t;seqState_t678,28658
HINT_INLINE void ZSTD_overlapCopy8(BYTE** op, BYTE const** ip, size_t offset) {ZSTD_overlapCopy8687,28912
static void ZSTD_safecopy(BYTE* op, BYTE* const oend_w, BYTE const* ip, ptrdiff_t length, ZSTD_overlap_e ovtype) {ZSTD_safecopy720,30333
size_t ZSTD_execSequenceEnd(BYTE* op,ZSTD_execSequenceEnd765,31933
size_t ZSTD_execSequence(BYTE* op,ZSTD_execSequence808,33910
ZSTD_initFseState(ZSTD_fseState* DStatePtr, BIT_DStream_t* bitD, const ZSTD_seqSymbol* dt)ZSTD_initFseState900,37967
ZSTD_updateFseState(ZSTD_fseState* DStatePtr, BIT_DStream_t* bitD)ZSTD_updateFseState912,38441
ZSTD_updateFseStateWithDInfo(ZSTD_fseState* DStatePtr, BIT_DStream_t* bitD, ZSTD_seqSymbol const DInfo)ZSTD_updateFseStateWithDInfo921,38751
#define LONG_OFFSETS_MAX_EXTRA_BITS_32 LONG_OFFSETS_MAX_EXTRA_BITS_32933,39292
typedef enum { ZSTD_lo_isRegularOffset, ZSTD_lo_isLongOffset=1 } ZSTD_longOffset_e;ZSTD_lo_isRegularOffset938,39495
typedef enum { ZSTD_lo_isRegularOffset, ZSTD_lo_isLongOffset=1 } ZSTD_longOffset_e;ZSTD_lo_isLongOffset938,39495
typedef enum { ZSTD_lo_isRegularOffset, ZSTD_lo_isLongOffset=1 } ZSTD_longOffset_e;ZSTD_longOffset_e938,39495
typedef enum { ZSTD_p_noPrefetch=0, ZSTD_p_prefetch=1 } ZSTD_prefetch_e;ZSTD_p_noPrefetch939,39579
typedef enum { ZSTD_p_noPrefetch=0, ZSTD_p_prefetch=1 } ZSTD_prefetch_e;ZSTD_p_prefetch939,39579
typedef enum { ZSTD_p_noPrefetch=0, ZSTD_p_prefetch=1 } ZSTD_prefetch_e;ZSTD_prefetch_e939,39579
ZSTD_decodeSequence(seqState_t* seqState, const ZSTD_longOffset_e longOffsets, const ZSTD_prefetch_e prefetch)ZSTD_decodeSequence942,39681
MEM_STATIC int ZSTD_dictionaryIsActive(ZSTD_DCtx const* dctx, BYTE const* prefixStart, BYTE const* oLitEnd)ZSTD_dictionaryIsActive1055,45506
MEM_STATIC void ZSTD_assertValidSequence(ZSTD_assertValidSequence1070,46138
ZSTD_decompressSequences_body( ZSTD_DCtx* dctx,ZSTD_decompressSequences_body1103,47467
ZSTD_decompressSequences_default(ZSTD_DCtx* dctx,ZSTD_decompressSequences_default1224,53113
ZSTD_decompressSequencesLong_body(ZSTD_decompressSequencesLong_body1236,53653
#define STORED_SEQS STORED_SEQS1257,54534
#define STORED_SEQS_MASK STORED_SEQS_MASK1258,54556
#define ADVANCED_SEQS ADVANCED_SEQS1259,54597
ZSTD_decompressSequencesLong_default(ZSTD_DCtx* dctx,ZSTD_decompressSequencesLong_default1329,58209
ZSTD_decompressSequences_bmi2(ZSTD_DCtx* dctx,ZSTD_decompressSequences_bmi21346,58802
ZSTD_decompressSequencesLong_bmi2(ZSTD_DCtx* dctx,ZSTD_decompressSequencesLong_bmi21358,59349
typedef size_t (*ZSTD_decompressSequences_t)(ZSTD_decompressSequences_t1370,59847
ZSTD_decompressSequences(ZSTD_DCtx* dctx, void* dst, size_t maxDstSize,ZSTD_decompressSequences1379,60245
ZSTD_decompressSequencesLong(ZSTD_DCtx* dctx,ZSTD_decompressSequencesLong1402,61321
ZSTD_getLongOffsetsShare(const ZSTD_seqSymbol* offTable)ZSTD_getLongOffsetsShare1427,62342
ZSTD_decompressBlock_internal(ZSTD_DCtx* dctx,ZSTD_decompressBlock_internal1449,62971
void ZSTD_checkContinuity(ZSTD_DCtx* dctx, const void* dst)ZSTD_checkContinuity1520,65964
size_t ZSTD_decompressBlock(ZSTD_DCtx* dctx,ZSTD_decompressBlock1531,66335

zstd_v06.h,754
#define ZSTDv06_HZSTDv06_H12,404
#  define ZSTDLIBv06_API ZSTDLIBv06_API28,747
#  define ZSTDLIBv06_APIZSTDLIBv06_API30,800
typedef struct ZSTDv06_DCtx_s ZSTDv06_DCtx;ZSTDv06_DCtx72,2908
struct ZSTDv06_frameParams_s { unsigned long long frameContentSize; unsigned windowLog; };ZSTDv06_frameParams_s97,4165
struct ZSTDv06_frameParams_s { unsigned long long frameContentSize; unsigned windowLog; };frameContentSize97,4165
struct ZSTDv06_frameParams_s { unsigned long long frameContentSize; unsigned windowLog; };windowLog97,4165
typedef struct ZSTDv06_frameParams_s ZSTDv06_frameParams;ZSTDv06_frameParams98,4256
typedef struct ZBUFFv06_DCtx_s ZBUFFv06_DCtx;ZBUFFv06_DCtx113,4974
#define ZSTDv06_MAGICNUMBER ZSTDv06_MAGICNUMBER164,7955

fse_compress.c,2989
#define FSE_STATIC_LINKING_ONLYFSE_STATIC_LINKING_ONLY23,1042
#define ZSTD_DEPS_NEED_MALLOCZSTD_DEPS_NEED_MALLOC26,1118
#define ZSTD_DEPS_NEED_MATH64ZSTD_DEPS_NEED_MATH6427,1148
#define FSE_isError FSE_isError34,1411
#define FSE_CAT(FSE_CAT55,1963
#define FSE_FUNCTION_NAME(FSE_FUNCTION_NAME56,1989
#define FSE_TYPE_NAME(FSE_TYPE_NAME57,2033
size_t FSE_buildCTable_wksp(FSE_CTable* ct,FSE_buildCTable_wksp67,2421
size_t FSE_buildCTable(FSE_CTable* ct, const short* normalizedCounter, unsigned maxSymbolValue, unsigned tableLog)FSE_buildCTable175,6859
size_t FSE_NCountWriteBound(unsigned maxSymbolValue, unsigned tableLog)FSE_NCountWriteBound190,7420
FSE_writeNCount_generic (void* header, size_t headerBufferSize,FSE_writeNCount_generic197,7688
size_t FSE_writeNCount (void* buffer, size_t bufferSize,FSE_writeNCount292,11136
FSE_CTable* FSE_createCTable (unsigned maxSymbolValue, unsigned tableLog)FSE_createCTable309,11933
void FSE_freeCTable (FSE_CTable* ct) { ZSTD_free(ct); }FSE_freeCTable317,12229
static unsigned FSE_minTableLog(size_t srcSize, unsigned maxSymbolValue)FSE_minTableLog320,12356
unsigned FSE_optimalTableLog_internal(unsigned maxTableLog, size_t srcSize, unsigned maxSymbolValue, unsigned minus)FSE_optimalTableLog_internal329,12720
unsigned FSE_optimalTableLog(unsigned maxTableLog, size_t srcSize, unsigned maxSymbolValue)FSE_optimalTableLog343,13473
static size_t FSE_normalizeM2(short* norm, U32 tableLog, const unsigned* count, size_t total, U32 maxSymbolValue, short lowProbCount)FSE_normalizeM2351,13732
size_t FSE_normalizeCount (short* normalizedCounter, unsigned tableLog,FSE_normalizeCount437,16545
size_t FSE_buildCTable_raw (FSE_CTable* ct, unsigned nbBits)FSE_buildCTable_raw501,19363
size_t FSE_buildCTable_rle (FSE_CTable* ct, BYTE symbolValue)FSE_buildCTable_rle534,20472
static size_t FSE_compress_usingCTable_generic (void* dst, size_t dstSize,FSE_compress_usingCTable_generic557,21043
#define FSE_FLUSHBITS(FSE_FLUSHBITS573,21650
size_t FSE_compress_usingCTable (void* dst, size_t dstSize,FSE_compress_usingCTable616,22979
size_t FSE_compressBound(size_t size) { return FSE_COMPRESSBOUND(size); }FSE_compressBound629,23410
size_t FSE_compress_wksp (void* dst, size_t dstSize, const void* src, size_t srcSize, unsigned maxSymbolValue, unsigned tableLog, void* workSpace, size_t wkspSize)FSE_compress_wksp636,23683
    FSE_CTable CTable_max[FSE_CTABLE_SIZE_U32(FSE_MAX_TABLELOG, FSE_MAX_SYMBOL_VALUE)];CTable_max684,25869
      U32 hist_wksp[HIST_WKSP_SIZE_U32];hist_wksp686,25969
      BYTE scratchBuffer[1 << FSE_MAX_TABLELOG];scratchBuffer687,26010
    } workspace;workspace688,26059
} fseWkspMax_t;fseWkspMax_t689,26076
size_t FSE_compress2 (void* dst, size_t dstCapacity, const void* src, size_t srcSize, unsigned maxSymbolValue, unsigned tableLog)FSE_compress2691,26093
size_t FSE_compress (void* dst, size_t dstCapacity, const void* src, size_t srcSize)FSE_compress699,26649

error_private.c,72
const char* ERR_getErrorString(ERR_enum code)ERR_getErrorString15,507

zstd_fast.h,39
#define ZSTD_FAST_HZSTD_FAST_H12,406
